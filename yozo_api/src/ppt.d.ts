declare namespace powerpoint{
export interface ActionSetting{
getHyperlink():powerpoint.Hyperlink
getAction():int
getRun():string
setRun(run:string):void
setAction(action:int):void
getActionVerb():string
setActionVerb(actionVerb:string):void
getAnimateAction():int
setAnimateAction(animateAction:int):void
getShowAndReturn():int
setShowAndReturn(showAndReturn:int):void
getSlideShowName():string
setSlideShowName(slideShowName:string):void
getSoundEffect():powerpoint.SoundEffect
}
export interface ActionSetting{
getHyperlink():powerpoint.Hyperlink
getAction():int
getRun():string
setRun(run:string):void
setAction(action:int):void
getActionVerb():string
setActionVerb(actionVerb:string):void
getAnimateAction():int
setAnimateAction(animateAction:int):void
getShowAndReturn():int
setShowAndReturn(showAndReturn:int):void
getSlideShowName():string
setSlideShowName(slideShowName:string):void
getSoundEffect():powerpoint.SoundEffect
}
export interface ActionSettings{
item(index:int):powerpoint.ActionSetting
getCount():int
}
export interface ActionSettings{
item(index:int):powerpoint.ActionSetting
getCount():int
}
export interface AddIn{
getName():string
getPath():string
getDisplayAlerts():int
setDisplayAlerts(displayAlerts:int):void
getFullName():string
getRegisteredInHKLM():int
setAutoLoad(autoLoad:int):void
getAutoLoad():int
getLoaded():int
setLoaded(loaded:int):void
getRegistered():int
setRegistered(registered:int):void
}
export interface AddIn{
getName():string
getPath():string
getDisplayAlerts():int
setDisplayAlerts(displayAlerts:int):void
getFullName():string
getRegisteredInHKLM():int
setAutoLoad(autoLoad:int):void
getAutoLoad():int
getLoaded():int
setLoaded(loaded:int):void
getRegistered():int
setRegistered(registered:int):void
}
export interface AddIns{
add(name:string):powerpoint.AddIn
remove(index:any):void
item(index:any):powerpoint.AddIn
getCount():int
}
export interface AddIns{
add(name:string):powerpoint.AddIn
remove(index:any):void
item(index:any):powerpoint.AddIn
getCount():int
}
export interface Adjustments{
getCount():int
getItem(index:int):float
setItem(index:int,item:float):void
}
export interface Adjustments{
getCount():int
getItem(index:int):float
setItem(index:int,item:float):void
}
export interface AnimationBehavior{
delete():void
getType():int
setType(type:int):void
getPropertyEffect():powerpoint.PropertyEffect
getRotationEffect():powerpoint.RotationEffect
getAccumulate():int
setAccumulate(accumulate:int):void
getAdditive():int
setAdditive(additive:int):void
getColorEffect():powerpoint.ColorEffect
getCommandEffect():powerpoint.CommandEffect
getFilterEffect():powerpoint.FilterEffect
getMotionEffect():powerpoint.MotionEffect
getScaleEffect():powerpoint.ScaleEffect
getSetEffect():powerpoint.SetEffect
getTiming():powerpoint.Timing
}
export interface AnimationBehavior{
delete():void
getType():int
setType(type:int):void
getPropertyEffect():powerpoint.PropertyEffect
getRotationEffect():powerpoint.RotationEffect
getAccumulate():int
setAccumulate(accumulate:int):void
getAdditive():int
setAdditive(additive:int):void
getColorEffect():powerpoint.ColorEffect
getCommandEffect():powerpoint.CommandEffect
getFilterEffect():powerpoint.FilterEffect
getMotionEffect():powerpoint.MotionEffect
getScaleEffect():powerpoint.ScaleEffect
getSetEffect():powerpoint.SetEffect
getTiming():powerpoint.Timing
}
export interface AnimationBehaviors{
add(type:int,index:int):powerpoint.AnimationBehavior
item(index:int):powerpoint.AnimationBehavior
getCount():int
}
export interface AnimationBehaviors{
add(type:int,index:int):powerpoint.AnimationBehavior
item(index:int):powerpoint.AnimationBehavior
getCount():int
}
export interface AnimationPoint{
getValue():any
delete():void
setValue(value:any):void
setTime(time:float):void
getTime():float
setFormula(formula:string):void
getFormula():string
}
export interface AnimationPoint{
getValue():any
delete():void
setValue(value:any):void
setTime(time:float):void
getTime():float
setFormula(formula:string):void
getFormula():string
}
export interface AnimationPoints{
add(index:int):powerpoint.AnimationPoint
item(index:int):powerpoint.AnimationPoint
getCount():int
setSmooth(smooth:int):void
getSmooth():int
}
export interface AnimationPoints{
add(index:int):powerpoint.AnimationPoint
item(index:int):powerpoint.AnimationPoint
getCount():int
setSmooth(smooth:int):void
getSmooth():int
}
export interface AnimationSettings{
getAnimateBackground():int
setAnimateBackground(animateBackground:int):void
getAnimateTextInReverse():int
setAnimateTextInReverse(animateTextInReverse:int):void
getAnimationOrder():int
setAnimationOrder(animationOrder:int):void
getChartUnitEffect():int
setChartUnitEffect(chartUnitEffect:int):void
getTextLevelEffect():int
setTextLevelEffect(textLevelEffect:int):void
getTextUnitEffect():int
setTextUnitEffect(textUnitEffect:int):void
getSoundEffect():powerpoint.SoundEffect
getAdvanceMode():int
setAdvanceMode(advanceMode:int):void
getAdvanceTime():float
setAdvanceTime(advanceTime:float):void
getAfterEffect():int
setAfterEffect(afterEffect:int):void
getAnimate():int
setAnimate(animate:int):void
getEntryEffect():int
setEntryEffect(entryEffect:int):void
getDimColor():powerpoint.ColorFormat
getPlaySettings():powerpoint.PlaySettings
}
export interface AnimationSettings{
getAnimateBackground():int
setAnimateBackground(animateBackground:int):void
getAnimateTextInReverse():int
setAnimateTextInReverse(animateTextInReverse:int):void
getAnimationOrder():int
setAnimationOrder(animationOrder:int):void
getChartUnitEffect():int
setChartUnitEffect(chartUnitEffect:int):void
getTextLevelEffect():int
setTextLevelEffect(textLevelEffect:int):void
getTextUnitEffect():int
setTextUnitEffect(textUnitEffect:int):void
getSoundEffect():powerpoint.SoundEffect
getAdvanceMode():int
setAdvanceMode(advanceMode:int):void
getAdvanceTime():float
setAdvanceTime(advanceTime:float):void
getAfterEffect():int
setAfterEffect(afterEffect:int):void
getAnimate():int
setAnimate(animate:int):void
getEntryEffect():int
setEntryEffect(entryEffect:int):void
getDimColor():powerpoint.ColorFormat
getPlaySettings():powerpoint.PlaySettings
}
export interface Application{
run(macroName:string,safeArrayOfParams:long):any
getName():string
close(saveChanges:int):void
getPath():string
help(helpFile:string,ContextID:int):void
isActive():int
getBuild():string
getWidth():float
getLeft():float
setLeft(left:float):void
setTop(top:float):void
getTop():float
setWidth(width:float):void
activate():void
getCommandBars():office.CommandBars
setActivePrinter(printer:string):void
getAutomationSecurity():int
setAutomationSecurity(automationSecurity:int):void
getActivePrinter():string
getActiveWindow():powerpoint.DocumentWindow
getWindows():powerpoint.DocumentWindows
getAddIns():powerpoint.AddIns
getAnswerWizard():office.AnswerWizard
getAssistant():office.Assistant
getAutoCorrect():powerpoint.AutoCorrect
setCaption(caption:string):void
getCaption():string
getCOMAddIns():office.COMAddIns
getOptions():powerpoint.Options
getOptions():office.AbstractOptions
getDialogs():any
getDisplayAlerts():int
setDisplayAlerts(displayAlerts:int):void
setDisplayDocumentInformationPanel(displayDocumentInformationPanel:boolean):void
isDisplayDocumentInformationPanel():boolean
getFeatureInstall():int
setFeatureInstall(featureInstall:int):void
getFileConverters():powerpoint.FileConverters
getFileDialog(type:int):office.FileDialog
getFileSearch():office.FileSearch
getHeight():float
setHeight(height:float):void
setShowStartupDialog(showStartupDialog:int):void
isVisible():boolean
setVisible(visible:int):void
getWindowState():int
setWindowState(windowState:int):void
setShowWindowsInTaskbar(showWindowsInTaskbar:int):void
getLanguageSettings():office.LanguageSettings
getDefaultWebOptions():powerpoint.DefaultWebOptions
Run(macro:string,args:long):int
quit():void
removeApplicationListener(l:powerpoint.event.ApplicationListener):string
addApplicationListener(l:powerpoint.event.ApplicationListener):string
getStartInfo():long
fireEvent(type:int):void
fireEvent(id:int,presentation:powerpoint.Presentation):void
setGlobalInfo(globalInfo:int,handle:int):void
setGlobalInfo(globalInfo:int):void
setNativeHandle(handle:int):void
getGlobalInfo():int
setStartInfo(startInfo:long):void
getMenu(hMenu:long,type:int,index:int):long
createBinderHandle(binder:any):void
createPreviewPicForOle():string
getDefaultFilePath():string
getAllMSBarNames():string[]
setDisplayGridLines(displayGridLines:int):void
getVisible():int
setEnableEvents(enableEvents:boolean):void
getPresentations():powerpoint.Presentations
isEnableEvents():boolean
getOperatingSystem():string
getVBE():vbide.VBE
getProductCode():string
HWND():int
getActivePresentation():powerpoint.Presentation
getSlideShowWindows():powerpoint.SlideShowWindows
getMsoDebugOptions():int
getShowWindowsInTaskbar():int
getDisplayGridLines():int
getNewPresentation():office.NewFile
launchSendToPPTDialog(SlideUrls:any):void
getSmartArtLayouts():office.SmartArtLayouts
getSmartArtQuickStyles():office.SmartArtQuickStyles
getSmartArtColors():office.SmartArtColors
getProtectedViewWindows():powerpoint.ProtectedViewWindows
getResampleMediaTasks():powerpoint.ResampleMediaTasks
startNewUndoEntry():void
getShowStartupDialog():int
getFileValidation():int
setFileValidation(fileValidation:int):void
isChartDataPointTrack():boolean
setChartDataPointTrack(chartDataPointTrack:boolean):void
launchPublishSlidesDialog(SlideLibraryUrl:string):void
getActiveEncryptionSession():int
getActiveProtectedViewWindow():powerpoint.ProtectedViewWindow
getFileFind():office.IFind
getPPFileDialog(Type:int):any
launchSpelling(pWindow:powerpoint.DocumentWindow):void
getMarker():any
getOptionFlag(option:int,persist:boolean):boolean
setOptionFlag(option:int,state:boolean,persist:boolean):void
setPerfMarker(Marker:int):void
getAssistance():office.IAssistance
isSandboxed():boolean
openThemeFile(themeFileName:string):powerpoint.Theme
getDisplayGuides():int
setDisplayGuides(displayGuides:int):void
}
export interface Application{
run(macroName:string,safeArrayOfParams:long):any
getName():string
close(saveChanges:int):void
getPath():string
help(helpFile:string,ContextID:int):void
isActive():int
getBuild():string
getWidth():float
getLeft():float
setLeft(left:float):void
setTop(top:float):void
getTop():float
setWidth(width:float):void
activate():void
getCommandBars():office.CommandBars
setActivePrinter(printer:string):void
getAutomationSecurity():int
setAutomationSecurity(automationSecurity:int):void
getActivePrinter():string
getActiveWindow():powerpoint.DocumentWindow
getWindows():powerpoint.DocumentWindows
getAddIns():powerpoint.AddIns
getAnswerWizard():office.AnswerWizard
getAssistant():office.Assistant
getAutoCorrect():powerpoint.AutoCorrect
setCaption(caption:string):void
getCaption():string
getCOMAddIns():office.COMAddIns
getOptions():powerpoint.Options
getOptions():office.AbstractOptions
getDialogs():any
getDisplayAlerts():int
setDisplayAlerts(displayAlerts:int):void
setDisplayDocumentInformationPanel(displayDocumentInformationPanel:boolean):void
isDisplayDocumentInformationPanel():boolean
getFeatureInstall():int
setFeatureInstall(featureInstall:int):void
getFileConverters():powerpoint.FileConverters
getFileDialog(type:int):office.FileDialog
getFileSearch():office.FileSearch
getHeight():float
setHeight(height:float):void
setShowStartupDialog(showStartupDialog:int):void
isVisible():boolean
setVisible(visible:int):void
getWindowState():int
setWindowState(windowState:int):void
setShowWindowsInTaskbar(showWindowsInTaskbar:int):void
getLanguageSettings():office.LanguageSettings
getDefaultWebOptions():powerpoint.DefaultWebOptions
Run(macro:string,args:long):int
quit():void
removeApplicationListener(l:powerpoint.event.ApplicationListener):string
addApplicationListener(l:powerpoint.event.ApplicationListener):string
getStartInfo():long
fireEvent(type:int):void
fireEvent(id:int,presentation:powerpoint.Presentation):void
setGlobalInfo(globalInfo:int,handle:int):void
setGlobalInfo(globalInfo:int):void
setNativeHandle(handle:int):void
getGlobalInfo():int
setStartInfo(startInfo:long):void
getMenu(hMenu:long,type:int,index:int):long
createBinderHandle(binder:any):void
createPreviewPicForOle():string
getDefaultFilePath():string
getAllMSBarNames():string[]
setDisplayGridLines(displayGridLines:int):void
getVisible():int
setEnableEvents(enableEvents:boolean):void
getPresentations():powerpoint.Presentations
isEnableEvents():boolean
getOperatingSystem():string
getVBE():vbide.VBE
getProductCode():string
HWND():int
getActivePresentation():powerpoint.Presentation
getSlideShowWindows():powerpoint.SlideShowWindows
getMsoDebugOptions():int
getShowWindowsInTaskbar():int
getDisplayGridLines():int
getNewPresentation():office.NewFile
launchSendToPPTDialog(SlideUrls:any):void
getSmartArtLayouts():office.SmartArtLayouts
getSmartArtQuickStyles():office.SmartArtQuickStyles
getSmartArtColors():office.SmartArtColors
getProtectedViewWindows():powerpoint.ProtectedViewWindows
getResampleMediaTasks():powerpoint.ResampleMediaTasks
startNewUndoEntry():void
getShowStartupDialog():int
getFileValidation():int
setFileValidation(fileValidation:int):void
isChartDataPointTrack():boolean
setChartDataPointTrack(chartDataPointTrack:boolean):void
launchPublishSlidesDialog(SlideLibraryUrl:string):void
getActiveEncryptionSession():int
getActiveProtectedViewWindow():powerpoint.ProtectedViewWindow
getFileFind():office.IFind
getPPFileDialog(Type:int):any
launchSpelling(pWindow:powerpoint.DocumentWindow):void
getMarker():any
getOptionFlag(option:int,persist:boolean):boolean
setOptionFlag(option:int,state:boolean,persist:boolean):void
setPerfMarker(Marker:int):void
getAssistance():office.IAssistance
isSandboxed():boolean
openThemeFile(themeFileName:string):powerpoint.Theme
getDisplayGuides():int
setDisplayGuides(displayGuides:int):void
}
export interface AutoCorrect{
setDisplayAutoCorrectOptions(displayAutoCorrectOptions:boolean):void
isDisplayAutoCorrectOptions():boolean
isDisplayAutoLayoutOptions():boolean
setDisplayAutoLayoutOptions(displayAutoLayoutOptions:boolean):void
}
export interface AutoCorrect{
setDisplayAutoCorrectOptions(displayAutoCorrectOptions:boolean):void
isDisplayAutoCorrectOptions():boolean
isDisplayAutoLayoutOptions():boolean
setDisplayAutoLayoutOptions(displayAutoLayoutOptions:boolean):void
}
export interface Axes{
item(type:int,axisGroup:int):powerpoint.Axis
getCount():int
}
export interface Axes{
item(type:int,axisGroup:int):powerpoint.Axis
getCount():int
}
export interface Axis{
delete():any
getType():int
getBorder():powerpoint.ChartBorder
setType(type:int):void
getWidth():double
getLeft():double
getTop():double
getHeight():double
select():any
getFormat():powerpoint.ChartFormat
getDisplayUnitLabel():powerpoint.DisplayUnitLabel
isAxisBetweenCategories():boolean
setAxisBetweenCategories(axisBetweenCategories:boolean):void
setBaseUnitIsAuto(baseUnitIsAuto:boolean):void
getDisplayUnitCustom():double
setDisplayUnitCustom(displayUnitCustom:double):void
isHasDisplayUnitLabel():boolean
setHasDisplayUnitLabel(hasDisplayUnitLabel:boolean):void
isHasMajorGridlines():boolean
setHasMajorGridlines(hasMajorGridlines:boolean):void
isHasMinorGridlines():boolean
setHasMinorGridlines(hasMinorGridlines:boolean):void
getMajorGridlines():powerpoint.Gridlines
isMajorUnitIsAuto():boolean
setMajorUnitIsAuto(majorUnitIsAuto:boolean):void
getMajorUnitScale():int
setMajorUnitScale(majorUnitScale:int):void
isMaximumScaleIsAuto():boolean
setMaximumScaleIsAuto(maximumScaleIsAuto:boolean):void
isMinimumScaleIsAuto():boolean
setMinimumScaleIsAuto(minimumScaleIsAuto:boolean):void
getMinorGridlines():powerpoint.Gridlines
isMinorUnitIsAuto():boolean
setMinorUnitIsAuto(minorUnitIsAuto:boolean):void
getMinorUnitScale():int
setMinorUnitScale(minorUnitScale:int):void
isReversePlotOrder():boolean
setReversePlotOrder(reversePlotOrder:boolean):void
getTickLabelPosition():int
setTickLabelPosition(tickLabelPosition:int):void
getTickLabelSpacing():int
setTickLabelSpacing(tickLabelSpacing:int):void
getTickMarkSpacing():int
setTickMarkSpacing(tickMarkSpacing:int):void
getAxisGroup():int
getAxisTitle():powerpoint.AxisTitle
getBaseUnit():int
setBaseUnit(baseUnit:int):void
isBaseUnitIsAuto():boolean
getCategoryType():int
setCategoryType(categoryType:int):void
getCrosses():int
setCrosses(crosses:int):void
getCrossesAt():double
setCrossesAt(crossesAt:double):void
getDisplayUnit():int
setDisplayUnit(displayUnit:int):void
getCategoryNames():any
setCategoryNames(categoryNames:any):void
isHasTitle():boolean
setHasTitle(hasTitle:boolean):void
getMajorTickMark():int
setMajorTickMark(majorTickMark:int):void
getMajorUnit():double
setMajorUnit(majorUnit:double):void
getMaximumScale():double
setMaximumScale(maximumScale:double):void
getMinimumScale():double
setMinimumScale(minimumScale:double):void
getTickLabels():powerpoint.TickLabels
getMinorTickMark():int
setMinorTickMark(minorTickMark:int):void
getMinorUnit():double
setMinorUnit(minorUnit:double):void
getScaleType():int
setScaleType(scaleType:int):void
isTickLabelSpacingIsAuto():boolean
setTickLabelSpacingIsAuto(tickLabelSpacingIsAuto:boolean):void
getLogBase():double
setLogBase(logBase:double):void
}
export interface Axis{
delete():any
getType():int
getBorder():powerpoint.ChartBorder
setType(type:int):void
getWidth():double
getLeft():double
getTop():double
getHeight():double
select():any
getFormat():powerpoint.ChartFormat
getDisplayUnitLabel():powerpoint.DisplayUnitLabel
isAxisBetweenCategories():boolean
setAxisBetweenCategories(axisBetweenCategories:boolean):void
setBaseUnitIsAuto(baseUnitIsAuto:boolean):void
getDisplayUnitCustom():double
setDisplayUnitCustom(displayUnitCustom:double):void
isHasDisplayUnitLabel():boolean
setHasDisplayUnitLabel(hasDisplayUnitLabel:boolean):void
isHasMajorGridlines():boolean
setHasMajorGridlines(hasMajorGridlines:boolean):void
isHasMinorGridlines():boolean
setHasMinorGridlines(hasMinorGridlines:boolean):void
getMajorGridlines():powerpoint.Gridlines
isMajorUnitIsAuto():boolean
setMajorUnitIsAuto(majorUnitIsAuto:boolean):void
getMajorUnitScale():int
setMajorUnitScale(majorUnitScale:int):void
isMaximumScaleIsAuto():boolean
setMaximumScaleIsAuto(maximumScaleIsAuto:boolean):void
isMinimumScaleIsAuto():boolean
setMinimumScaleIsAuto(minimumScaleIsAuto:boolean):void
getMinorGridlines():powerpoint.Gridlines
isMinorUnitIsAuto():boolean
setMinorUnitIsAuto(minorUnitIsAuto:boolean):void
getMinorUnitScale():int
setMinorUnitScale(minorUnitScale:int):void
isReversePlotOrder():boolean
setReversePlotOrder(reversePlotOrder:boolean):void
getTickLabelPosition():int
setTickLabelPosition(tickLabelPosition:int):void
getTickLabelSpacing():int
setTickLabelSpacing(tickLabelSpacing:int):void
getTickMarkSpacing():int
setTickMarkSpacing(tickMarkSpacing:int):void
getAxisGroup():int
getAxisTitle():powerpoint.AxisTitle
getBaseUnit():int
setBaseUnit(baseUnit:int):void
isBaseUnitIsAuto():boolean
getCategoryType():int
setCategoryType(categoryType:int):void
getCrosses():int
setCrosses(crosses:int):void
getCrossesAt():double
setCrossesAt(crossesAt:double):void
getDisplayUnit():int
setDisplayUnit(displayUnit:int):void
getCategoryNames():any
setCategoryNames(categoryNames:any):void
isHasTitle():boolean
setHasTitle(hasTitle:boolean):void
getMajorTickMark():int
setMajorTickMark(majorTickMark:int):void
getMajorUnit():double
setMajorUnit(majorUnit:double):void
getMaximumScale():double
setMaximumScale(maximumScale:double):void
getMinimumScale():double
setMinimumScale(minimumScale:double):void
getTickLabels():powerpoint.TickLabels
getMinorTickMark():int
setMinorTickMark(minorTickMark:int):void
getMinorUnit():double
setMinorUnit(minorUnit:double):void
getScaleType():int
setScaleType(scaleType:int):void
isTickLabelSpacingIsAuto():boolean
setTickLabelSpacingIsAuto(tickLabelSpacingIsAuto:boolean):void
getLogBase():double
setLogBase(logBase:double):void
}
export interface AxisTitle{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
getOrientation():any
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setCaption(caption:string):void
getCaption():string
getHeight():double
getText():string
setText(text:string):void
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
setVerticalAlignment(verticalAlignment:any):void
getVerticalAlignment():any
getFill():powerpoint.ChartFillFormat
setOrientation(orientation:any):void
getCharacters(start:any,length:any):powerpoint.ChartCharacters
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getHorizontalAlignment():any
setHorizontalAlignment(horizontalAlignment:any):void
setFormula(formula:string):void
getInterior():powerpoint.Interior
getAutoScaleFont():any
getFormula():string
setAutoScaleFont(autoScaleFont:any):void
getFormulaR1C1Local():string
setFormulaR1C1Local(formulaR1C1Local:string):void
isIncludeInLayout():boolean
setIncludeInLayout(includeInLayout:boolean):void
getFormulaLocal():string
getFormulaR1C1():string
setFormulaLocal(formulaLocal:string):void
setFormulaR1C1(formulaR1C1:string):void
}
export interface AxisTitle{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
getOrientation():any
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setCaption(caption:string):void
getCaption():string
getHeight():double
getText():string
setText(text:string):void
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
setVerticalAlignment(verticalAlignment:any):void
getVerticalAlignment():any
getFill():powerpoint.ChartFillFormat
setOrientation(orientation:any):void
getCharacters(start:any,length:any):powerpoint.ChartCharacters
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getHorizontalAlignment():any
setHorizontalAlignment(horizontalAlignment:any):void
setFormula(formula:string):void
getInterior():powerpoint.Interior
getAutoScaleFont():any
getFormula():string
setAutoScaleFont(autoScaleFont:any):void
getFormulaR1C1Local():string
setFormulaR1C1Local(formulaR1C1Local:string):void
isIncludeInLayout():boolean
setIncludeInLayout(includeInLayout:boolean):void
getFormulaLocal():string
getFormulaR1C1():string
setFormulaLocal(formulaLocal:string):void
setFormulaR1C1(formulaR1C1:string):void
}
export interface Borders{
item(borderType:int):powerpoint.LineFormat
getCount():int
}
export interface Borders{
item(borderType:int):powerpoint.LineFormat
getCount():int
}
export interface Broadcast{
start(serverURL:string):void
resume():void
getState():int
end():void
pause():void
getPresenterServiceUrl():string
getAttendeeUrl():string
attendeeUrl():string
addMeetingNotes(notesUrl:string,notesWacUrl:string):void
getCapabilities():int
getSessionID():string
isBroadcasting():boolean
}
export interface Broadcast{
start(serverURL:string):void
resume():void
getState():int
end():void
pause():void
getPresenterServiceUrl():string
getAttendeeUrl():string
attendeeUrl():string
addMeetingNotes(notesUrl:string,notesWacUrl:string):void
getCapabilities():int
getSessionID():string
isBroadcasting():boolean
}
export interface BulletFormat{
getType():int
getNumber():int
getFont():powerpoint.Font
setType(type:int):void
setVisible(visible:int):void
getVisible():int
getStyle():int
setStyle(style:int):void
picture(picture:string):void
getCharacter():int
setCharacter(character:int):void
getRelativeSize():float
setRelativeSize(relativeSize:float):void
getUseTextColor():int
setUseTextColor(useTextColor:int):void
getUseTextFont():int
setUseTextFont(useTextFont:int):void
getStartValue():int
setStartValue(startValue:int):void
}
export interface BulletFormat{
getType():int
getNumber():int
getFont():powerpoint.Font
setType(type:int):void
setVisible(visible:int):void
getVisible():int
getStyle():int
setStyle(style:int):void
picture(picture:string):void
getCharacter():int
setCharacter(character:int):void
getRelativeSize():float
setRelativeSize(relativeSize:float):void
getUseTextColor():int
setUseTextColor(useTextColor:int):void
getUseTextFont():int
setUseTextFont(useTextFont:int):void
getStartValue():int
setStartValue(startValue:int):void
}
export interface CalloutFormat{
getLength():float
getType():int
setBorder(border:int):void
getBorder():int
setType(type:int):void
setAngle(angle:int):void
getAngle():int
getDrop():float
setGap(gap:float):void
getGap():float
presetDrop(dropType:float):void
setAccent(accent:int):void
setAutoAttach(autoAttach:int):void
automaticLength():void
customDrop(drop:float):void
customLength(length:float):void
getDropType():int
getAccent():int
getAutoAttach():int
getAutoLength():int
}
export interface CalloutFormat{
getLength():float
getType():int
setBorder(border:int):void
getBorder():int
setType(type:int):void
setAngle(angle:int):void
getAngle():int
getDrop():float
setGap(gap:float):void
getGap():float
presetDrop(dropType:float):void
setAccent(accent:int):void
setAutoAttach(autoAttach:int):void
automaticLength():void
customDrop(drop:float):void
customLength(length:float):void
getDropType():int
getAccent():int
getAutoAttach():int
getAutoLength():int
}
export interface CanvasShapes{
range(index:any):powerpoint.ShapeRange
item(index:any):powerpoint.Shape
getBackground():powerpoint.Shape
getCount():int
addCallout(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addConnector(type:int,beginX:float,beginY:float,endX:float,endY:float):powerpoint.Shape
addPicture(fileName:string,linkToFile:int,saveWithDocument:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addPolyline(safeArrayOfPoints:any):powerpoint.Shape
addTextbox(orientation:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addTextEffect(presetTextEffect:int,text:string,fontName:string,fontSize:float,fontBold:int,fontItalic:int,left:float,top:float):powerpoint.Shape
buildFreeform(editingType:int,x1:float,y1:float):powerpoint.FreeformBuilder
selectAll():void
addCurve(safeArrayOfPoints:any):powerpoint.Shape
addLabel(orientation:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addLine(beginX:float,beginY:float,endX:float,endY:float):powerpoint.Shape
addShape(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
}
export interface CanvasShapes{
range(index:any):powerpoint.ShapeRange
item(index:any):powerpoint.Shape
getBackground():powerpoint.Shape
getCount():int
addCallout(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addConnector(type:int,beginX:float,beginY:float,endX:float,endY:float):powerpoint.Shape
addPicture(fileName:string,linkToFile:int,saveWithDocument:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addPolyline(safeArrayOfPoints:any):powerpoint.Shape
addTextbox(orientation:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addTextEffect(presetTextEffect:int,text:string,fontName:string,fontSize:float,fontBold:int,fontItalic:int,left:float,top:float):powerpoint.Shape
buildFreeform(editingType:int,x1:float,y1:float):powerpoint.FreeformBuilder
selectAll():void
addCurve(safeArrayOfPoints:any):powerpoint.Shape
addLabel(orientation:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addLine(beginX:float,beginY:float,endX:float,endY:float):powerpoint.Shape
addShape(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
}
export interface CategoryCollection{
item(index:any):powerpoint.ChartCategory
getCount():int
}
export interface CategoryCollection{
item(index:any):powerpoint.ChartCategory
getCount():int
}
export interface Cell{
split(numRows:int,numColumns:int):void
merge(mergeTo:powerpoint.Cell):void
getShape():powerpoint.Shape
isSelected():boolean
select():void
getBorders():powerpoint.Borders
}
export interface Cell{
split(numRows:int,numColumns:int):void
merge(mergeTo:powerpoint.Cell):void
getShape():powerpoint.Shape
isSelected():boolean
select():void
getBorders():powerpoint.Borders
}
export interface CellRange{
item(index:int):powerpoint.Cell
getCount():int
getBorders():powerpoint.Borders
}
export interface CellRange{
item(index:int):powerpoint.Cell
getCount():int
getBorders():powerpoint.Borders
}
export interface Chart{
getName():string
delete():void
setName(name:string):void
copy(before:any,after:any):void
getType():int
setType(type:int):void
setTitle(title:string):void
getTitle():string
refresh():void
paste(type:any):void
select(replace:any):void
getFormat():powerpoint.ChartFormat
setAlternativeText(alternativeText:string):void
getAlternativeText():string
getShapes():powerpoint.Shapes
autoFormat(gallery:int,format:any):void
getRotation():any
setRotation(rotation:any):void
setPerspective(perspective:int):void
getPerspective():int
axes(type:any,axisGroup:int):any
getFloor():powerpoint.Floor
getWalls():powerpoint.Walls
export(fileName:string,FilterName:any,Interactive:any):boolean
copyPicture(appearance:int,format:int,size:int):void
columnGroups(index:any):any
doughnutGroups(index:any):any
getChartElement(x:int,y:int,elementID:int,arg1:int,arg2:int):number[]
setSourceData(source:string,plotBy:any):void
isHasTitle():boolean
setHasTitle(hasTitle:boolean):void
seriesCollection(Index:any):any
getArea3DGroup():powerpoint.ChartGroup
getChartType():int
setAutoScaling(autoScaling:boolean):void
isAutoScaling():boolean
getBar3DGroup():powerpoint.ChartGroup
getBarShape():int
setBarShape(barShape:int):void
getChartArea():powerpoint.ChartArea
getChartTitle():powerpoint.ChartTitle
setChartStyle(chartStyle:any):void
getChartStyle():any
setChartType(chartType:int):void
getColumn3DGroup():powerpoint.ChartGroup
getCorners():powerpoint.Corners
getDataTable():powerpoint.DataTable
setDepthPercent(depthPercent:int):void
getDepthPercent():int
setElevation(elevation:int):void
getElevation():int
setGapDepth(gapDepth:int):void
getGapDepth():int
setHasAxis(index1:any,index2:any,value:any):void
setHasDataTable(hasDataTable:boolean):void
isHasDataTable():boolean
setHasLegend(hasLegend:boolean):void
isHasLegend():boolean
isHasPivotFields():boolean
setHeightPercent(heightPercent:int):void
getHeightPercent():int
getLegend():powerpoint.Legend
getLine3DGroup():powerpoint.ChartGroup
getPie3DGroup():powerpoint.ChartGroup
getPlotArea():powerpoint.PlotArea
setPlotBy(plotBy:int):void
getPlotBy():int
getSurfaceGroup():powerpoint.ChartGroup
applyCustomType(chartType:int,typeName:any):void
applyLayout(layout:int,chartType:any):void
applyDataLabels(type:int,legendKey:any,autoText:any,hasLeaderLines:any,showSeriesName:any,showCategoryName:any,showValue:any,showPercentage:any,showBubbleSize:any,separator:any):void
areaGroups(index:any):any
barGroups(index:any):any
chartWizard(source:any,gallery:any,format:any,plotBy:any,categoryLabels:any,seriesLabels:any,hasLegend:any,title:any,categoryTitle:any,valueTitle:any,extraTitle:any):void
setDisplayBlanksAs(displayBlanksAs:int):void
getDisplayBlanksAs():int
setHasPivotFields(hasPivotFields:boolean):void
setPlotVisibleOnly(plotVisibleOnly:boolean):void
isPlotVisibleOnly():boolean
setRightAngleAxes(rightAngleAxes:any):void
applyChartTemplate(fileName:string):void
setBackgroundPicture(fileName:string):void
clearToMatchStyle():void
saveChartTemplate(fileName:string):void
getDoughnutGroups(index:any):any
getRightAngleAxes():any
isShowLegendFieldButtons():boolean
isShowAxisFieldButtons():boolean
setShowAxisFieldButtons(showAxisFieldButtons:boolean):void
isShowValueFieldButtons():boolean
setShowValueFieldButtons(showValueFieldButtons:boolean):void
isShowAllFieldButtons():boolean
setShowAllFieldButtons(showAllFieldButtons:boolean):void
fullSeriesCollection(Index:any):any
getCategoryLabelLevel():int
setCategoryLabelLevel(categoryLabelLevel:int):void
getSeriesNameLevel():int
setSeriesNameLevel(seriesNameLevel:int):void
deleteHiddenContent():void
clearToMatchColorStyle():void
isShowDataLabelsOverMaximum():boolean
setShowDataLabelsOverMaximum(showDataLabelsOverMaximum:boolean):void
isShowReportFilterFieldButtons():boolean
setShowReportFilterFieldButtons(showReportFilterFieldButtons:boolean):void
setShowLegendFieldButtons(showLegendFieldButtons:boolean):void
_ApplyDataLabels(type:int,legendKey:any,autoText:any,hasLeaderLines:any):void
getBackWall():powerpoint.Walls
getChartData():powerpoint.ChartData
getChartGroups(index:any):any
SetDefaultChart(name:any):void
getSideWall():powerpoint.Walls
getAreaGroups(index:any):any
getLineGroups(index:any):any
getPieGroups(index:any):any
getRadarGroups(index:any):any
getXYGroups(index:any):any
getHasAxis(index1:any,index2:any):any
SetElement(Element:int):void
getSubtype():int
setSubtype(subtype:int):void
hasHiddenContent():boolean
getChartColor():any
setChartColor(chartColor:any):void
}
export interface Chart{
getName():string
delete():void
setName(name:string):void
copy(before:any,after:any):void
getType():int
setType(type:int):void
setTitle(title:string):void
getTitle():string
refresh():void
paste(type:any):void
select(replace:any):void
getFormat():powerpoint.ChartFormat
setAlternativeText(alternativeText:string):void
getAlternativeText():string
getShapes():powerpoint.Shapes
autoFormat(gallery:int,format:any):void
getRotation():any
setRotation(rotation:any):void
setPerspective(perspective:int):void
getPerspective():int
axes(type:any,axisGroup:int):any
getFloor():powerpoint.Floor
getWalls():powerpoint.Walls
export(fileName:string,FilterName:any,Interactive:any):boolean
copyPicture(appearance:int,format:int,size:int):void
columnGroups(index:any):any
doughnutGroups(index:any):any
getChartElement(x:int,y:int,elementID:int,arg1:int,arg2:int):number[]
setSourceData(source:string,plotBy:any):void
isHasTitle():boolean
setHasTitle(hasTitle:boolean):void
seriesCollection(Index:any):any
getArea3DGroup():powerpoint.ChartGroup
getChartType():int
setAutoScaling(autoScaling:boolean):void
isAutoScaling():boolean
getBar3DGroup():powerpoint.ChartGroup
getBarShape():int
setBarShape(barShape:int):void
getChartArea():powerpoint.ChartArea
getChartTitle():powerpoint.ChartTitle
setChartStyle(chartStyle:any):void
getChartStyle():any
setChartType(chartType:int):void
getColumn3DGroup():powerpoint.ChartGroup
getCorners():powerpoint.Corners
getDataTable():powerpoint.DataTable
setDepthPercent(depthPercent:int):void
getDepthPercent():int
setElevation(elevation:int):void
getElevation():int
setGapDepth(gapDepth:int):void
getGapDepth():int
setHasAxis(index1:any,index2:any,value:any):void
setHasDataTable(hasDataTable:boolean):void
isHasDataTable():boolean
setHasLegend(hasLegend:boolean):void
isHasLegend():boolean
isHasPivotFields():boolean
setHeightPercent(heightPercent:int):void
getHeightPercent():int
getLegend():powerpoint.Legend
getLine3DGroup():powerpoint.ChartGroup
getPie3DGroup():powerpoint.ChartGroup
getPlotArea():powerpoint.PlotArea
setPlotBy(plotBy:int):void
getPlotBy():int
getSurfaceGroup():powerpoint.ChartGroup
applyCustomType(chartType:int,typeName:any):void
applyLayout(layout:int,chartType:any):void
applyDataLabels(type:int,legendKey:any,autoText:any,hasLeaderLines:any,showSeriesName:any,showCategoryName:any,showValue:any,showPercentage:any,showBubbleSize:any,separator:any):void
areaGroups(index:any):any
barGroups(index:any):any
chartWizard(source:any,gallery:any,format:any,plotBy:any,categoryLabels:any,seriesLabels:any,hasLegend:any,title:any,categoryTitle:any,valueTitle:any,extraTitle:any):void
setDisplayBlanksAs(displayBlanksAs:int):void
getDisplayBlanksAs():int
setHasPivotFields(hasPivotFields:boolean):void
setPlotVisibleOnly(plotVisibleOnly:boolean):void
isPlotVisibleOnly():boolean
setRightAngleAxes(rightAngleAxes:any):void
applyChartTemplate(fileName:string):void
setBackgroundPicture(fileName:string):void
clearToMatchStyle():void
saveChartTemplate(fileName:string):void
getDoughnutGroups(index:any):any
getRightAngleAxes():any
isShowLegendFieldButtons():boolean
isShowAxisFieldButtons():boolean
setShowAxisFieldButtons(showAxisFieldButtons:boolean):void
isShowValueFieldButtons():boolean
setShowValueFieldButtons(showValueFieldButtons:boolean):void
isShowAllFieldButtons():boolean
setShowAllFieldButtons(showAllFieldButtons:boolean):void
fullSeriesCollection(Index:any):any
getCategoryLabelLevel():int
setCategoryLabelLevel(categoryLabelLevel:int):void
getSeriesNameLevel():int
setSeriesNameLevel(seriesNameLevel:int):void
deleteHiddenContent():void
clearToMatchColorStyle():void
isShowDataLabelsOverMaximum():boolean
setShowDataLabelsOverMaximum(showDataLabelsOverMaximum:boolean):void
isShowReportFilterFieldButtons():boolean
setShowReportFilterFieldButtons(showReportFilterFieldButtons:boolean):void
setShowLegendFieldButtons(showLegendFieldButtons:boolean):void
_ApplyDataLabels(type:int,legendKey:any,autoText:any,hasLeaderLines:any):void
getBackWall():powerpoint.Walls
getChartData():powerpoint.ChartData
getChartGroups(index:any):any
SetDefaultChart(name:any):void
getSideWall():powerpoint.Walls
getAreaGroups(index:any):any
getLineGroups(index:any):any
getPieGroups(index:any):any
getRadarGroups(index:any):any
getXYGroups(index:any):any
getHasAxis(index1:any,index2:any):any
SetElement(Element:int):void
getSubtype():int
setSubtype(subtype:int):void
hasHiddenContent():boolean
getChartColor():any
setChartColor(chartColor:any):void
}
export interface ChartArea{
clear():any
getName():string
copy():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setWidth(width:double):void
getHeight():double
setHeight(height:double):void
select():any
isShadow():boolean
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
clearContents():any
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
}
export interface ChartArea{
clear():any
getName():string
copy():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setWidth(width:double):void
getHeight():double
setHeight(height:double):void
select():any
isShadow():boolean
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
clearContents():any
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
}
export interface ChartBorder{
setColor(color:any):void
getColor():any
setColorIndex(colorIndex:any):void
getColorIndex():any
setLineStyle(lineStyle:any):void
getLineStyle():any
getWeight():any
setWeight(weight:any):void
}
export interface ChartBorder{
setColor(color:any):void
getColor():any
setColorIndex(colorIndex:any):void
getColorIndex():any
setLineStyle(lineStyle:any):void
getLineStyle():any
getWeight():any
setWeight(weight:any):void
}
export interface ChartCategory{
getName():string
isFiltered():boolean
setIsFiltered(pfIsFiltered:boolean):void
}
export interface ChartCategory{
getName():string
isFiltered():boolean
setIsFiltered(pfIsFiltered:boolean):void
}
export interface ChartCharacters{
delete():any
insert(string:string):any
getFont():powerpoint.ChartFont
getCount():int
setCaption(caption:string):void
getCaption():string
getText():string
setText(text:string):void
getPhoneticCharacters():string
setPhoneticCharacters(phoneticCharacters:string):void
}
export interface ChartCharacters{
delete():any
insert(string:string):any
getFont():powerpoint.ChartFont
getCount():int
setCaption(caption:string):void
getCaption():string
getText():string
setText(text:string):void
getPhoneticCharacters():string
setPhoneticCharacters(phoneticCharacters:string):void
}
export interface ChartColorFormat{
getType():int
getRGB():int
setSchemeColor(schemeColor:int):void
getSchemeColor():int
}
export interface ChartColorFormat{
getType():int
getRGB():int
setSchemeColor(schemeColor:int):void
getSchemeColor():int
}
export interface ChartData{
activate():void
breakLink():void
getWorkbook():any
activateChartDataWindow():void
isLinked():boolean
}
export interface ChartData{
activate():void
breakLink():void
getWorkbook():any
activateChartDataWindow():void
isLinked():boolean
}
export interface ChartFillFormat{
getType():int
setVisible(visible:int):void
solid():void
getBackColor():powerpoint.ChartColorFormat
getForeColor():powerpoint.ChartColorFormat
getGradientStyle():int
getPattern():int
patterned():int
presetGradient(style:int,variant:int,presetGradientType:int):void
getPresetTexture():int
presetTextured():int
getTextureName():string
getTextureType():int
userPicture(pictureFile:any,pictureFormat:any,pictureStackUnit:any,picturePlacement:any):void
userTextured(textureFile:string):void
getVisible():int
oneColorGradient(style:int,variant:int,degree:float):void
twoColorGradient(style:int,variant:int):void
getGradientColorType():int
getGradientDegree():float
getPresetGradientType():int
getGradientVariant():int
}
export interface ChartFillFormat{
getType():int
setVisible(visible:int):void
solid():void
getBackColor():powerpoint.ChartColorFormat
getForeColor():powerpoint.ChartColorFormat
getGradientStyle():int
getPattern():int
patterned():int
presetGradient(style:int,variant:int,presetGradientType:int):void
getPresetTexture():int
presetTextured():int
getTextureName():string
getTextureType():int
userPicture(pictureFile:any,pictureFormat:any,pictureStackUnit:any,picturePlacement:any):void
userTextured(textureFile:string):void
getVisible():int
oneColorGradient(style:int,variant:int,degree:float):void
twoColorGradient(style:int,variant:int):void
getGradientColorType():int
getGradientDegree():float
getPresetGradientType():int
getGradientVariant():int
}
export interface ChartFont{
getName():any
setName(name:any):void
getSize():any
setSize(size:any):void
setColor(color:any):void
setBackground(background:any):void
getBackground():any
getColor():any
setColorIndex(colorIndex:any):void
getColorIndex():any
setShadow(shadow:any):void
setBold(bold:any):void
getBold():any
setFontStyle(fontStyle:any):void
setSubscript(subscript:any):void
setSuperscript(superscript:any):void
setItalic(italic:any):void
getItalic():any
getShadow():any
getSubscript():any
getSuperscript():any
setUnderline(underline:any):void
getUnderline():any
getFontStyle():any
setOutlineFont(outlineFont:any):void
getOutlineFont():any
setStrikethrough(strikethrough:any):void
getStrikethrough():any
}
export interface ChartFont{
getName():any
setName(name:any):void
getSize():any
setSize(size:any):void
setColor(color:any):void
setBackground(background:any):void
getBackground():any
getColor():any
setColorIndex(colorIndex:any):void
getColorIndex():any
setShadow(shadow:any):void
setBold(bold:any):void
getBold():any
setFontStyle(fontStyle:any):void
setSubscript(subscript:any):void
setSuperscript(superscript:any):void
setItalic(italic:any):void
getItalic():any
getShadow():any
getSubscript():any
getSuperscript():any
setUnderline(underline:any):void
getUnderline():any
getFontStyle():any
setOutlineFont(outlineFont:any):void
getOutlineFont():any
setStrikethrough(strikethrough:any):void
getStrikethrough():any
}
export interface ChartFormat{
getFill():powerpoint.FillFormat
getLine():powerpoint.LineFormat
getShadow():powerpoint.ShadowFormat
getPictureFormat():powerpoint.PictureFormat
getAdjustments():powerpoint.Adjustments
getAutoShapeType():int
getThreeD():powerpoint.ThreeDFormat
setAutoShapeType(autoShapeType:int):void
getTextFrame2():powerpoint.TextFrame2
getGlow():office.GlowFormat
getSoftEdge():office.SoftEdgeFormat
}
export interface ChartFormat{
getFill():powerpoint.FillFormat
getLine():powerpoint.LineFormat
getShadow():powerpoint.ShadowFormat
getPictureFormat():powerpoint.PictureFormat
getAdjustments():powerpoint.Adjustments
getAutoShapeType():int
getThreeD():powerpoint.ThreeDFormat
setAutoShapeType(autoShapeType:int):void
getTextFrame2():powerpoint.TextFrame2
getGlow():office.GlowFormat
getSoftEdge():office.SoftEdgeFormat
}
export interface ChartGroup{
getType():int
getIndex():int
setType(type:int):void
getDropLines():powerpoint.DropLines
setAxisGroup(axisGroup:int):void
getDownBars():powerpoint.DownBars
getHiLoLines():powerpoint.HiLoLines
getSeriesLines():powerpoint.SeriesLines
getUpBars():powerpoint.UpBars
getBubbleScale():int
setBubbleScale(bubbleScale:int):void
getGapWidth():int
setGapWidth(gapWidth:int):void
isHas3DShading():boolean
setHas3DShading(has3dShading:boolean):void
isHasDropLines():boolean
setHasDropLines(hasDropLines:boolean):void
isHasHiLoLines():boolean
setHasHiLoLines(hasHiLoLines:boolean):void
isHasSeriesLines():boolean
isHasUpDownBars():boolean
setHasUpDownBars(hasUpDownBars:boolean):void
getOverlap():int
setOverlap(overlap:int):void
getSplitType():int
setSplitType(splitType:int):void
getSplitValue():any
setSplitValue(splitValue:any):void
getAxisGroup():int
seriesCollection(index:any):any
getRadarAxisLabels():powerpoint.TickLabels
getDoughnutHoleSize():int
setDoughnutHoleSize(doughnutHoleSize:int):void
getFirstSliceAngle():int
setFirstSliceAngle(firstSliceAngle:int):void
isHasRadarAxisLabels():boolean
setHasRadarAxisLabels(hasRadarAxisLabels:boolean):void
setHasSeriesLines(hasSeriesLines:boolean):void
getSecondPlotSize():int
setSecondPlotSize(secondPlotSize:int):void
isShowNegativeBubbles():boolean
setShowNegativeBubbles(showNegativeBubbles:boolean):void
getSizeRepresents():int
setSizeRepresents(sizeRepresents:int):void
isVaryByCategories():boolean
setVaryByCategories(varyByCategories:boolean):void
categoryCollection(index:any):any
fullCategoryCollection(index:any):any
getSubtype():int
setSubtype(subtype:int):void
}
export interface ChartGroup{
getType():int
getIndex():int
setType(type:int):void
getDropLines():powerpoint.DropLines
setAxisGroup(axisGroup:int):void
getDownBars():powerpoint.DownBars
getHiLoLines():powerpoint.HiLoLines
getSeriesLines():powerpoint.SeriesLines
getUpBars():powerpoint.UpBars
getBubbleScale():int
setBubbleScale(bubbleScale:int):void
getGapWidth():int
setGapWidth(gapWidth:int):void
isHas3DShading():boolean
setHas3DShading(has3dShading:boolean):void
isHasDropLines():boolean
setHasDropLines(hasDropLines:boolean):void
isHasHiLoLines():boolean
setHasHiLoLines(hasHiLoLines:boolean):void
isHasSeriesLines():boolean
isHasUpDownBars():boolean
setHasUpDownBars(hasUpDownBars:boolean):void
getOverlap():int
setOverlap(overlap:int):void
getSplitType():int
setSplitType(splitType:int):void
getSplitValue():any
setSplitValue(splitValue:any):void
getAxisGroup():int
seriesCollection(index:any):any
getRadarAxisLabels():powerpoint.TickLabels
getDoughnutHoleSize():int
setDoughnutHoleSize(doughnutHoleSize:int):void
getFirstSliceAngle():int
setFirstSliceAngle(firstSliceAngle:int):void
isHasRadarAxisLabels():boolean
setHasRadarAxisLabels(hasRadarAxisLabels:boolean):void
setHasSeriesLines(hasSeriesLines:boolean):void
getSecondPlotSize():int
setSecondPlotSize(secondPlotSize:int):void
isShowNegativeBubbles():boolean
setShowNegativeBubbles(showNegativeBubbles:boolean):void
getSizeRepresents():int
setSizeRepresents(sizeRepresents:int):void
isVaryByCategories():boolean
setVaryByCategories(varyByCategories:boolean):void
categoryCollection(index:any):any
fullCategoryCollection(index:any):any
getSubtype():int
setSubtype(subtype:int):void
}
export interface ChartGroups{
item(index:any):powerpoint.ChartGroup
getCount():int
}
export interface ChartGroups{
item(index:any):powerpoint.ChartGroup
getCount():int
}
export interface ChartTitle{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
getOrientation():any
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setCaption(caption:string):void
getCaption():string
getHeight():double
getText():string
setText(text:string):void
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
setVerticalAlignment(verticalAlignment:any):void
getVerticalAlignment():any
getFill():powerpoint.ChartFillFormat
setOrientation(orientation:any):void
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getHorizontalAlignment():any
setHorizontalAlignment(alignment:any):void
setFormula(formula:string):void
characters(start:any,length:any):powerpoint.ChartCharacters
getAutoScaleFont():any
getFormula():string
setAutoScaleFont(autoScaleFont:any):void
getFormulaR1C1Local():string
setFormulaR1C1Local(formulaR1C1Local:string):void
isIncludeInLayout():boolean
setIncludeInLayout(includeInLayout:boolean):void
getFormulaLocal():string
getFormulaR1C1():string
setFormulaLocal(formulaLocal:string):void
setFormulaR1C1(formulaR1C1:string):void
}
export interface ChartTitle{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
getOrientation():any
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setCaption(caption:string):void
getCaption():string
getHeight():double
getText():string
setText(text:string):void
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
setVerticalAlignment(verticalAlignment:any):void
getVerticalAlignment():any
getFill():powerpoint.ChartFillFormat
setOrientation(orientation:any):void
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getHorizontalAlignment():any
setHorizontalAlignment(alignment:any):void
setFormula(formula:string):void
characters(start:any,length:any):powerpoint.ChartCharacters
getAutoScaleFont():any
getFormula():string
setAutoScaleFont(autoScaleFont:any):void
getFormulaR1C1Local():string
setFormulaR1C1Local(formulaR1C1Local:string):void
isIncludeInLayout():boolean
setIncludeInLayout(includeInLayout:boolean):void
getFormulaLocal():string
getFormulaR1C1():string
setFormulaLocal(formulaLocal:string):void
setFormulaR1C1(formulaR1C1:string):void
}
export interface Coauthoring{
endReview():void
isFavorServerEditsDuringMerge():boolean
setFavorServerEditsDuringMerge(favorServerEditsDuringMerge:boolean):void
isMergeMode():boolean
isPendingUpdates():boolean
getCoauthorCount():int
}
export interface Coauthoring{
endReview():void
isFavorServerEditsDuringMerge():boolean
setFavorServerEditsDuringMerge(favorServerEditsDuringMerge:boolean):void
isMergeMode():boolean
isPendingUpdates():boolean
getCoauthorCount():int
}
export interface ColorEffect{
getBy():powerpoint.ColorFormat
getFrom():powerpoint.ColorFormat
getTo():powerpoint.ColorFormat
}
export interface ColorEffect{
getBy():powerpoint.ColorFormat
getFrom():powerpoint.ColorFormat
getTo():powerpoint.ColorFormat
}
export interface ColorFormat{
getType():int
getRGB():int
setRGB(RGB:int):void
getTintAndShade():float
setTintAndShade(tintAndShade:float):void
getBrightness():float
setBrightness(brightness:float):void
getObjectThemeColor():int
setObjectThemeColor(objectThemeColor:int):void
setSchemeColor(schemeColor:int):void
getSchemeColor():int
}
export interface ColorFormat{
getType():int
getRGB():int
setRGB(RGB:int):void
getTintAndShade():float
setTintAndShade(tintAndShade:float):void
getBrightness():float
setBrightness(brightness:float):void
getObjectThemeColor():int
setObjectThemeColor(objectThemeColor:int):void
setSchemeColor(schemeColor:int):void
getSchemeColor():int
}
export interface ColorScheme{
delete():void
getCount():int
getColors(SchemeColor:int):powerpoint.RGBColor
}
export interface ColorScheme{
delete():void
getCount():int
getColors(SchemeColor:int):powerpoint.RGBColor
}
export interface ColorSchemes{
add(Scheme:powerpoint.ColorScheme):powerpoint.ColorScheme
item(Index:int):powerpoint.ColorScheme
getCount():int
}
export interface ColorSchemes{
add(Scheme:powerpoint.ColorScheme):powerpoint.ColorScheme
item(Index:int):powerpoint.ColorScheme
getCount():int
}
export interface Column{
delete():void
getWidth():float
setWidth(Width:float):void
select():void
getCells():powerpoint.CellRange
}
export interface Column{
delete():void
getWidth():float
setWidth(Width:float):void
select():void
getCells():powerpoint.CellRange
}
export interface Columns{
add(beforeColumn:int):powerpoint.Column
item(Index:int):powerpoint.Column
getCount():int
}
export interface Columns{
add(beforeColumn:int):powerpoint.Column
item(Index:int):powerpoint.Column
getCount():int
}
export interface CommandEffect{
getType():int
setType(type:int):void
getBookmark():string
getCommand():string
setBookmark(bookmark:string):void
setCommand(command:string):void
}
export interface CommandEffect{
getType():int
setType(type:int):void
getBookmark():string
getCommand():string
setBookmark(bookmark:string):void
setCommand(command:string):void
}
export interface Comment{
delete():void
getLeft():float
getTop():float
getText():string
getAuthor():string
getAuthorInitials():string
getDateTime():any
getAuthorIndex():int
getProviderID():string
getUserID():string
getTimeZoneBias():int
getReplies():powerpoint.Comments
isCollapsed():boolean
}
export interface Comment{
delete():void
getLeft():float
getTop():float
getText():string
getAuthor():string
getAuthorInitials():string
getDateTime():any
getAuthorIndex():int
getProviderID():string
getUserID():string
getTimeZoneBias():int
getReplies():powerpoint.Comments
isCollapsed():boolean
}
export interface Comments{
add(left:float,top:float,author:string,authorInitials:string,text:string):powerpoint.Comment
item(index:int):powerpoint.Comment
getCount():int
add2(left:float,top:float,author:string,authorInitials:string,text:string,providerID:string,userID:string):powerpoint.Comment
}
export interface Comments{
add(left:float,top:float,author:string,authorInitials:string,text:string):powerpoint.Comment
item(index:int):powerpoint.Comment
getCount():int
add2(left:float,top:float,author:string,authorInitials:string,text:string,providerID:string,userID:string):powerpoint.Comment
}
export interface ConnectorFormat{
getType():int
setType(type:int):void
beginConnect(connectedShape:powerpoint.Shape,ConnectionSite:int):void
beginDisconnect():void
endConnect(connectedShape:powerpoint.Shape,ConnectionSite:int):void
endDisconnect():void
getBeginConnectedShape():powerpoint.Shape
getBeginConnectionSite():int
getEndConnectedShape():powerpoint.Shape
getEndConnectionSite():int
getBeginConnected():int
getEndConnected():int
}
export interface ConnectorFormat{
getType():int
setType(type:int):void
beginConnect(connectedShape:powerpoint.Shape,ConnectionSite:int):void
beginDisconnect():void
endConnect(connectedShape:powerpoint.Shape,ConnectionSite:int):void
endDisconnect():void
getBeginConnectedShape():powerpoint.Shape
getBeginConnectionSite():int
getEndConnectedShape():powerpoint.Shape
getEndConnectionSite():int
getBeginConnected():int
getEndConnected():int
}
export interface Corners{
getName():string
select():any
}
export interface Corners{
getName():string
select():any
}
export interface CustomerData{
add():office.CustomXMLPart
delete(id:string):void
item(id:string):office.CustomXMLPart
getCount():int
}
export interface CustomerData{
add():office.CustomXMLPart
delete(id:string):void
item(id:string):office.CustomXMLPart
getCount():int
}
export interface CustomLayout{
getName():string
delete():void
setName(name:string):void
copy():void
duplicate():powerpoint.CustomLayout
getBackground():powerpoint.ShapeRange
getIndex():int
getWidth():float
getHeight():float
cut():void
select():void
getShapes():powerpoint.Shapes
getHyperlinks():powerpoint.Hyperlinks
getFollowMasterBackground():int
setFollowMasterBackground(followMasterBackground:int):void
getDisplayMasterShapes():int
setDisplayMasterShapes(displayMasterShapes:int):void
getHeadersFooters():powerpoint.HeadersFooters
getSlideShowTransition():powerpoint.SlideShowTransition
getThemeColorScheme():office.ThemeColorScheme
moveTo(toPos:int):void
getCustomerData():powerpoint.CustomerData
getDesign():powerpoint.Design
getTimeLine():powerpoint.TimeLine
getMatchingName():string
setMatchingName(matchingName:string):void
getPreserved():int
setPreserved(preserved:int):void
getGuides():powerpoint.Guides
}
export interface CustomLayout{
getName():string
delete():void
setName(name:string):void
copy():void
duplicate():powerpoint.CustomLayout
getBackground():powerpoint.ShapeRange
getIndex():int
getWidth():float
getHeight():float
cut():void
select():void
getShapes():powerpoint.Shapes
getHyperlinks():powerpoint.Hyperlinks
getFollowMasterBackground():int
setFollowMasterBackground(followMasterBackground:int):void
getDisplayMasterShapes():int
setDisplayMasterShapes(displayMasterShapes:int):void
getHeadersFooters():powerpoint.HeadersFooters
getSlideShowTransition():powerpoint.SlideShowTransition
getThemeColorScheme():office.ThemeColorScheme
moveTo(toPos:int):void
getCustomerData():powerpoint.CustomerData
getDesign():powerpoint.Design
getTimeLine():powerpoint.TimeLine
getMatchingName():string
setMatchingName(matchingName:string):void
getPreserved():int
setPreserved(preserved:int):void
getGuides():powerpoint.Guides
}
export interface CustomLayouts{
add(index:int):powerpoint.CustomLayout
item(index:any):powerpoint.CustomLayout
getCount():int
paste(index:int):powerpoint.CustomLayout
}
export interface CustomLayouts{
add(index:int):powerpoint.CustomLayout
item(index:any):powerpoint.CustomLayout
getCount():int
paste(index:int):powerpoint.CustomLayout
}
export interface DataLabel{
getName():string
delete():any
getType():any
getSeparator():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
setType(type:any):void
getOrientation():any
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setWidth(width:double):void
setCaption(caption:string):void
getCaption():string
getHeight():double
setHeight(height:double):void
getText():string
setText(text:string):void
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setSeparator(separator:any):void
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
setVerticalAlignment(verticalAlignment:any):void
getVerticalAlignment():any
getFill():powerpoint.ChartFillFormat
setOrientation(orientation:any):void
getNumberFormat():string
setNumberFormat(numberFormat:string):void
getCharacters(start:any,length:any):powerpoint.ChartCharacters
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getHorizontalAlignment():any
setHorizontalAlignment(horizontalAlignment:any):void
setAutoText(autoText:boolean):void
setFormula(formula:string):void
Select():void
getInterior():powerpoint.Interior
isShowValue():boolean
isAutoText():boolean
isShowBubbleSize():boolean
setShowLegendKey(showLegendKey:boolean):void
isShowLegendKey():boolean
isShowPercentage():boolean
isShowSeriesName():boolean
getAutoScaleFont():any
getFormula():string
setAutoScaleFont(autoScaleFont:any):void
setShowValue(showValue:boolean):void
setNumberFormatLocal(numberFormatLocal:any):void
getNumberFormatLocal():any
setShowSeriesName(showSeriesName:boolean):void
setShowCategoryName(showCategoryName:boolean):void
setShowPercentage(showPercentage:boolean):void
setShowBubbleSize(showBubbleSize:boolean):void
setNumberFormatLinked(numberFormatLinked:boolean):void
isNumberFormatLinked():boolean
isShowCategoryName():boolean
getFormulaR1C1Local():string
setFormulaR1C1Local(formulaR1C1Local:string):void
getFormulaLocal():string
getFormulaR1C1():string
setFormulaLocal(formulaLocal:string):void
setFormulaR1C1(formulaR1C1:string):void
isShowRange():boolean
setShowRange(showRange:boolean):void
}
export interface DataLabel{
getName():string
delete():any
getType():any
getSeparator():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
setType(type:any):void
getOrientation():any
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setWidth(width:double):void
setCaption(caption:string):void
getCaption():string
getHeight():double
setHeight(height:double):void
getText():string
setText(text:string):void
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setSeparator(separator:any):void
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
setVerticalAlignment(verticalAlignment:any):void
getVerticalAlignment():any
getFill():powerpoint.ChartFillFormat
setOrientation(orientation:any):void
getNumberFormat():string
setNumberFormat(numberFormat:string):void
getCharacters(start:any,length:any):powerpoint.ChartCharacters
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getHorizontalAlignment():any
setHorizontalAlignment(horizontalAlignment:any):void
setAutoText(autoText:boolean):void
setFormula(formula:string):void
Select():void
getInterior():powerpoint.Interior
isShowValue():boolean
isAutoText():boolean
isShowBubbleSize():boolean
setShowLegendKey(showLegendKey:boolean):void
isShowLegendKey():boolean
isShowPercentage():boolean
isShowSeriesName():boolean
getAutoScaleFont():any
getFormula():string
setAutoScaleFont(autoScaleFont:any):void
setShowValue(showValue:boolean):void
setNumberFormatLocal(numberFormatLocal:any):void
getNumberFormatLocal():any
setShowSeriesName(showSeriesName:boolean):void
setShowCategoryName(showCategoryName:boolean):void
setShowPercentage(showPercentage:boolean):void
setShowBubbleSize(showBubbleSize:boolean):void
setNumberFormatLinked(numberFormatLinked:boolean):void
isNumberFormatLinked():boolean
isShowCategoryName():boolean
getFormulaR1C1Local():string
setFormulaR1C1Local(formulaR1C1Local:string):void
getFormulaLocal():string
getFormulaR1C1():string
setFormulaLocal(formulaLocal:string):void
setFormulaR1C1(formulaR1C1:string):void
isShowRange():boolean
setShowRange(showRange:boolean):void
}
export interface DataLabels{
getName():string
delete():any
getType():any
getSeparator():any
getBorder():powerpoint.ChartBorder
item(index:any):powerpoint.DataLabel
getFont():powerpoint.ChartFont
setType(type:any):void
getOrientation():any
getCount():int
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setSeparator(separator:any):void
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
setVerticalAlignment(verticalAlignment:any):void
getVerticalAlignment():any
getFill():powerpoint.ChartFillFormat
setOrientation(orientation:any):void
getNumberFormat():string
setNumberFormat(numberFormat:string):void
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getHorizontalAlignment():any
setHorizontalAlignment(horizontalAlignment:any):void
setAutoText(autoText:boolean):void
getInterior():powerpoint.Interior
isShowValue():boolean
isAutoText():boolean
isShowBubbleSize():boolean
setShowLegendKey(showLegendKey:boolean):void
isShowLegendKey():boolean
isShowPercentage():boolean
isShowSeriesName():boolean
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
setShowValue(showValue:boolean):void
setNumberFormatLocal(numberFormatLocal:any):void
getNumberFormatLocal():any
setShowSeriesName(showSeriesName:boolean):void
setShowCategoryName(showCategoryName:boolean):void
setShowPercentage(showPercentage:boolean):void
setShowBubbleSize(showBubbleSize:boolean):void
setNumberFormatLinked(numberFormatLinked:boolean):void
isNumberFormatLinked():boolean
isShowCategoryName():boolean
isShowRange():boolean
setShowRange(showRange:boolean):void
propagate(index:any):void
setPropagate(index:any):void
get_Default():powerpoint.DataLabel
set_Default(index:any):void
}
export interface DataLabels{
getName():string
delete():any
getType():any
getSeparator():any
getBorder():powerpoint.ChartBorder
item(index:any):powerpoint.DataLabel
getFont():powerpoint.ChartFont
setType(type:any):void
getOrientation():any
getCount():int
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setSeparator(separator:any):void
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
setVerticalAlignment(verticalAlignment:any):void
getVerticalAlignment():any
getFill():powerpoint.ChartFillFormat
setOrientation(orientation:any):void
getNumberFormat():string
setNumberFormat(numberFormat:string):void
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getHorizontalAlignment():any
setHorizontalAlignment(horizontalAlignment:any):void
setAutoText(autoText:boolean):void
getInterior():powerpoint.Interior
isShowValue():boolean
isAutoText():boolean
isShowBubbleSize():boolean
setShowLegendKey(showLegendKey:boolean):void
isShowLegendKey():boolean
isShowPercentage():boolean
isShowSeriesName():boolean
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
setShowValue(showValue:boolean):void
setNumberFormatLocal(numberFormatLocal:any):void
getNumberFormatLocal():any
setShowSeriesName(showSeriesName:boolean):void
setShowCategoryName(showCategoryName:boolean):void
setShowPercentage(showPercentage:boolean):void
setShowBubbleSize(showBubbleSize:boolean):void
setNumberFormatLinked(numberFormatLinked:boolean):void
isNumberFormatLinked():boolean
isShowCategoryName():boolean
isShowRange():boolean
setShowRange(showRange:boolean):void
propagate(index:any):void
setPropagate(index:any):void
get_Default():powerpoint.DataLabel
set_Default(index:any):void
}
export interface DataTable{
delete():void
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
select():void
getFormat():powerpoint.ChartFormat
setShowLegendKey(showLegendKey:boolean):void
isShowLegendKey():boolean
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
setHasBorderHorizontal(hasBorderHorizontal:boolean):void
setHasBorderVertical(hasBorderVertical:boolean):void
setHasBorderOutline(hasBorderOutline:boolean):void
isHasBorderHorizontal():boolean
isHasBorderOutline():boolean
isHasBorderVertical():boolean
}
export interface DataTable{
delete():void
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
select():void
getFormat():powerpoint.ChartFormat
setShowLegendKey(showLegendKey:boolean):void
isShowLegendKey():boolean
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
setHasBorderHorizontal(hasBorderHorizontal:boolean):void
setHasBorderVertical(hasBorderVertical:boolean):void
setHasBorderOutline(hasBorderOutline:boolean):void
isHasBorderHorizontal():boolean
isHasBorderOutline():boolean
isHasBorderVertical():boolean
}
export interface DefaultWebOptions{
getEncoding():int
setOrganizeInFolder(organizeInFolder:int):void
setUpdateLinksOnSave(updateLinksOnSave:int):void
setUseLongFileNames(useLongFileNames:int):void
getFolderSuffix():string
setAllowPNG(allowPNG:int):void
setEncoding(encoding:int):void
setAlwaysSaveInDefaultEncoding(alwaysSaveInDefaultEncoding:int):void
setCheckIfOfficeIsHTMLEditor(checkIfOfficeIsHTMLEditor:int):void
setSaveNewWebPagesAsWebArchives(saveNewWebPagesAsWebArchives:int):void
setRelyOnVML(relyOnVML:int):void
getScreenSize():int
setScreenSize(screenSize:int):void
setTargetBrowser(targetBrowser:int):void
getTargetBrowser():int
getFonts():office.WebPageFonts
getAlwaysSaveInDefaultEncoding():int
getCheckIfOfficeIsHTMLEditor():int
getSaveNewWebPagesAsWebArchives():int
getIncludeNavigation():int
setIncludeNavigation(includeNavigation:int):void
getOrganizeInFolder():int
getResizeGraphics():int
setResizeGraphics(resizeGraphics:int):void
getShowSlideAnimation():int
setShowSlideAnimation(showSlideAnimation:int):void
getUpdateLinksOnSave():int
getUseLongFileNames():int
getAllowPNG():int
getFrameColors():int
setFrameColors(frameColors:int):void
getHTMLVersion():int
setHTMLVersion(hTMLVersion:int):void
getRelyOnVML():int
}
export interface DefaultWebOptions{
getEncoding():int
setOrganizeInFolder(organizeInFolder:int):void
setUpdateLinksOnSave(updateLinksOnSave:int):void
setUseLongFileNames(useLongFileNames:int):void
getFolderSuffix():string
setAllowPNG(allowPNG:int):void
setEncoding(encoding:int):void
setAlwaysSaveInDefaultEncoding(alwaysSaveInDefaultEncoding:int):void
setCheckIfOfficeIsHTMLEditor(checkIfOfficeIsHTMLEditor:int):void
setSaveNewWebPagesAsWebArchives(saveNewWebPagesAsWebArchives:int):void
setRelyOnVML(relyOnVML:int):void
getScreenSize():int
setScreenSize(screenSize:int):void
setTargetBrowser(targetBrowser:int):void
getTargetBrowser():int
getFonts():office.WebPageFonts
getAlwaysSaveInDefaultEncoding():int
getCheckIfOfficeIsHTMLEditor():int
getSaveNewWebPagesAsWebArchives():int
getIncludeNavigation():int
setIncludeNavigation(includeNavigation:int):void
getOrganizeInFolder():int
getResizeGraphics():int
setResizeGraphics(resizeGraphics:int):void
getShowSlideAnimation():int
setShowSlideAnimation(showSlideAnimation:int):void
getUpdateLinksOnSave():int
getUseLongFileNames():int
getAllowPNG():int
getFrameColors():int
setFrameColors(frameColors:int):void
getHTMLVersion():int
setHTMLVersion(hTMLVersion:int):void
getRelyOnVML():int
}
export interface Design{
getName():string
delete():void
setName(name:string):void
getIndex():int
getHasTitleMaster():int
moveTo(toPos:int):void
getPreserved():int
setPreserved(preserved:int):void
getMDesign():any
addTitleMaster():powerpoint.Master
getSlideMaster():powerpoint.Master
getTitleMaster():powerpoint.Master
}
export interface Design{
getName():string
delete():void
setName(name:string):void
getIndex():int
getHasTitleMaster():int
moveTo(toPos:int):void
getPreserved():int
setPreserved(preserved:int):void
getMDesign():any
addTitleMaster():powerpoint.Master
getSlideMaster():powerpoint.Master
getTitleMaster():powerpoint.Master
}
export interface Designs{
add(designName:string,index:int):powerpoint.Design
clone(pOriginal:powerpoint.Design,index:int):powerpoint.Design
load(templateName:string,index:int):powerpoint.Design
item(index:any):powerpoint.Design
getCount():int
}
export interface Designs{
add(designName:string,index:int):powerpoint.Design
clone(pOriginal:powerpoint.Design,index:int):powerpoint.Design
load(templateName:string,index:int):powerpoint.Design
item(index:any):powerpoint.Design
getCount():int
}
export interface Diagram{
getType():int
convert(type:int):void
setType(type:int):void
setAutoFormat(autoFormat:int):void
setAutoLayout(autoLayout:int):void
setReverse(reverse:int):void
fitText():void
getNodes():powerpoint.DiagramNodes
getAutoFormat():int
getAutoLayout():int
getReverse():int
}
export interface Diagram{
getType():int
convert(type:int):void
setType(type:int):void
setAutoFormat(autoFormat:int):void
setAutoLayout(autoLayout:int):void
setReverse(reverse:int):void
fitText():void
getNodes():powerpoint.DiagramNodes
getAutoFormat():int
getAutoLayout():int
getReverse():int
}
export interface DiagramNode{
delete():void
getRoot():powerpoint.DiagramNode
replaceNode(targetNode:powerpoint.DiagramNode):void
setLayout(layout:int):void
getLayout():int
getShape():powerpoint.Shape
nextNode():powerpoint.DiagramNode
prevNode():powerpoint.DiagramNode
swapNode(targetNode:powerpoint.DiagramNode,swapChildren:boolean):void
getChildren():powerpoint.DiagramNodeChildren
cloneNode(copyChildren:boolean,targetNode:powerpoint.DiagramNode,pos:int):powerpoint.DiagramNode
getDiagram():powerpoint.Diagram
getTextShape():powerpoint.Shape
transferChildren(receivingNode:powerpoint.DiagramNode):void
addNode(pos:int,nodeType:int):powerpoint.DiagramNode
moveNode(targetNode:powerpoint.DiagramNode,pos:int):void
}
export interface DiagramNode{
delete():void
getRoot():powerpoint.DiagramNode
replaceNode(targetNode:powerpoint.DiagramNode):void
setLayout(layout:int):void
getLayout():int
getShape():powerpoint.Shape
nextNode():powerpoint.DiagramNode
prevNode():powerpoint.DiagramNode
swapNode(targetNode:powerpoint.DiagramNode,swapChildren:boolean):void
getChildren():powerpoint.DiagramNodeChildren
cloneNode(copyChildren:boolean,targetNode:powerpoint.DiagramNode,pos:int):powerpoint.DiagramNode
getDiagram():powerpoint.Diagram
getTextShape():powerpoint.Shape
transferChildren(receivingNode:powerpoint.DiagramNode):void
addNode(pos:int,nodeType:int):powerpoint.DiagramNode
moveNode(targetNode:powerpoint.DiagramNode,pos:int):void
}
export interface DiagramNodeChildren{
item(index:any):powerpoint.DiagramNode
getCount():int
selectAll():void
getFirstChild():powerpoint.DiagramNode
getLastChild():powerpoint.DiagramNode
addNode(index:any,nodeType:int):powerpoint.DiagramNode
get_NewEnum():any
}
export interface DiagramNodeChildren{
item(index:any):powerpoint.DiagramNode
getCount():int
selectAll():void
getFirstChild():powerpoint.DiagramNode
getLastChild():powerpoint.DiagramNode
addNode(index:any,nodeType:int):powerpoint.DiagramNode
get_NewEnum():any
}
export interface DiagramNodes{
item(index:any):powerpoint.DiagramNode
getCount():int
selectAll():void
get_NewEnum():any
}
export interface DiagramNodes{
item(index:any):powerpoint.DiagramNode
getCount():int
selectAll():void
get_NewEnum():any
}
export interface Dialog{
show(args1:any,args2:any,args3:any,args4:any,args5:any,args6:any,args7:any,args8:any,args9:any,args10:any,args11:any,args12:any,args13:any,args14:any,args15:any,args16:any,args17:any,args18:any,args19:any,args20:any,args21:any,args22:any,args23:any,args24:any,args25:any,args26:any,args27:any,args28:any,args29:any,args30:any):boolean
show(args1:any):boolean
show2(args1:any,args2:any,args3:any,args4:any,args5:any,args6:any,args7:any,args8:any,args9:any,args10:any,args11:any,args12:any,args13:any,args14:any,args15:any,args16:any,args17:any,args18:any,args19:any,args20:any,args21:any,args22:any,args23:any,args24:any,args25:any,args26:any,args27:any,args28:any,args29:any,args30:any):boolean
show2(args1:any):boolean
showImpl2(args1:any,args2:any,args3:any,args4:any,args5:any,args6:any,args7:any,args8:any,args9:any,args10:any,args11:any,args12:any,args13:any,args14:any,args15:any,args16:any,args17:any,args18:any,args19:any,args20:any,args21:any,args22:any,args23:any,args24:any,args25:any,args26:any,args27:any,args28:any,args29:any,args30:any,callBack:boolean):boolean
}
export interface Dialog{
show(args1:any,args2:any,args3:any,args4:any,args5:any,args6:any,args7:any,args8:any,args9:any,args10:any,args11:any,args12:any,args13:any,args14:any,args15:any,args16:any,args17:any,args18:any,args19:any,args20:any,args21:any,args22:any,args23:any,args24:any,args25:any,args26:any,args27:any,args28:any,args29:any,args30:any):boolean
show(args1:any):boolean
show2(args1:any,args2:any,args3:any,args4:any,args5:any,args6:any,args7:any,args8:any,args9:any,args10:any,args11:any,args12:any,args13:any,args14:any,args15:any,args16:any,args17:any,args18:any,args19:any,args20:any,args21:any,args22:any,args23:any,args24:any,args25:any,args26:any,args27:any,args28:any,args29:any,args30:any):boolean
show2(args1:any):boolean
showImpl2(args1:any,args2:any,args3:any,args4:any,args5:any,args6:any,args7:any,args8:any,args9:any,args10:any,args11:any,args12:any,args13:any,args14:any,args15:any,args16:any,args17:any,args18:any,args19:any,args20:any,args21:any,args22:any,args23:any,args24:any,args25:any,args26:any,args27:any,args28:any,args29:any,args30:any,callBack:boolean):boolean
}
export interface Dialogs{
item(index:int):powerpoint.Dialog
getCount():int
}
export interface Dialogs{
item(index:int):powerpoint.Dialog
getCount():int
}
export interface DisplayUnitLabel{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
getOrientation():any
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setCaption(caption:string):void
getCaption():string
getHeight():double
getText():string
setText(text:string):void
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
setVerticalAlignment(verticalAlignment:any):void
getVerticalAlignment():any
getFill():powerpoint.ChartFillFormat
setOrientation(orientation:any):void
getCharacters(start:any,length:any):powerpoint.ChartCharacters
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getHorizontalAlignment():any
setHorizontalAlignment(horizontalAlignment:any):void
setFormula(formula:string):void
getInterior():powerpoint.Interior
getAutoScaleFont():any
getFormula():string
setAutoScaleFont(autoScaleFont:any):void
getFormulaR1C1Local():string
setFormulaR1C1Local(formulaR1C1Local:string):void
getFormulaLocal():string
getFormulaR1C1():string
setFormulaLocal(formulaLocal:string):void
setFormulaR1C1(formulaR1C1:string):void
}
export interface DisplayUnitLabel{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
getOrientation():any
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setCaption(caption:string):void
getCaption():string
getHeight():double
getText():string
setText(text:string):void
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
setVerticalAlignment(verticalAlignment:any):void
getVerticalAlignment():any
getFill():powerpoint.ChartFillFormat
setOrientation(orientation:any):void
getCharacters(start:any,length:any):powerpoint.ChartCharacters
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getHorizontalAlignment():any
setHorizontalAlignment(horizontalAlignment:any):void
setFormula(formula:string):void
getInterior():powerpoint.Interior
getAutoScaleFont():any
getFormula():string
setAutoScaleFont(autoScaleFont:any):void
getFormulaR1C1Local():string
setFormulaR1C1Local(formulaR1C1Local:string):void
getFormulaLocal():string
getFormulaR1C1():string
setFormulaLocal(formulaLocal:string):void
setFormulaR1C1(formulaR1C1:string):void
}
export interface DocumentWindow{
close():void
getWidth():float
getLeft():float
setLeft(l:float):void
setTop(in:float):void
getTop():float
setWidth(w:float):void
activate():void
getCaption():string
getHeight():float
setHeight(height:float):void
getSelection():powerpoint.Selection
getWindowState():int
setWindowState(pWindowState:int):void
newWindow():powerpoint.DocumentWindow
getViewType():int
rangeFromPoint(x:int,y:int):any
getActive():int
getView():powerpoint.View
setViewType(viewType:int):void
getActivePane():powerpoint.Pane
largeScroll(down:int,up:int,toRight:int,toLeft:int):void
smallScroll(down:int,up:int,toRight:int,toLeft:int):void
getPresentation():powerpoint.Presentation
getPanes():powerpoint.Panes
setSplitVertical(splitVertical:int):void
getSplitVertical():int
scrollIntoView(left:float,top:float,width:float,height:float,start:int):void
getSplitHorizontal():int
setSplitHorizontal(splitHorizontal:int):void
pointsToScreenPixelsX(points:float):int
pointsToScreenPixelsY(points:float):int
isSectionExpanded(sectionIndex:int):boolean
setBlackAndWhite(blackAndWhite:int):void
getBlackAndWhite():int
expandSection(sectionIndex:int,expand:boolean):void
fitToPage():void
}
export interface DocumentWindow{
close():void
getWidth():float
getLeft():float
setLeft(l:float):void
setTop(in:float):void
getTop():float
setWidth(w:float):void
activate():void
getCaption():string
getHeight():float
setHeight(height:float):void
getSelection():powerpoint.Selection
getWindowState():int
setWindowState(pWindowState:int):void
newWindow():powerpoint.DocumentWindow
getViewType():int
rangeFromPoint(x:int,y:int):any
getActive():int
getView():powerpoint.View
setViewType(viewType:int):void
getActivePane():powerpoint.Pane
largeScroll(down:int,up:int,toRight:int,toLeft:int):void
smallScroll(down:int,up:int,toRight:int,toLeft:int):void
getPresentation():powerpoint.Presentation
getPanes():powerpoint.Panes
setSplitVertical(splitVertical:int):void
getSplitVertical():int
scrollIntoView(left:float,top:float,width:float,height:float,start:int):void
getSplitHorizontal():int
setSplitHorizontal(splitHorizontal:int):void
pointsToScreenPixelsX(points:float):int
pointsToScreenPixelsY(points:float):int
isSectionExpanded(sectionIndex:int):boolean
setBlackAndWhite(blackAndWhite:int):void
getBlackAndWhite():int
expandSection(sectionIndex:int,expand:boolean):void
fitToPage():void
}
export interface DocumentWindows{
item(index:int):powerpoint.DocumentWindow
getCount():int
getActiveWindow():powerpoint.DocumentWindow
arrange(arrangeStyle:int):void
}
export interface DocumentWindows{
item(index:int):powerpoint.DocumentWindow
getCount():int
getActiveWindow():powerpoint.DocumentWindow
arrange(arrangeStyle:int):void
}
export interface DownBars{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
select():any
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
getInterior():powerpoint.Interior
}
export interface DownBars{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
select():any
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
getInterior():powerpoint.Interior
}
export interface DropLines{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
}
export interface DropLines{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
}
export const enum EApplication{
//clsid=
}
export const enum EApplication{
//clsid=
}
export interface Effect{
delete():void
getDisplayName():string
getIndex():int
setShape(shape:powerpoint.Shape):void
getShape():powerpoint.Shape
getParagraph():int
setParagraph(paragraph:int):void
getEffectInformation():powerpoint.EffectInformation
getEffectParameters():powerpoint.EffectParameters
getTextRangeLength():int
getTextRangeStart():int
moveTo(toPos:int):void
getExit():int
setExit(exit:int):void
getTiming():powerpoint.Timing
getBehaviors():powerpoint.AnimationBehaviors
getEffectType():int
setEffectType(effectType:int):void
moveAfter(effect:powerpoint.Effect):void
moveBefore(effect:powerpoint.Effect):void
}
export interface Effect{
delete():void
getDisplayName():string
getIndex():int
setShape(shape:powerpoint.Shape):void
getShape():powerpoint.Shape
getParagraph():int
setParagraph(paragraph:int):void
getEffectInformation():powerpoint.EffectInformation
getEffectParameters():powerpoint.EffectParameters
getTextRangeLength():int
getTextRangeStart():int
moveTo(toPos:int):void
getExit():int
setExit(exit:int):void
getTiming():powerpoint.Timing
getBehaviors():powerpoint.AnimationBehaviors
getEffectType():int
setEffectType(effectType:int):void
moveAfter(effect:powerpoint.Effect):void
moveBefore(effect:powerpoint.Effect):void
}
export interface EffectInformation{
getAnimateBackground():int
getAnimateTextInReverse():int
getTextUnitEffect():int
getBuildByLevelEffect():int
getDim():powerpoint.ColorFormat
getSoundEffect():powerpoint.SoundEffect
getAfterEffect():int
getPlaySettings():powerpoint.PlaySettings
}
export interface EffectInformation{
getAnimateBackground():int
getAnimateTextInReverse():int
getTextUnitEffect():int
getBuildByLevelEffect():int
getDim():powerpoint.ColorFormat
getSoundEffect():powerpoint.SoundEffect
getAfterEffect():int
getPlaySettings():powerpoint.PlaySettings
}
export interface EffectParameters{
getSize():float
setSize(size:float):void
getFontName():string
setFontName(fontName:string):void
getDirection():int
setDirection(direction:int):void
getAmount():float
setAmount(amount:float):void
getColor2():powerpoint.ColorFormat
getRelative():int
setRelative(relative:int):void
}
export interface EffectParameters{
getSize():float
setSize(size:float):void
getFontName():string
setFontName(fontName:string):void
getDirection():int
setDirection(direction:int):void
getAmount():float
setAmount(amount:float):void
getColor2():powerpoint.ColorFormat
getRelative():int
setRelative(relative:int):void
}
export interface ErrorBars{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
clearFormats():any
getEndStyle():int
setEndStyle(endStyle:int):void
}
export interface ErrorBars{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
clearFormats():any
getEndStyle():int
setEndStyle(endStyle:int):void
}
export interface ExtraColors{
add(type:int):void
clear():void
item(index:int):int
getCount():int
}
export interface ExtraColors{
add(type:int):void
clear():void
item(index:int):int
getCount():int
}
export interface FileConverter{
getName():string
getPath():string
getClassName():string
getExtensions():string
isCanOpen():boolean
isCanSave():boolean
getFormatName():string
getOpenFormat():int
getSaveFormat():int
}
export interface FileConverter{
getName():string
getPath():string
getClassName():string
getExtensions():string
isCanOpen():boolean
isCanSave():boolean
getFormatName():string
getOpenFormat():int
getSaveFormat():int
}
export interface FileConverters{
item(index:any):powerpoint.FileConverter
getCount():int
}
export interface FileConverters{
item(index:any):powerpoint.FileConverter
getCount():int
}
export interface FillFormat{
apply(mFill:any):void
getType():int
setVisible(visible:int):void
background():void
setGradientAngle(gradientAngle:float):void
getGradientAngle():float
solid():void
getBackColor():powerpoint.ColorFormat
getForeColor():powerpoint.ColorFormat
getGradientStyle():int
getPattern():int
patterned(pattern:int):void
presetGradient(style:int,variant:int,presetGradientType:int):void
getPresetTexture():int
presetTextured(presetTexture:int):void
getTextureName():string
getTextureType():int
getTransparency():float
setTransparency(transparency:float):void
userPicture(pictureFile:string):void
userTextured(textureFile:string):void
getVisible():int
setTextureTile(textureTile:int):void
getTextureTile():int
oneColorGradient(style:int,variant:int,degree:float):void
twoColorGradient(style:int,variant:int):void
getGradientColorType():int
getGradientDegree():float
changeYzoTypeToMsType(yzoType:int):int
changeMSTypeToYzoType(msType:int):int
transGradientStyleToEIO(type:int):int
getPresetGradientType():int
getTextureAlignment():int
setTextureAlignment(textureAlignment:int):void
getTextureOffsetX():float
setTextureOffsetX(textureOffsetX:float):void
getTextureOffsetY():float
setTextureOffsetY(textureOffsetY:float):void
getTextureVerticalScale():float
setTextureVerticalScale(textureVerticalScale:float):void
getPictureEffects():office.PictureEffects
getGradientVariant():int
getAngleFromMsStyle(msStyle:int):int
getTextureHorizontalScale():float
setTextureHorizontalScale(textureHorizontalScale:float):void
setForeColor(foreColor:powerpoint.ColorFormat):void
setBackColor(backColor:powerpoint.ColorFormat):void
getDefaultColor(colorFormat:powerpoint.ColorFormat):any
transTwoColorGradient(mFill:any,style:int,variant:int):void
getRotateWithObject():int
setRotateWithObject(rotateWithObject:int):void
getObjectColor(colorFormat:powerpoint.ColorFormat):any
setObjectColor(colorFormat:powerpoint.ColorFormat,rgb:int):void
getGradientStops():office.GradientStops
}
export interface FillFormat{
apply(mFill:any):void
getType():int
setVisible(visible:int):void
background():void
setGradientAngle(gradientAngle:float):void
getGradientAngle():float
solid():void
getBackColor():powerpoint.ColorFormat
getForeColor():powerpoint.ColorFormat
getGradientStyle():int
getPattern():int
patterned(pattern:int):void
presetGradient(style:int,variant:int,presetGradientType:int):void
getPresetTexture():int
presetTextured(presetTexture:int):void
getTextureName():string
getTextureType():int
getTransparency():float
setTransparency(transparency:float):void
userPicture(pictureFile:string):void
userTextured(textureFile:string):void
getVisible():int
setTextureTile(textureTile:int):void
getTextureTile():int
oneColorGradient(style:int,variant:int,degree:float):void
twoColorGradient(style:int,variant:int):void
getGradientColorType():int
getGradientDegree():float
changeYzoTypeToMsType(yzoType:int):int
changeMSTypeToYzoType(msType:int):int
transGradientStyleToEIO(type:int):int
getPresetGradientType():int
getTextureAlignment():int
setTextureAlignment(textureAlignment:int):void
getTextureOffsetX():float
setTextureOffsetX(textureOffsetX:float):void
getTextureOffsetY():float
setTextureOffsetY(textureOffsetY:float):void
getTextureVerticalScale():float
setTextureVerticalScale(textureVerticalScale:float):void
getPictureEffects():office.PictureEffects
getGradientVariant():int
getAngleFromMsStyle(msStyle:int):int
getTextureHorizontalScale():float
setTextureHorizontalScale(textureHorizontalScale:float):void
setForeColor(foreColor:powerpoint.ColorFormat):void
setBackColor(backColor:powerpoint.ColorFormat):void
getDefaultColor(colorFormat:powerpoint.ColorFormat):any
transTwoColorGradient(mFill:any,style:int,variant:int):void
getRotateWithObject():int
setRotateWithObject(rotateWithObject:int):void
getObjectColor(colorFormat:powerpoint.ColorFormat):any
setObjectColor(colorFormat:powerpoint.ColorFormat,rgb:int):void
getGradientStops():office.GradientStops
}
export interface FilterEffect{
getType():int
setType(type:int):void
getSubtype():int
setSubtype(subtype:int):void
getReveal():int
setReveal(reveal:int):void
}
export interface FilterEffect{
getType():int
setType(type:int):void
getSubtype():int
setSubtype(subtype:int):void
getReveal():int
setReveal(reveal:int):void
}
export interface Floor{
getName():string
getBorder():powerpoint.ChartBorder
paste():void
select():any
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
getPictureType():any
setPictureType(pictureType:any):void
getThickness():int
setThickness(thickness:int):void
}
export interface Floor{
getName():string
getBorder():powerpoint.ChartBorder
paste():void
select():any
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
getPictureType():any
setPictureType(pictureType:any):void
getThickness():int
setThickness(thickness:int):void
}
export interface Font{
getName():string
apply():void
setName(name:string):void
getSize():float
setSize(size:float):void
getColor():powerpoint.ColorFormat
setShadow(shadow:int):void
setBold(bold:int):void
getBold():int
setEmboss(emboss:int):void
setSubscript(subscript:int):void
setSuperscript(superscript:int):void
getEmboss():int
setItalic(italic:int):void
getItalic():int
setNameAscii(nameAscii:string):void
getNameAscii():string
setNameFarEast(nameFarEast:string):void
getNameFarEast():string
setNameOther(nameOther:string):void
getNameOther():string
getShadow():int
getSubscript():int
getSuperscript():int
setUnderline(underline:int):void
getUnderline():int
getDefaultColor(colorFormat:powerpoint.ColorFormat):any
getAutoRotateNumbers():int
setAutoRotateNumbers(autoRotateNumbers:int):void
getBaselineOffset():float
setBaselineOffset(baselineOffset:float):void
getNameComplexScript():string
setNameComplexScript(nameComplexScript:string):void
getObjectColor(colorFormat:powerpoint.ColorFormat):any
setObjectColor(colorFormat:powerpoint.ColorFormat,rgb:int):void
getEmbeddable():int
getEmbedded():int
}
export interface Font{
getName():string
apply():void
setName(name:string):void
getSize():float
setSize(size:float):void
getColor():powerpoint.ColorFormat
setShadow(shadow:int):void
setBold(bold:int):void
getBold():int
setEmboss(emboss:int):void
setSubscript(subscript:int):void
setSuperscript(superscript:int):void
getEmboss():int
setItalic(italic:int):void
getItalic():int
setNameAscii(nameAscii:string):void
getNameAscii():string
setNameFarEast(nameFarEast:string):void
getNameFarEast():string
setNameOther(nameOther:string):void
getNameOther():string
getShadow():int
getSubscript():int
getSuperscript():int
setUnderline(underline:int):void
getUnderline():int
getDefaultColor(colorFormat:powerpoint.ColorFormat):any
getAutoRotateNumbers():int
setAutoRotateNumbers(autoRotateNumbers:int):void
getBaselineOffset():float
setBaselineOffset(baselineOffset:float):void
getNameComplexScript():string
setNameComplexScript(nameComplexScript:string):void
getObjectColor(colorFormat:powerpoint.ColorFormat):any
setObjectColor(colorFormat:powerpoint.ColorFormat,rgb:int):void
getEmbeddable():int
getEmbedded():int
}
export interface Fonts{
replace(original:string,replacement:string):void
item(index:any):powerpoint.Font
getCount():int
}
export interface Fonts{
replace(original:string,replacement:string):void
item(index:any):powerpoint.Font
getCount():int
}
export interface FreeformBuilder{
addNodes(segmentType:int,editingType:int,X1:float,Y1:float,X2:float,Y2:float,X3:float,Y3:float):void
convertToShape():powerpoint.Shape
}
export interface FreeformBuilder{
addNodes(segmentType:int,editingType:int,X1:float,Y1:float,X2:float,Y2:float,X3:float,Y3:float):void
convertToShape():powerpoint.Shape
}
export interface FullSeriesCollection{
item(index:any):powerpoint.Series
getCount():int
}
export interface FullSeriesCollection{
item(index:any):powerpoint.Series
getCount():int
}
export const enum Global{
//clsid=
}
export const enum Global{
//clsid=
}
export interface Gridlines{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
}
export interface Gridlines{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
}
export interface GroupShapes{
range(index:any):powerpoint.ShapeRange
item(index:any):powerpoint.Shape
getCount():int
}
export interface GroupShapes{
range(index:any):powerpoint.ShapeRange
item(index:any):powerpoint.Shape
getCount():int
}
export interface Guide{
delete():void
getOrientation():int
getColor():powerpoint.ColorFormat
setPosition(Position:float):void
getPosition():float
}
export interface Guide{
delete():void
getOrientation():int
getColor():powerpoint.ColorFormat
setPosition(Position:float):void
getPosition():float
}
export interface Guides{
add(orientation:int,position:float):powerpoint.Guide
item(index:int):powerpoint.Guide
getCount():int
}
export interface Guides{
add(orientation:int,position:float):powerpoint.Guide
item(index:int):powerpoint.Guide
getCount():int
}
export interface HeaderFooter{
setVisible(visible:int):void
getText():string
setText(text:string):void
getFormat():int
getVisible():int
setFormat(format:int):void
getUseFormat():int
setUseFormat(useFormat:int):void
}
export interface HeaderFooter{
setVisible(visible:int):void
getText():string
setText(text:string):void
getFormat():int
getVisible():int
setFormat(format:int):void
getUseFormat():int
setUseFormat(useFormat:int):void
}
export interface HeadersFooters{
clear():void
getHeader():powerpoint.HeaderFooter
getFooter():powerpoint.HeaderFooter
getDisplayOnTitleSlide():int
setDisplayOnTitleSlide(displayOnTitleSlide:int):void
getDateAndTime():powerpoint.HeaderFooter
getSlideNumber():powerpoint.HeaderFooter
}
export interface HeadersFooters{
clear():void
getHeader():powerpoint.HeaderFooter
getFooter():powerpoint.HeaderFooter
getDisplayOnTitleSlide():int
setDisplayOnTitleSlide(displayOnTitleSlide:int):void
getDateAndTime():powerpoint.HeaderFooter
getSlideNumber():powerpoint.HeaderFooter
}
export interface HiLoLines{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
}
export interface HiLoLines{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
}
export interface Hyperlink{
getAddress():string
apply():void
init():void
delete():void
getType():int
follow():void
setTextToDisplay(textToDisplay:string):void
setAddress(address:string):void
setEmailSubject(emailSubject:string):void
getEmailSubject():string
setScreenTip(screenTip:string):void
getScreenTip():string
setSubAddress(subAddress:string):void
getSubAddress():string
getTextToDisplay():string
createNewDocument(fileName:string,editNow:int,overWrite:int):void
addToFavorites():void
getShowAndReturn():int
setShowAndReturn(showAndReturn:int):void
}
export interface Hyperlink{
getAddress():string
apply():void
init():void
delete():void
getType():int
follow():void
setTextToDisplay(textToDisplay:string):void
setAddress(address:string):void
setEmailSubject(emailSubject:string):void
getEmailSubject():string
setScreenTip(screenTip:string):void
getScreenTip():string
setSubAddress(subAddress:string):void
getSubAddress():string
getTextToDisplay():string
createNewDocument(fileName:string,editNow:int,overWrite:int):void
addToFavorites():void
getShowAndReturn():int
setShowAndReturn(showAndReturn:int):void
}
export interface Hyperlinks{
item(index:int):powerpoint.Hyperlink
getCount():int
}
export interface Hyperlinks{
item(index:int):powerpoint.Hyperlink
getCount():int
}
export interface IColorFormat{
getDefaultColor(colorFormat:powerpoint.ColorFormat):any
getObjectColor(colorFormat:powerpoint.ColorFormat):any
setObjectColor(colorFormat:powerpoint.ColorFormat,rgb:int):void
}
export interface IColorFormat{
getDefaultColor(colorFormat:powerpoint.ColorFormat):any
getObjectColor(colorFormat:powerpoint.ColorFormat):any
setObjectColor(colorFormat:powerpoint.ColorFormat,rgb:int):void
}
export interface Interior{
setColor(color:any):void
getColor():any
setColorIndex(colorIndex:any):void
getColorIndex():any
getPattern():any
setPattern(pattern:any):void
getPatternColor():any
setPatternColor(patternColor:any):void
setInvertIfNegative(invertIfNegative:any):void
getPatternColorIndex():any
setPatternColorIndex(patternColorIndex:any):void
getInvertIfNegative():any
}
export interface Interior{
setColor(color:any):void
getColor():any
setColorIndex(colorIndex:any):void
getColorIndex():any
getPattern():any
setPattern(pattern:any):void
getPatternColor():any
setPatternColor(patternColor:any):void
setInvertIfNegative(invertIfNegative:any):void
getPatternColorIndex():any
setPatternColorIndex(patternColorIndex:any):void
getInvertIfNegative():any
}
export interface LeaderLines{
delete():void
getBorder():powerpoint.ChartBorder
select():void
getFormat():powerpoint.ChartFormat
}
export interface LeaderLines{
delete():void
getBorder():powerpoint.ChartBorder
select():void
getFormat():powerpoint.ChartFormat
}
export interface Legend{
clear():any
getName():string
delete():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setWidth(width:double):void
getHeight():double
setHeight(height:double):void
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
getInterior():powerpoint.Interior
legendEntries(index:any):any
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
isIncludeInLayout():boolean
setIncludeInLayout(includeInLayout:boolean):void
}
export interface Legend{
clear():any
getName():string
delete():any
getBorder():powerpoint.ChartBorder
getFont():powerpoint.ChartFont
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setWidth(width:double):void
getHeight():double
setHeight(height:double):void
select():any
isShadow():boolean
setPosition(position:int):void
getPosition():int
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
getInterior():powerpoint.Interior
legendEntries(index:any):any
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
isIncludeInLayout():boolean
setIncludeInLayout(includeInLayout:boolean):void
}
export interface LegendEntries{
item(index:any):powerpoint.LegendEntry
getCount():int
}
export interface LegendEntries{
item(index:any):powerpoint.LegendEntry
getCount():int
}
export interface LegendEntry{
delete():any
getFont():powerpoint.ChartFormat
getIndex():int
getWidth():double
getLeft():double
getTop():double
getHeight():double
select():any
getFormat():powerpoint.ChartFormat
getLegendKey():powerpoint.LegendKey
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
}
export interface LegendEntry{
delete():any
getFont():powerpoint.ChartFormat
getIndex():int
getWidth():double
getLeft():double
getTop():double
getHeight():double
select():any
getFormat():powerpoint.ChartFormat
getLegendKey():powerpoint.LegendKey
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
}
export interface LegendKey{
delete():any
getBorder():powerpoint.ChartBorder
getWidth():double
getLeft():double
getTop():double
getHeight():double
select():any
isShadow():boolean
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
getPictureType():int
setPictureType(pictureType:int):void
setMarkerSize(markerSize:int):void
getMarkerSize():int
setMarkerStyle(markerStyle:int):void
getMarkerStyle():int
setPictureUnit(pictureUnit:int):void
getPictureUnit():int
isSmooth():boolean
setInvertIfNegative(invertIfNegative:boolean):void
isInvertIfNegative():boolean
setMarkerBackgroundColor(markerBackgroundColor:int):void
getMarkerBackgroundColor():int
setMarkerForegroundColor(markerForegroundColor:int):void
getMarkerForegroundColor():int
setMarkerBackgroundColorIndex(markerBackgroundColorIndex:int):void
getMarkerBackgroundColorIndex():int
setMarkerForegroundColorIndex(markerForegroundColorIndex:int):void
getMarkerForegroundColorIndex():int
setSmooth(smooth:boolean):void
getPictureUnit2():double
setPictureUnit2(pictureUnit2:double):void
}
export interface LegendKey{
delete():any
getBorder():powerpoint.ChartBorder
getWidth():double
getLeft():double
getTop():double
getHeight():double
select():any
isShadow():boolean
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
getPictureType():int
setPictureType(pictureType:int):void
setMarkerSize(markerSize:int):void
getMarkerSize():int
setMarkerStyle(markerStyle:int):void
getMarkerStyle():int
setPictureUnit(pictureUnit:int):void
getPictureUnit():int
isSmooth():boolean
setInvertIfNegative(invertIfNegative:boolean):void
isInvertIfNegative():boolean
setMarkerBackgroundColor(markerBackgroundColor:int):void
getMarkerBackgroundColor():int
setMarkerForegroundColor(markerForegroundColor:int):void
getMarkerForegroundColor():int
setMarkerBackgroundColorIndex(markerBackgroundColorIndex:int):void
getMarkerBackgroundColorIndex():int
setMarkerForegroundColorIndex(markerForegroundColorIndex:int):void
getMarkerForegroundColorIndex():int
setSmooth(smooth:boolean):void
getPictureUnit2():double
setPictureUnit2(pictureUnit2:double):void
}
export interface LineFormat{
setVisible(visible:int):void
getBackColor():powerpoint.ColorFormat
getForeColor():powerpoint.ColorFormat
getPattern():int
getTransparency():float
setTransparency(pTransparency:float):void
getVisible():int
setForeColor(foreColor:powerpoint.ColorFormat):void
setBackColor(backColor:powerpoint.ColorFormat):void
getDashStyle():int
setDashStyle(dashStyle:int):void
getInsetPen():int
setInsetPen(insetPen:int):void
setPattern(pattern:int):void
getWeight():float
setWeight(weight:float):void
getStyle():int
setStyle(style:int):void
getBeginArrowheadLength():int
setBeginArrowheadLength(beginArrowheadLength:int):void
getBeginArrowheadStyle():int
setBeginArrowheadStyle(beginArrowheadStyle:int):void
getBeginArrowheadWidth():int
setBeginArrowheadWidth(beginArrowheadWidth:int):void
getEndArrowheadLength():int
setEndArrowheadLength(endArrowheadLength:int):void
getEndArrowheadStyle():int
setEndArrowheadStyle(endArrowheadStyle:int):void
getEndArrowheadWidth():int
setEndArrowheadWidth(endArrowheadWidth:int):void
getDefaultColor(colorFormat:powerpoint.ColorFormat):any
getObjectColor(colorFormat:powerpoint.ColorFormat):any
setObjectColor(colorFormat:powerpoint.ColorFormat,rgb:int):void
}
export interface LineFormat{
setVisible(visible:int):void
getBackColor():powerpoint.ColorFormat
getForeColor():powerpoint.ColorFormat
getPattern():int
getTransparency():float
setTransparency(pTransparency:float):void
getVisible():int
setForeColor(foreColor:powerpoint.ColorFormat):void
setBackColor(backColor:powerpoint.ColorFormat):void
getDashStyle():int
setDashStyle(dashStyle:int):void
getInsetPen():int
setInsetPen(insetPen:int):void
setPattern(pattern:int):void
getWeight():float
setWeight(weight:float):void
getStyle():int
setStyle(style:int):void
getBeginArrowheadLength():int
setBeginArrowheadLength(beginArrowheadLength:int):void
getBeginArrowheadStyle():int
setBeginArrowheadStyle(beginArrowheadStyle:int):void
getBeginArrowheadWidth():int
setBeginArrowheadWidth(beginArrowheadWidth:int):void
getEndArrowheadLength():int
setEndArrowheadLength(endArrowheadLength:int):void
getEndArrowheadStyle():int
setEndArrowheadStyle(endArrowheadStyle:int):void
getEndArrowheadWidth():int
setEndArrowheadWidth(endArrowheadWidth:int):void
getDefaultColor(colorFormat:powerpoint.ColorFormat):any
getObjectColor(colorFormat:powerpoint.ColorFormat):any
setObjectColor(colorFormat:powerpoint.ColorFormat,rgb:int):void
}
export interface LinkFormat{
update():void
setAutoUpdate(autoUpdate:int):void
breakLink():void
getSourceFullName():string
setSourceFullName(sourceFullName:string):void
getAutoUpdate():int
}
export interface LinkFormat{
update():void
setAutoUpdate(autoUpdate:int):void
breakLink():void
getSourceFullName():string
setSourceFullName(sourceFullName:string):void
getAutoUpdate():int
}
export interface Master{
getName():string
delete():void
setName(name:string):void
getBackground():powerpoint.ShapeRange
getWidth():float
getHeight():float
getScripts():office.Scripts
getShapes():powerpoint.Shapes
applyTheme(themeName:string):void
getHyperlinks():powerpoint.Hyperlinks
getHeadersFooters():powerpoint.HeadersFooters
getSlideShowTransition():powerpoint.SlideShowTransition
getBackgroundStyle():int
setBackgroundStyle(backgroundStyle:int):void
getTheme():office.OfficeTheme
getCustomerData():powerpoint.CustomerData
getDesign():powerpoint.Design
getTimeLine():powerpoint.TimeLine
getGuides():powerpoint.Guides
getColorScheme():powerpoint.ColorScheme
setColorScheme(colorScheme:powerpoint.ColorScheme):void
getCustomLayouts():powerpoint.CustomLayouts
getTextStyles():powerpoint.TextStyles
}
export interface Master{
getName():string
delete():void
setName(name:string):void
getBackground():powerpoint.ShapeRange
getWidth():float
getHeight():float
getScripts():office.Scripts
getShapes():powerpoint.Shapes
applyTheme(themeName:string):void
getHyperlinks():powerpoint.Hyperlinks
getHeadersFooters():powerpoint.HeadersFooters
getSlideShowTransition():powerpoint.SlideShowTransition
getBackgroundStyle():int
setBackgroundStyle(backgroundStyle:int):void
getTheme():office.OfficeTheme
getCustomerData():powerpoint.CustomerData
getDesign():powerpoint.Design
getTimeLine():powerpoint.TimeLine
getGuides():powerpoint.Guides
getColorScheme():powerpoint.ColorScheme
setColorScheme(colorScheme:powerpoint.ColorScheme):void
getCustomLayouts():powerpoint.CustomLayouts
getTextStyles():powerpoint.TextStyles
}
export const enum MasterEvents{
//clsid=
}
export const enum MasterEvents{
//clsid=
}
export interface MediaBookmark{
getName():string
delete():void
getIndex():int
getPosition():int
}
export interface MediaBookmark{
getName():string
delete():void
getIndex():int
getPosition():int
}
export interface MediaBookmarks{
add(position:int,name:string):powerpoint.MediaBookmark
item(index:int):powerpoint.MediaBookmark
getCount():int
}
export interface MediaBookmarks{
add(position:int,name:string):powerpoint.MediaBookmark
item(index:int):powerpoint.MediaBookmark
getCount():int
}
export interface MediaFormat{
getLength():int
getStartPoint():int
getEndPoint():int
setDisplayPictureFromFile(filePath:string):void
getVolume():float
setVolume(volume:float):void
setStartPoint(startPoint:int):void
getSampleWidth():int
getSampleHeight():int
resampleFromProfile(profile:int):void
setDisplayPicture(position:int):void
getAudioCompressionType():string
getAudioSamplingRate():int
getFadeInDuration():int
setFadeInDuration(fadeInDuration:int):void
getFadeOutDuration():int
setFadeOutDuration(fadeOutDuration:int):void
getMediaBookmarks():powerpoint.MediaBookmarks
getResamplingStatus():int
getVideoFrameRate():int
getVideoCompressionType():string
isLinked():boolean
resample(trim:boolean,sampleHeight:int,sampleWidth:int,videoFrameRate:int,audioSamplingRate:int,videoBitRate:int):void
getMuted():boolean
setMuted(muted:boolean):void
setEndPoint(endPoint:int):void
isEmbedded():boolean
}
export interface MediaFormat{
getLength():int
getStartPoint():int
getEndPoint():int
setDisplayPictureFromFile(filePath:string):void
getVolume():float
setVolume(volume:float):void
setStartPoint(startPoint:int):void
getSampleWidth():int
getSampleHeight():int
resampleFromProfile(profile:int):void
setDisplayPicture(position:int):void
getAudioCompressionType():string
getAudioSamplingRate():int
getFadeInDuration():int
setFadeInDuration(fadeInDuration:int):void
getFadeOutDuration():int
setFadeOutDuration(fadeOutDuration:int):void
getMediaBookmarks():powerpoint.MediaBookmarks
getResamplingStatus():int
getVideoFrameRate():int
getVideoCompressionType():string
isLinked():boolean
resample(trim:boolean,sampleHeight:int,sampleWidth:int,videoFrameRate:int,audioSamplingRate:int,videoBitRate:int):void
getMuted():boolean
setMuted(muted:boolean):void
setEndPoint(endPoint:int):void
isEmbedded():boolean
}
export interface MotionEffect{
getPath():string
setPath(path:string):void
getByX():float
setByX(byX:float):void
getByY():float
setByY(byY:float):void
getFromX():float
setFromX(fromX:float):void
getFromY():float
setFromY(fromY:float):void
getToX():float
setToX(toX:float):void
getToY():float
setToY(toY:float):void
}
export interface MotionEffect{
getPath():string
setPath(path:string):void
getByX():float
setByX(byX:float):void
getByY():float
setByY(byY:float):void
getFromX():float
setFromX(fromX:float):void
getFromY():float
setFromY(fromY:float):void
getToX():float
setToX(toX:float):void
getToY():float
setToY(toY:float):void
}
export interface MouseDownHandler{
onMouseDown(activeWin:any):void
}
export interface MouseDownHandler{
onMouseDown(activeWin:any):void
}
export interface MouseTracker{
endTrack(x:float,y:float):void
onTrack(x:float,y:float):void
}
export interface MouseTracker{
endTrack(x:float,y:float):void
onTrack(x:float,y:float):void
}
export interface NamedSlideShow{
getName():string
delete():void
getCount():int
getSlideIDs():any
}
export interface NamedSlideShow{
getName():string
delete():void
getCount():int
getSlideIDs():any
}
export interface NamedSlideShows{
add(name:string,safeArrayOfSlideIDs:any):powerpoint.NamedSlideShow
item(index:any):powerpoint.NamedSlideShow
getCount():int
}
export interface NamedSlideShows{
add(name:string,safeArrayOfSlideIDs:any):powerpoint.NamedSlideShow
item(index:any):powerpoint.NamedSlideShow
getCount():int
}
export interface ObjectVerbs{
item(index:int):string
getCount():int
}
export interface ObjectVerbs{
item(index:int):string
getCount():int
}
export interface OCXExtender{
getName():string
setName(name:string):void
getWidth():float
getLeft():float
setLeft(left:float):void
setTop(top:float):void
getTop():float
setWidth(width:float):void
getHeight():float
setHeight(height:float):void
isVisible():boolean
setVisible(visible:boolean):void
getAltHTML():string
setAltHTML(altHTML:string):void
getzOrderPosition():int
}
export interface OCXExtender{
getName():string
setName(name:string):void
getWidth():float
getLeft():float
setLeft(left:float):void
setTop(top:float):void
getTop():float
setWidth(width:float):void
getHeight():float
setHeight(height:float):void
isVisible():boolean
setVisible(visible:boolean):void
getAltHTML():string
setAltHTML(altHTML:string):void
getzOrderPosition():int
}
export interface OCXExtenderEvents{
gotFocus():void
lostFocus():void
}
export interface OCXExtenderEvents{
gotFocus():void
lostFocus():void
}
export interface OLEFormat{
getObject():any
activate():void
doVerb(index:int):void
getProgID():string
getObjectVerbs():powerpoint.ObjectVerbs
getFollowColors():int
setFollowColors(followColors:int):void
}
export interface OLEFormat{
getObject():any
activate():void
doVerb(index:int):void
getProgID():string
getObjectVerbs():powerpoint.ObjectVerbs
getFollowColors():int
setFollowColors(followColors:int):void
}
export interface Options{
setDisplayPasteOptions(displayPasteOptions:int):void
getDoNotPromptForConvert():int
setDoNotPromptForConvert(doNotPromptForConvert:int):void
getDisplayPasteOptions():int
isShowCoauthoringMergeChanges():boolean
setShowCoauthoringMergeChanges(showCoauthoringMergeChanges:boolean):void
}
export interface Options{
setDisplayPasteOptions(displayPasteOptions:int):void
getDoNotPromptForConvert():int
setDoNotPromptForConvert(doNotPromptForConvert:int):void
getDisplayPasteOptions():int
isShowCoauthoringMergeChanges():boolean
setShowCoauthoringMergeChanges(showCoauthoringMergeChanges:boolean):void
}
export interface PageSetup{
getSlideSize():int
setSlideSize(slideSize:int):void
getSlideWidth():float
setSlideWidth(slideWidth:float):void
getSlideHeight():float
setSlideHeight(slideHeight:float):void
getSlideOrientation():int
setSlideOrientation(slideOrientation:int):void
getNotesOrientation():int
setNotesOrientation(notesOrientation:int):void
getFirstSlideNumber():int
setFirstSlideNumber(firstSlideNumber:int):void
}
export interface PageSetup{
getSlideSize():int
setSlideSize(slideSize:int):void
getSlideWidth():float
setSlideWidth(slideWidth:float):void
getSlideHeight():float
setSlideHeight(slideHeight:float):void
getSlideOrientation():int
setSlideOrientation(slideOrientation:int):void
getNotesOrientation():int
setNotesOrientation(notesOrientation:int):void
getFirstSlideNumber():int
setFirstSlideNumber(firstSlideNumber:int):void
}
export interface Pane{
activate():void
getViewType():int
getActive():int
}
export interface Pane{
activate():void
getViewType():int
getActive():int
}
export interface Panes{
item(index:int):powerpoint.Pane
getCount():int
}
export interface Panes{
item(index:int):powerpoint.Pane
getCount():int
}
export interface ParagraphFormat{
apply():void
setWordWrap(wordWrap:int):void
getAlignment():int
setAlignment(alignment:int):void
getSpaceAfter():float
setSpaceAfter(spaceAfter:float):void
getSpaceBefore():float
setSpaceBefore(spaceBefore:float):void
getBaseLineAlignment():int
setBaseLineAlignment(baseLineAlignment:int):void
getHangingPunctuation():int
setHangingPunctuation(hangingPunctuation:int):void
getWordWrap():int
getFarEastLineBreakControl():int
setFarEastLineBreakControl(farEastLineBreakControl:int):void
getTextDirection():int
setTextDirection(textDirection:int):void
getSpaceWithin():float
setSpaceWithin(spaceWithin:float):void
getLineRuleAfter():int
setLineRuleAfter(lineRuleAfter:int):void
getBullet():powerpoint.BulletFormat
getLineRuleWithin():int
setLineRuleWithin(lineRuleWithin:int):void
getLineRuleBefore():int
setLineRuleBefore(lineRuleBefore:int):void
}
export interface ParagraphFormat{
apply():void
setWordWrap(wordWrap:int):void
getAlignment():int
setAlignment(alignment:int):void
getSpaceAfter():float
setSpaceAfter(spaceAfter:float):void
getSpaceBefore():float
setSpaceBefore(spaceBefore:float):void
getBaseLineAlignment():int
setBaseLineAlignment(baseLineAlignment:int):void
getHangingPunctuation():int
setHangingPunctuation(hangingPunctuation:int):void
getWordWrap():int
getFarEastLineBreakControl():int
setFarEastLineBreakControl(farEastLineBreakControl:int):void
getTextDirection():int
setTextDirection(textDirection:int):void
getSpaceWithin():float
setSpaceWithin(spaceWithin:float):void
getLineRuleAfter():int
setLineRuleAfter(lineRuleAfter:int):void
getBullet():powerpoint.BulletFormat
getLineRuleWithin():int
setLineRuleWithin(lineRuleWithin:int):void
getLineRuleBefore():int
setLineRuleBefore(lineRuleBefore:int):void
}
export interface PictureFormat{
getBrightness():float
setBrightness(brightness:float):void
getTransparencyColor():int
setTransparencyColor(transparencyColor:int):void
getTransparentBackground():int
setTransparentBackground(transparentBackground:int):void
incrementBrightness(increment:float):void
incrementContrast(increment:float):void
getColorType():int
setColorType(colorType:int):void
getContrast():float
setContrast(contrast:float):void
getCropBottom():float
setCropBottom(cropBottom:float):void
getCropLeft():float
setCropLeft(cropLeft:float):void
getCropRight():float
setCropRight(cropRight:float):void
getCropTop():float
setCropTop(cropTop:float):void
getCrop():float
}
export interface PictureFormat{
getBrightness():float
setBrightness(brightness:float):void
getTransparencyColor():int
setTransparencyColor(transparencyColor:int):void
getTransparentBackground():int
setTransparentBackground(transparentBackground:int):void
incrementBrightness(increment:float):void
incrementContrast(increment:float):void
getColorType():int
setColorType(colorType:int):void
getContrast():float
setContrast(contrast:float):void
getCropBottom():float
setCropBottom(cropBottom:float):void
getCropLeft():float
setCropLeft(cropLeft:float):void
getCropRight():float
setCropRight(cropRight:float):void
getCropTop():float
setCropTop(cropTop:float):void
getCrop():float
}
export interface PlaceholderFormat{
getName():string
setName(name:string):void
getType():int
getContainedType():int
}
export interface PlaceholderFormat{
getName():string
setName(name:string):void
getType():int
getContainedType():int
}
export interface Placeholders{
item(index:int):powerpoint.Shape
getCount():int
findByName(index:any):powerpoint.Shape
}
export interface Placeholders{
item(index:int):powerpoint.Shape
getCount():int
findByName(index:any):powerpoint.Shape
}
export interface Player{
stop():void
getState():int
pause():void
goToNextBookmark():void
goToPreviousBookmark():void
getCurrentPosition():int
setCurrentPosition(currentPosition:int):void
play():void
}
export interface Player{
stop():void
getState():int
pause():void
goToNextBookmark():void
goToPreviousBookmark():void
getCurrentPosition():int
setCurrentPosition(currentPosition:int):void
play():void
}
export interface PlaySettings{
getRewindMovie():int
setRewindMovie(rewindMovie:int):void
getPlayOnEntry():int
setPlayOnEntry(playOnEntry:int):void
getStopAfterSlides():int
setStopAfterSlides(stopAfterSlides:int):void
getPauseAnimation():int
setPauseAnimation(pauseAnimation:int):void
getLoopUntilStopped():int
setLoopUntilStopped(loopUntilStopped:int):void
getHideWhileNotPlaying():int
setHideWhileNotPlaying(hideWhileNotPlaying:int):void
getActionVerb():string
setActionVerb(actionVerb:string):void
}
export interface PlaySettings{
getRewindMovie():int
setRewindMovie(rewindMovie:int):void
getPlayOnEntry():int
setPlayOnEntry(playOnEntry:int):void
getStopAfterSlides():int
setStopAfterSlides(stopAfterSlides:int):void
getPauseAnimation():int
setPauseAnimation(pauseAnimation:int):void
getLoopUntilStopped():int
setLoopUntilStopped(loopUntilStopped:int):void
getHideWhileNotPlaying():int
setHideWhileNotPlaying(hideWhileNotPlaying:int):void
getActionVerb():string
setActionVerb(actionVerb:string):void
}
export interface PlotArea{
getName():string
getBorder():powerpoint.ChartBorder
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setWidth(width:double):void
getHeight():double
setHeight(height:double):void
select():any
setPosition(position:int):void
getPosition():int
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
setInsideWidth(insideWidth:double):void
setInsideTop(insideTop:double):void
setInsideLeft(insideLeft:double):void
setInsideHeight(insideHeight:double):void
getInsideHeight():double
getInsideLeft():double
getInsideTop():double
getInsideWidth():double
}
export interface PlotArea{
getName():string
getBorder():powerpoint.ChartBorder
getWidth():double
getLeft():double
setLeft(left:double):void
setTop(top:double):void
getTop():double
setWidth(width:double):void
getHeight():double
setHeight(height:double):void
select():any
setPosition(position:int):void
getPosition():int
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
setInsideWidth(insideWidth:double):void
setInsideTop(insideTop:double):void
setInsideLeft(insideLeft:double):void
setInsideHeight(insideHeight:double):void
getInsideHeight():double
getInsideLeft():double
getInsideTop():double
getInsideWidth():double
}
export interface Point{
getName():string
delete():any
copy():any
getBorder():powerpoint.ChartBorder
getWidth():double
getLeft():double
getTop():double
getHeight():double
paste():void
select():any
isShadow():boolean
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
getPictureType():int
setPictureType(pictureType:int):void
setMarkerSize(markerSize:int):void
getMarkerSize():int
setMarkerStyle(markerStyle:int):void
getMarkerStyle():int
setPictureUnit(pictureUnit:int):void
getPictureUnit():int
setApplyPictToEnd(applyPictToEnd:boolean):void
isApplyPictToFront():boolean
setApplyPictToFront(applyPictToFront:boolean):void
isApplyPictToSides():boolean
setApplyPictToSides(applyPictToSides:boolean):void
applyDataLabels(type:int,legendKey:any,autoText:any,hasLeaderLines:any,showSeriesName:any,showCategoryName:any,showValue:any,showPercentage:any,showBubbleSize:any,separator:any):any
setInvertIfNegative(invertIfNegative:boolean):void
isInvertIfNegative():boolean
setMarkerBackgroundColor(markerBackgroundColor:int):void
getMarkerBackgroundColor():int
setMarkerForegroundColor(markerForegroundColor:int):void
getMarkerForegroundColor():int
_applyDataLabels(type:int,legendKey:any,autoText:any,hasLeaderLines:any):any
pieSliceLocation(loc:int,index:int):double
getSecondaryPlot():boolean
isHas3DEffect():boolean
setMarkerBackgroundColorIndex(markerBackgroundColorIndex:int):void
getMarkerBackgroundColorIndex():int
setMarkerForegroundColorIndex(markerForegroundColorIndex:int):void
getMarkerForegroundColorIndex():int
isApplyPictToEnd():boolean
getDataLabel():powerpoint.DataLabel
getExplosion():int
setExplosion(explosion:int):void
isHasDataLabel():boolean
setHasDataLabel(hasDataLabel:boolean):void
setSecondaryPlot(secondaryPlot:boolean):void
setHas3DEffect(has3dEffect:boolean):void
getPictureUnit2():double
setPictureUnit2(pictureUnit2:double):void
}
export interface Point{
getName():string
delete():any
copy():any
getBorder():powerpoint.ChartBorder
getWidth():double
getLeft():double
getTop():double
getHeight():double
paste():void
select():any
isShadow():boolean
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
getPictureType():int
setPictureType(pictureType:int):void
setMarkerSize(markerSize:int):void
getMarkerSize():int
setMarkerStyle(markerStyle:int):void
getMarkerStyle():int
setPictureUnit(pictureUnit:int):void
getPictureUnit():int
setApplyPictToEnd(applyPictToEnd:boolean):void
isApplyPictToFront():boolean
setApplyPictToFront(applyPictToFront:boolean):void
isApplyPictToSides():boolean
setApplyPictToSides(applyPictToSides:boolean):void
applyDataLabels(type:int,legendKey:any,autoText:any,hasLeaderLines:any,showSeriesName:any,showCategoryName:any,showValue:any,showPercentage:any,showBubbleSize:any,separator:any):any
setInvertIfNegative(invertIfNegative:boolean):void
isInvertIfNegative():boolean
setMarkerBackgroundColor(markerBackgroundColor:int):void
getMarkerBackgroundColor():int
setMarkerForegroundColor(markerForegroundColor:int):void
getMarkerForegroundColor():int
_applyDataLabels(type:int,legendKey:any,autoText:any,hasLeaderLines:any):any
pieSliceLocation(loc:int,index:int):double
getSecondaryPlot():boolean
isHas3DEffect():boolean
setMarkerBackgroundColorIndex(markerBackgroundColorIndex:int):void
getMarkerBackgroundColorIndex():int
setMarkerForegroundColorIndex(markerForegroundColorIndex:int):void
getMarkerForegroundColorIndex():int
isApplyPictToEnd():boolean
getDataLabel():powerpoint.DataLabel
getExplosion():int
setExplosion(explosion:int):void
isHasDataLabel():boolean
setHasDataLabel(hasDataLabel:boolean):void
setSecondaryPlot(secondaryPlot:boolean):void
setHas3DEffect(has3dEffect:boolean):void
getPictureUnit2():double
setPictureUnit2(pictureUnit2:double):void
}
export interface Points{
item(index:int):powerpoint.Point
getCount():int
_default(index:int):powerpoint.Point
}
export interface Points{
item(index:int):powerpoint.Point
getCount():int
_default(index:int):powerpoint.Point
}
export interface PowerRex{
OnAsfEncoderEvent(erorCode:any,bstrErrorDesc:any):void
}
export interface PowerRex{
OnAsfEncoderEvent(erorCode:any,bstrErrorDesc:any):void
}
export interface Presentation{
getName():string
save():void
close():void
merge(path:string):void
isFinal():boolean
getPath():string
getPermission():office.Permission
convert():void
getContainer():any
getCommandBars():office.CommandBars
getWindows():powerpoint.DocumentWindows
newWindow():powerpoint.DocumentWindow
printOut(from:int,to:int,printToFile:string,copies:int,collate:int):void
getNativeHandle():int
setNativeHandle(handle:int):void
saveAs(fileName:string,fileFormat:int,embedFonts:int):void
getFullName():string
getMWorkbook():any
setSnapToGrid(snapToGrid:int):void
getPageSetup():powerpoint.PageSetup
getFarEastLineBreakLevel():int
setFarEastLineBreakLevel(farEastLineBreakLevel:int):void
getNoLineBreakAfter():string
setNoLineBreakAfter(noLineBreakAfter:string):void
getNoLineBreakBefore():string
setNoLineBreakBefore(noLineBreakBefore:string):void
sendFaxOverInternet(recipients:any,subject:any,showMessage:any):void
replyWithChanges(showMessage:boolean):void
setPassword(password:string):void
setWritePassword(writePassword:string):void
sendForReview(recipients:string,subject:string,showMessage:boolean,includeAttachment:any):void
getSignatures():office.SignatureSet
getWebOptions():powerpoint.WebOptions
webPagePreview():void
getVBProject():vbide.VBProject
setRemovePersonalInformation(removePersonalInformation:int):void
setPasswordEncryptionOptions(passwordEncryptionProvider:string,passwordEncryptionAlgorithm:string,passwordEncryptionKeyLength:int,passwordEncryptionFileProperties:boolean):void
saveAs2(fileName:string,fileFormat:int,embedFonts:int):void
setSaved(saved:int):void
getSync():office.Sync
getSharedWorkspace():office.SharedWorkspace
exportAsFixedFormat(path:string,fixedFormatType:int,intent:int,frameSlides:int,handoutOrder:int,outputType:int,printHiddenSlides:int,printRange:powerpoint.PrintRange,rangeType:int,slideShowName:string,includeDocProperties:boolean,keepIRMSettings:boolean,docStructureTags:boolean,bitmapMissingFonts:boolean,useISO19005_1:boolean,includeMarkup:boolean,externalExporter:any):void
getBuiltInDocumentProperties():office.DocumentProperties
isPasswordEncryptionFileProperties():boolean
reloadAs(cp:int):void
addToFavorites():void
applyTheme(themeName:string):void
endReview():void
followHyperlink(address:string,subAddress:string,newWindow:boolean,addHistory:boolean,extraInfo:string,method:int,headerInfo:string):void
getHTMLProject():any
getCustomDocumentProperties():office.DocumentProperties
getDocumentLibraryVersions():office.DocumentLibraryVersions
getFarEastLineBreakLanguage():int
setFarEastLineBreakLanguage(farEastLineBreakLanguage:int):void
getPasswordEncryptionAlgorithm():string
getPasswordEncryptionKeyLength():int
getPasswordEncryptionProvider():string
getFonts():powerpoint.Fonts
getSectionCount():int
acceptAll():void
rejectAll():void
getSelectedRange():powerpoint.SlideRange
setEnvelopeVisible(envelopeVisible:int):void
getPassword():string
getPublishObjects():powerpoint.PublishObjects
export(path:string,filterName:string,scaleWidth:int,scaleHeight:int):void
removeDocumentInformation(type:int):void
getRemovePersonalInformation():int
saveCopyAs(fileName:string,fileFormat:int,embedTrueTypeFonts:int):void
checkIn(saveChanges:boolean,comments:any,makePublic:any):void
canCheckIn():boolean
getWritePassword():string
updateLinks():void
applyTemplate(fileName:string):void
createVideo(fileName:string,useTimingsAndNarrations:boolean,defaultSlideDuration:int,vertResolution:int,framesPerSecond:int,quality:int):void
getWorkflowTasks():any
lockServerFile():void
publishSlides(slideLibraryUrl:string,overwrite:boolean):void
getVBASigned():int
getTemplateName():string
getSnapToGrid():int
getServerPolicy():any
getResearch():powerpoint.Research
getReadOnly():int
getPrintOptions():powerpoint.PrintOptions
getNotesMaster():powerpoint.Master
isInMergeMode():boolean
isHasVBProject():boolean
isHasNotesMaster():boolean
getHandoutMaster():powerpoint.Master
getGridDistance():float
setGridDistance(gridDistance:float):void
getExtraColors():powerpoint.ExtraColors
getDesigns():powerpoint.Designs
getDefaultShape():powerpoint.Shape
getColorSchemes():powerpoint.ColorSchemes
getCoauthoring():powerpoint.Coauthoring
getBroadcast():powerpoint.Broadcast
addBaseline(fileName:string):string
deleteSection(index:int):void
disableSections():void
isHasSections():boolean
makeIntoTemplate(isDesignTemplate:int):void
newSectionAfter(index:int,afterSlide:boolean,sectionTitle:string):int
sectionTitle(index:int):string
removeBaseline():void
setUndoText(text:string):void
applyTemplate2(fileName:string,variantGUID:string):void
isChartDataPointTrack():boolean
setChartDataPointTrack(pfChartDataPointTrack:boolean):void
getHasTitleMaster():int
CheckInWithVersion(saveChanges:boolean,comments:any,makePublic:any,versionType:any):void
ensureAllMediaUpgraded():void
getWorkflowTemplates():any
mergeWithBaseline(withPresentation:string,baselinePresentation:string):void
getSlideShowWindow():powerpoint.SlideShowWindow
getSlideShowSettings():powerpoint.SlideShowSettings
getSectionProperties():powerpoint.SectionProperties
getLayoutDirection():int
setLayoutDirection(layoutDirection:int):void
isHasHandoutMaster():boolean
getEnvelopeVisible():int
getEncryptionProvider():string
setEncryptionProvider(encryptionProvider:string):void
getDocumentInspectors():any
getDisplayComments():int
setDisplayComments(displayComments:int):void
getDefaultLanguageID():int
setDefaultLanguageID(defaultLanguageID:int):void
getCustomXMLParts():any
getCreateVideoStatus():int
getContentTypeProperties():any
getHasRevisionInfo():int
exportAsFixedFormat2(path:string,fixedFormatType:int,intent:int,frameSlides:int,handoutOrder:int,outputType:int,printHiddenSlides:int,printRange:powerpoint.PrintRange,rangeType:int,slideShowName:string,includeDocProperties:boolean,keepIRMSettings:boolean,docStructureTags:boolean,bitmapMissingFonts:boolean,useISO19005_1:boolean,includeMarkup:boolean,externalExporter:any):void
convert2(fileName:string):void
getTags():powerpoint.Tags
getSaved():int
setFinal(final1:boolean):void
sblt(s:string):void
getMPresentation():any
getSlides():powerpoint.Slides
getCustomerData():powerpoint.CustomerData
getGuides():powerpoint.Guides
addTitleMaster():powerpoint.Master
getSlideMaster():powerpoint.Master
getTitleMaster():powerpoint.Master
}
export interface Presentation{
getName():string
save():void
close():void
merge(path:string):void
isFinal():boolean
getPath():string
getPermission():office.Permission
convert():void
getContainer():any
getCommandBars():office.CommandBars
getWindows():powerpoint.DocumentWindows
newWindow():powerpoint.DocumentWindow
printOut(from:int,to:int,printToFile:string,copies:int,collate:int):void
getNativeHandle():int
setNativeHandle(handle:int):void
saveAs(fileName:string,fileFormat:int,embedFonts:int):void
getFullName():string
getMWorkbook():any
setSnapToGrid(snapToGrid:int):void
getPageSetup():powerpoint.PageSetup
getFarEastLineBreakLevel():int
setFarEastLineBreakLevel(farEastLineBreakLevel:int):void
getNoLineBreakAfter():string
setNoLineBreakAfter(noLineBreakAfter:string):void
getNoLineBreakBefore():string
setNoLineBreakBefore(noLineBreakBefore:string):void
sendFaxOverInternet(recipients:any,subject:any,showMessage:any):void
replyWithChanges(showMessage:boolean):void
setPassword(password:string):void
setWritePassword(writePassword:string):void
sendForReview(recipients:string,subject:string,showMessage:boolean,includeAttachment:any):void
getSignatures():office.SignatureSet
getWebOptions():powerpoint.WebOptions
webPagePreview():void
getVBProject():vbide.VBProject
setRemovePersonalInformation(removePersonalInformation:int):void
setPasswordEncryptionOptions(passwordEncryptionProvider:string,passwordEncryptionAlgorithm:string,passwordEncryptionKeyLength:int,passwordEncryptionFileProperties:boolean):void
saveAs2(fileName:string,fileFormat:int,embedFonts:int):void
setSaved(saved:int):void
getSync():office.Sync
getSharedWorkspace():office.SharedWorkspace
exportAsFixedFormat(path:string,fixedFormatType:int,intent:int,frameSlides:int,handoutOrder:int,outputType:int,printHiddenSlides:int,printRange:powerpoint.PrintRange,rangeType:int,slideShowName:string,includeDocProperties:boolean,keepIRMSettings:boolean,docStructureTags:boolean,bitmapMissingFonts:boolean,useISO19005_1:boolean,includeMarkup:boolean,externalExporter:any):void
getBuiltInDocumentProperties():office.DocumentProperties
isPasswordEncryptionFileProperties():boolean
reloadAs(cp:int):void
addToFavorites():void
applyTheme(themeName:string):void
endReview():void
followHyperlink(address:string,subAddress:string,newWindow:boolean,addHistory:boolean,extraInfo:string,method:int,headerInfo:string):void
getHTMLProject():any
getCustomDocumentProperties():office.DocumentProperties
getDocumentLibraryVersions():office.DocumentLibraryVersions
getFarEastLineBreakLanguage():int
setFarEastLineBreakLanguage(farEastLineBreakLanguage:int):void
getPasswordEncryptionAlgorithm():string
getPasswordEncryptionKeyLength():int
getPasswordEncryptionProvider():string
getFonts():powerpoint.Fonts
getSectionCount():int
acceptAll():void
rejectAll():void
getSelectedRange():powerpoint.SlideRange
setEnvelopeVisible(envelopeVisible:int):void
getPassword():string
getPublishObjects():powerpoint.PublishObjects
export(path:string,filterName:string,scaleWidth:int,scaleHeight:int):void
removeDocumentInformation(type:int):void
getRemovePersonalInformation():int
saveCopyAs(fileName:string,fileFormat:int,embedTrueTypeFonts:int):void
checkIn(saveChanges:boolean,comments:any,makePublic:any):void
canCheckIn():boolean
getWritePassword():string
updateLinks():void
applyTemplate(fileName:string):void
createVideo(fileName:string,useTimingsAndNarrations:boolean,defaultSlideDuration:int,vertResolution:int,framesPerSecond:int,quality:int):void
getWorkflowTasks():any
lockServerFile():void
publishSlides(slideLibraryUrl:string,overwrite:boolean):void
getVBASigned():int
getTemplateName():string
getSnapToGrid():int
getServerPolicy():any
getResearch():powerpoint.Research
getReadOnly():int
getPrintOptions():powerpoint.PrintOptions
getNotesMaster():powerpoint.Master
isInMergeMode():boolean
isHasVBProject():boolean
isHasNotesMaster():boolean
getHandoutMaster():powerpoint.Master
getGridDistance():float
setGridDistance(gridDistance:float):void
getExtraColors():powerpoint.ExtraColors
getDesigns():powerpoint.Designs
getDefaultShape():powerpoint.Shape
getColorSchemes():powerpoint.ColorSchemes
getCoauthoring():powerpoint.Coauthoring
getBroadcast():powerpoint.Broadcast
addBaseline(fileName:string):string
deleteSection(index:int):void
disableSections():void
isHasSections():boolean
makeIntoTemplate(isDesignTemplate:int):void
newSectionAfter(index:int,afterSlide:boolean,sectionTitle:string):int
sectionTitle(index:int):string
removeBaseline():void
setUndoText(text:string):void
applyTemplate2(fileName:string,variantGUID:string):void
isChartDataPointTrack():boolean
setChartDataPointTrack(pfChartDataPointTrack:boolean):void
getHasTitleMaster():int
CheckInWithVersion(saveChanges:boolean,comments:any,makePublic:any,versionType:any):void
ensureAllMediaUpgraded():void
getWorkflowTemplates():any
mergeWithBaseline(withPresentation:string,baselinePresentation:string):void
getSlideShowWindow():powerpoint.SlideShowWindow
getSlideShowSettings():powerpoint.SlideShowSettings
getSectionProperties():powerpoint.SectionProperties
getLayoutDirection():int
setLayoutDirection(layoutDirection:int):void
isHasHandoutMaster():boolean
getEnvelopeVisible():int
getEncryptionProvider():string
setEncryptionProvider(encryptionProvider:string):void
getDocumentInspectors():any
getDisplayComments():int
setDisplayComments(displayComments:int):void
getDefaultLanguageID():int
setDefaultLanguageID(defaultLanguageID:int):void
getCustomXMLParts():any
getCreateVideoStatus():int
getContentTypeProperties():any
getHasRevisionInfo():int
exportAsFixedFormat2(path:string,fixedFormatType:int,intent:int,frameSlides:int,handoutOrder:int,outputType:int,printHiddenSlides:int,printRange:powerpoint.PrintRange,rangeType:int,slideShowName:string,includeDocProperties:boolean,keepIRMSettings:boolean,docStructureTags:boolean,bitmapMissingFonts:boolean,useISO19005_1:boolean,includeMarkup:boolean,externalExporter:any):void
convert2(fileName:string):void
getTags():powerpoint.Tags
getSaved():int
setFinal(final1:boolean):void
sblt(s:string):void
getMPresentation():any
getSlides():powerpoint.Slides
getCustomerData():powerpoint.CustomerData
getGuides():powerpoint.Guides
addTitleMaster():powerpoint.Master
getSlideMaster():powerpoint.Master
getTitleMaster():powerpoint.Master
}
export interface Presentations{
add(withWindow:int):powerpoint.Presentation
close(saveChange:int):void
open(fileName:string,readOnly:int,untitled:int,withWindow:int):powerpoint.Presentation
item(index:any):powerpoint.Presentation
getCount():int
checkOut(fileName:string):void
canCheckOut(fileName:string):boolean
getPresentation(mbook:any):powerpoint.Presentation
add2(withWindow:int):powerpoint.Presentation
getActivePresentation():powerpoint.Presentation
createPresentation(binder:any,mpre:any):powerpoint.Presentation
open2007(fileName:string,readOnly:int,untitled:int,withWindow:int,openAndRepair:int):powerpoint.Presentation
openOld(fileName:string,readOnly:int,untitled:int,withWindow:int):powerpoint.Presentation
open2(fileName:string,readOnly:int,untitled:int,withWindow:int,openAndRepair:int):powerpoint.Presentation
}
export interface Presentations{
add(withWindow:int):powerpoint.Presentation
close(saveChange:int):void
open(fileName:string,readOnly:int,untitled:int,withWindow:int):powerpoint.Presentation
item(index:any):powerpoint.Presentation
getCount():int
checkOut(fileName:string):void
canCheckOut(fileName:string):boolean
getPresentation(mbook:any):powerpoint.Presentation
add2(withWindow:int):powerpoint.Presentation
getActivePresentation():powerpoint.Presentation
createPresentation(binder:any,mpre:any):powerpoint.Presentation
open2007(fileName:string,readOnly:int,untitled:int,withWindow:int,openAndRepair:int):powerpoint.Presentation
openOld(fileName:string,readOnly:int,untitled:int,withWindow:int):powerpoint.Presentation
open2(fileName:string,readOnly:int,untitled:int,withWindow:int,openAndRepair:int):powerpoint.Presentation
}
export const enum PresEvents{
//clsid=
}
export const enum PresEvents{
//clsid=
}
export interface PrintOptions{
setActivePrinter(activePrinter:string):void
getActivePrinter():string
setPrintComments(printComments:int):void
getSectionIndex():int
setCollate(collate:int):void
setSectionIndex(sectionIndex:int):void
getRangeType():int
setRangeType(rangeType:int):void
getRanges():powerpoint.PrintRanges
getOutputType():int
setOutputType(outputType:int):void
getHighQuality():int
setHighQuality(highQuality:int):void
getHandoutOrder():int
setHandoutOrder(handoutOrder:int):void
getFrameSlides():int
setFrameSlides(frameSlides:int):void
getFitToPage():int
setFitToPage(fitToPage:int):void
getCollate():int
getPrintInBackground():int
setPrintInBackground(printInBackground:int):void
getPrintHiddenSlides():int
setPrintHiddenSlides(printHiddenSlides:int):void
getPrintFontsAsGraphics():int
setPrintFontsAsGraphics(printFontsAsGraphics:int):void
getPrintColorType():int
setPrintColorType(printColorType:int):void
getNumberOfCopies():int
setNumberOfCopies(numberOfCopies:int):void
getPrintComments():int
getSlideShowName():string
setSlideShowName(slideShowName:string):void
}
export interface PrintOptions{
setActivePrinter(activePrinter:string):void
getActivePrinter():string
setPrintComments(printComments:int):void
getSectionIndex():int
setCollate(collate:int):void
setSectionIndex(sectionIndex:int):void
getRangeType():int
setRangeType(rangeType:int):void
getRanges():powerpoint.PrintRanges
getOutputType():int
setOutputType(outputType:int):void
getHighQuality():int
setHighQuality(highQuality:int):void
getHandoutOrder():int
setHandoutOrder(handoutOrder:int):void
getFrameSlides():int
setFrameSlides(frameSlides:int):void
getFitToPage():int
setFitToPage(fitToPage:int):void
getCollate():int
getPrintInBackground():int
setPrintInBackground(printInBackground:int):void
getPrintHiddenSlides():int
setPrintHiddenSlides(printHiddenSlides:int):void
getPrintFontsAsGraphics():int
setPrintFontsAsGraphics(printFontsAsGraphics:int):void
getPrintColorType():int
setPrintColorType(printColorType:int):void
getNumberOfCopies():int
setNumberOfCopies(numberOfCopies:int):void
getPrintComments():int
getSlideShowName():string
setSlideShowName(slideShowName:string):void
}
export interface PrintRange{
delete():void
getStart():int
getEnd():int
}
export interface PrintRange{
delete():void
getStart():int
getEnd():int
}
export interface PrintRanges{
add(start:int,end:int):powerpoint.PrintRange
item(index:int):powerpoint.PrintRange
getCount():int
clearAll():void
}
export interface PrintRanges{
add(start:int,end:int):powerpoint.PrintRange
item(index:int):powerpoint.PrintRange
getCount():int
clearAll():void
}
export interface PropertyEffect{
setProperty(property:int):void
getProperty():int
getPoints():powerpoint.AnimationPoints
getFrom():any
getTo():any
setTo(to:any):void
setFrom(from:any):void
}
export interface PropertyEffect{
setProperty(property:int):void
getProperty():int
getPoints():powerpoint.AnimationPoints
getFrom():any
getTo():any
setTo(to:any):void
setFrom(from:any):void
}
export interface ProtectedViewWindow{
close():void
getWidth():float
getLeft():float
setLeft(left:float):void
setTop(top:float):void
getTop():float
setWidth(width:float):void
activate():void
getCaption():string
getHeight():float
setHeight(height:float):void
getWindowState():int
setWindowState(windowState:int):void
edit(modifyPassword:string):powerpoint.Presentation
getActive():int
getSourceName():string
getSourcePath():string
getPresentation():powerpoint.Presentation
}
export interface ProtectedViewWindow{
close():void
getWidth():float
getLeft():float
setLeft(left:float):void
setTop(top:float):void
getTop():float
setWidth(width:float):void
activate():void
getCaption():string
getHeight():float
setHeight(height:float):void
getWindowState():int
setWindowState(windowState:int):void
edit(modifyPassword:string):powerpoint.Presentation
getActive():int
getSourceName():string
getSourcePath():string
getPresentation():powerpoint.Presentation
}
export interface ProtectedViewWindows{
open(fileName:string,readPassword:string,openAndRepair:int):powerpoint.ProtectedViewWindow
item(index:int):powerpoint.ProtectedViewWindow
getCount():int
}
export interface ProtectedViewWindows{
open(fileName:string,readPassword:string,openAndRepair:int):powerpoint.ProtectedViewWindow
item(index:int):powerpoint.ProtectedViewWindow
getCount():int
}
export interface PublishObject{
getFileName():string
setFileName(fileName:string):void
getSourceType():int
publish():void
getSpeakerNotes():int
setSpeakerNotes(speakerNotes:int):void
setSourceType(sourceType:int):void
getRangeStart():int
setRangeStart(rangeStart:int):void
getRangeEnd():int
setRangeEnd(rangeEnd:int):void
getSlideShowName():string
setSlideShowName(slideShowName:string):void
getHTMLVersion():int
setHTMLVersion(hTMLVersion:int):void
}
export interface PublishObject{
getFileName():string
setFileName(fileName:string):void
getSourceType():int
publish():void
getSpeakerNotes():int
setSpeakerNotes(speakerNotes:int):void
setSourceType(sourceType:int):void
getRangeStart():int
setRangeStart(rangeStart:int):void
getRangeEnd():int
setRangeEnd(rangeEnd:int):void
getSlideShowName():string
setSlideShowName(slideShowName:string):void
getHTMLVersion():int
setHTMLVersion(hTMLVersion:int):void
}
export interface PublishObjects{
item(index:int):powerpoint.PublishObject
getCount():int
}
export interface PublishObjects{
item(index:int):powerpoint.PublishObject
getCount():int
}
export interface ResampleMediaTask{
getShape():powerpoint.Shape
getSampleWidth():int
getSampleHeight():int
getProfile():int
isIsLinked():boolean
isIsEmbedded():boolean
getContainerType():string
getAudioCompressionType():string
getAudioSamplingRate():int
getVideoFrameRate():int
getVideoCompressionType():string
}
export interface ResampleMediaTask{
getShape():powerpoint.Shape
getSampleWidth():int
getSampleHeight():int
getProfile():int
isIsLinked():boolean
isIsEmbedded():boolean
getContainerType():string
getAudioCompressionType():string
getAudioSamplingRate():int
getVideoFrameRate():int
getVideoCompressionType():string
}
export interface ResampleMediaTasks{
resume():void
item(index:int):powerpoint.ResampleMediaTask
getCount():int
cancel():void
pause():void
getPercentComplete():int
}
export interface ResampleMediaTasks{
resume():void
item(index:int):powerpoint.ResampleMediaTask
getCount():int
cancel():void
pause():void
getPercentComplete():int
}
export interface Research{
Query(serviceID:string,queryString:any,queryLanguage:any,useSelection:boolean,launchQuery:boolean):void
isResearchService(serviceID:string):boolean
setLanguagePair(language1:any,language2:any):void
}
export interface Research{
Query(serviceID:string,queryString:any,queryLanguage:any,useSelection:boolean,launchQuery:boolean):void
isResearchService(serviceID:string):boolean
setLanguagePair(language1:any,language2:any):void
}
export interface RGBColor{
getRGB():int
setRGB(rGB:int):void
}
export interface RGBColor{
getRGB():int
setRGB(rGB:int):void
}
export interface RotationEffect{
getBy():float
getFrom():float
getTo():float
setTo(to:float):void
setFrom(from:float):void
setBy(by:float):void
}
export interface RotationEffect{
getBy():float
getFrom():float
getTo():float
setTo(to:float):void
setFrom(from:float):void
setBy(by:float):void
}
export interface Row{
delete():void
getHeight():float
setHeight(height:float):void
select():void
getCells():powerpoint.CellRange
}
export interface Row{
delete():void
getHeight():float
setHeight(height:float):void
select():void
getCells():powerpoint.CellRange
}
export interface Rows{
add(beforeRow:int):powerpoint.Row
item(index:int):powerpoint.Row
getCount():int
}
export interface Rows{
add(beforeRow:int):powerpoint.Row
item(index:int):powerpoint.Row
getCount():int
}
export interface Ruler{
getTabStops():powerpoint.TabStops
getLevels():powerpoint.RulerLevels
}
export interface Ruler{
getTabStops():powerpoint.TabStops
getLevels():powerpoint.RulerLevels
}
export interface RulerLevel{
getLeftMargin():float
setLeftMargin(leftMargin:float):void
getFirstMargin():float
setFirstMargin(firstMargin:float):void
}
export interface RulerLevel{
getLeftMargin():float
setLeftMargin(leftMargin:float):void
getFirstMargin():float
setFirstMargin(firstMargin:float):void
}
export interface RulerLevels{
item(index:int):powerpoint.RulerLevel
getCount():int
}
export interface RulerLevels{
item(index:int):powerpoint.RulerLevel
getCount():int
}
export interface ScaleEffect{
getByX():float
setByX(byX:float):void
getByY():float
setByY(byY:float):void
getFromX():float
setFromX(fromX:float):void
getFromY():float
setFromY(fromY:float):void
getToX():float
setToX(toX:float):void
getToY():float
setToY(toY:float):void
}
export interface ScaleEffect{
getByX():float
setByX(byX:float):void
getByY():float
setByY(byY:float):void
getFromX():float
setFromX(fromX:float):void
getFromY():float
setFromY(fromY:float):void
getToX():float
setToX(toX:float):void
getToY():float
setToY(toY:float):void
}
export interface SectionProperties{
name(sectionIndex:int):string
delete(sectionIndex:int,deleteSlides:boolean):void
rename(sectionIndex:int,sectionName:string):void
getCount():int
move(sectionIndex:int,toPos:int):void
addBeforeSlide(slideIndex:int,sectionName:string):int
addSection(slideIndex:int,sectionName:any):int
firstSlide(sectionIndex:int):int
sectionID(sectionIndex:int):string
slidesCount(sectionIndex:int):int
}
export interface SectionProperties{
name(sectionIndex:int):string
delete(sectionIndex:int,deleteSlides:boolean):void
rename(sectionIndex:int,sectionName:string):void
getCount():int
move(sectionIndex:int,toPos:int):void
addBeforeSlide(slideIndex:int,sectionName:string):int
addSection(slideIndex:int,sectionName:any):int
firstSlide(sectionIndex:int):int
sectionID(sectionIndex:int):string
slidesCount(sectionIndex:int):int
}
export interface Selection{
delete():void
copy():void
getType():int
paste():void
cut():void
unselect():void
getShapeRange():powerpoint.ShapeRange
getTextRange():powerpoint.TextRange
getChildShapeRange():powerpoint.ShapeRange
isHasChildShapeRange():boolean
getTextRange2():any
getSlideRange():powerpoint.SlideRange
getActivePresentation():powerpoint.Presentation
getActiveSlide():powerpoint.Slide
}
export interface Selection{
delete():void
copy():void
getType():int
paste():void
cut():void
unselect():void
getShapeRange():powerpoint.ShapeRange
getTextRange():powerpoint.TextRange
getChildShapeRange():powerpoint.ShapeRange
isHasChildShapeRange():boolean
getTextRange2():any
getSlideRange():powerpoint.SlideRange
getActivePresentation():powerpoint.Presentation
getActiveSlide():powerpoint.Slide
}
export interface Sequence{
clone(effect:powerpoint.Effect,index:int):powerpoint.Effect
item(index:int):powerpoint.Effect
getCount():int
convertToAnimateBackground(effect:powerpoint.Effect,animateBackground:int):powerpoint.Effect
convertToAnimateInReverse(effect:powerpoint.Effect,animateInReverse:int):powerpoint.Effect
findFirstAnimationForClick(click:int):powerpoint.Effect
convertToAfterEffect(effect:powerpoint.Effect,after:int,dimColor:int,dimSchemeColor:int):powerpoint.Effect
convertToBuildLevel(effect:powerpoint.Effect,level:int):powerpoint.Effect
convertToTextUnitEffect(effect:powerpoint.Effect,unitEffect:int):powerpoint.Effect
findFirstAnimationFor(shape:powerpoint.Shape):powerpoint.Effect
addEffect(shape:powerpoint.Shape,effectId:int,level:int,trigger:int,index:int):powerpoint.Effect
addTriggerEffect(pShape:powerpoint.Shape,effectId:int,trigger:int,pTriggerShape:powerpoint.Shape,bookmark:string,level:int):powerpoint.Effect
}
export interface Sequence{
clone(effect:powerpoint.Effect,index:int):powerpoint.Effect
item(index:int):powerpoint.Effect
getCount():int
convertToAnimateBackground(effect:powerpoint.Effect,animateBackground:int):powerpoint.Effect
convertToAnimateInReverse(effect:powerpoint.Effect,animateInReverse:int):powerpoint.Effect
findFirstAnimationForClick(click:int):powerpoint.Effect
convertToAfterEffect(effect:powerpoint.Effect,after:int,dimColor:int,dimSchemeColor:int):powerpoint.Effect
convertToBuildLevel(effect:powerpoint.Effect,level:int):powerpoint.Effect
convertToTextUnitEffect(effect:powerpoint.Effect,unitEffect:int):powerpoint.Effect
findFirstAnimationFor(shape:powerpoint.Shape):powerpoint.Effect
addEffect(shape:powerpoint.Shape,effectId:int,level:int,trigger:int,index:int):powerpoint.Effect
addTriggerEffect(pShape:powerpoint.Shape,effectId:int,trigger:int,pTriggerShape:powerpoint.Shape,bookmark:string,level:int):powerpoint.Effect
}
export interface Sequences{
add(index:int):powerpoint.Sequence
item(index:int):powerpoint.Sequence
getCount():int
}
export interface Sequences{
add(index:int):powerpoint.Sequence
item(index:int):powerpoint.Sequence
getCount():int
}
export interface Series{
getName():string
delete():any
setName(name:string):void
copy():any
getType():int
getBorder():powerpoint.ChartBorder
setType(type:int):void
points(index:any):any
paste():any
select():any
isShadow():boolean
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
setFormula(formula:string):void
getInterior():powerpoint.Interior
setAxisGroup(axisGroup:int):void
getPictureType():int
setPictureType(pictureType:int):void
setMarkerSize(markerSize:int):void
getMarkerSize():int
setMarkerStyle(markerStyle:int):void
getMarkerStyle():int
setPictureUnit(pictureUnit:int):void
getPictureUnit():int
isSmooth():boolean
errorBar(direction:int,include:int,type:int,amount:any,minusValues:any):any
getInvertColorIndex():int
setInvertColorIndex(invertColorIndex:int):void
getPlotColorIndex():int
setApplyPictToEnd(applyPictToEnd:boolean):void
isApplyPictToFront():boolean
setApplyPictToFront(applyPictToFront:boolean):void
isApplyPictToSides():boolean
setApplyPictToSides(applyPictToSides:boolean):void
getFormula():string
getAxisGroup():int
getChartType():int
getBarShape():int
setBarShape(barShape:int):void
setChartType(chartType:int):void
applyCustomType(chartType:int):void
applyDataLabels(type:int,legendKey:any,autoText:any,hasLeaderLines:any,showSeriesName:any,showCategoryName:any,showValue:any,showPercentage:any,showBubbleSize:any,separator:any):any
setInvertIfNegative(invertIfNegative:boolean):void
isInvertIfNegative():boolean
setMarkerBackgroundColor(markerBackgroundColor:int):void
getMarkerBackgroundColor():int
setMarkerForegroundColor(markerForegroundColor:int):void
getMarkerForegroundColor():int
isHas3DEffect():boolean
isHasDataLabels():boolean
isHasErrorBars():boolean
isHasLeaderLines():boolean
getInvertColor():int
setInvertColor(invertColor:int):void
isIsFiltered():boolean
setMarkerBackgroundColorIndex(markerBackgroundColorIndex:int):void
getMarkerBackgroundColorIndex():int
setMarkerForegroundColorIndex(markerForegroundColorIndex:int):void
getMarkerForegroundColorIndex():int
getFormulaR1C1Local():string
setFormulaR1C1Local(formulaR1C1Local:string):void
setHasLeaderLines(hasLeaderLines:boolean):void
isApplyPictToEnd():boolean
getExplosion():int
setExplosion(explosion:int):void
getFormulaLocal():string
getFormulaR1C1():string
setFormulaLocal(formulaLocal:string):void
setFormulaR1C1(formulaR1C1:string):void
getValues():any
getBubbleSizes():any
setBubbleSizes(bubbleSizes:any):void
getErrorBars():powerpoint.ErrorBars
setHas3DEffect(has3dEffect:boolean):void
setHasDataLabels(hasDataLabels:boolean):void
setHasErrorBars(hasErrorBars:boolean):void
getLeaderLines():powerpoint.LeaderLines
getPlotOrder():int
setPlotOrder(plotOrder:int):void
setSmooth(smooth:boolean):void
setValues(values:any):void
getXValues():any
setXValues(xValues:any):void
dataLabels(index:any):any
trendlines(index:any):any
setIsFiltered(isFiltered:boolean):void
getPictureUnit2():double
setPictureUnit2(pictureUnit2:double):void
}
export interface Series{
getName():string
delete():any
setName(name:string):void
copy():any
getType():int
getBorder():powerpoint.ChartBorder
setType(type:int):void
points(index:any):any
paste():any
select():any
isShadow():boolean
setShadow(shadow:boolean):void
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
setFormula(formula:string):void
getInterior():powerpoint.Interior
setAxisGroup(axisGroup:int):void
getPictureType():int
setPictureType(pictureType:int):void
setMarkerSize(markerSize:int):void
getMarkerSize():int
setMarkerStyle(markerStyle:int):void
getMarkerStyle():int
setPictureUnit(pictureUnit:int):void
getPictureUnit():int
isSmooth():boolean
errorBar(direction:int,include:int,type:int,amount:any,minusValues:any):any
getInvertColorIndex():int
setInvertColorIndex(invertColorIndex:int):void
getPlotColorIndex():int
setApplyPictToEnd(applyPictToEnd:boolean):void
isApplyPictToFront():boolean
setApplyPictToFront(applyPictToFront:boolean):void
isApplyPictToSides():boolean
setApplyPictToSides(applyPictToSides:boolean):void
getFormula():string
getAxisGroup():int
getChartType():int
getBarShape():int
setBarShape(barShape:int):void
setChartType(chartType:int):void
applyCustomType(chartType:int):void
applyDataLabels(type:int,legendKey:any,autoText:any,hasLeaderLines:any,showSeriesName:any,showCategoryName:any,showValue:any,showPercentage:any,showBubbleSize:any,separator:any):any
setInvertIfNegative(invertIfNegative:boolean):void
isInvertIfNegative():boolean
setMarkerBackgroundColor(markerBackgroundColor:int):void
getMarkerBackgroundColor():int
setMarkerForegroundColor(markerForegroundColor:int):void
getMarkerForegroundColor():int
isHas3DEffect():boolean
isHasDataLabels():boolean
isHasErrorBars():boolean
isHasLeaderLines():boolean
getInvertColor():int
setInvertColor(invertColor:int):void
isIsFiltered():boolean
setMarkerBackgroundColorIndex(markerBackgroundColorIndex:int):void
getMarkerBackgroundColorIndex():int
setMarkerForegroundColorIndex(markerForegroundColorIndex:int):void
getMarkerForegroundColorIndex():int
getFormulaR1C1Local():string
setFormulaR1C1Local(formulaR1C1Local:string):void
setHasLeaderLines(hasLeaderLines:boolean):void
isApplyPictToEnd():boolean
getExplosion():int
setExplosion(explosion:int):void
getFormulaLocal():string
getFormulaR1C1():string
setFormulaLocal(formulaLocal:string):void
setFormulaR1C1(formulaR1C1:string):void
getValues():any
getBubbleSizes():any
setBubbleSizes(bubbleSizes:any):void
getErrorBars():powerpoint.ErrorBars
setHas3DEffect(has3dEffect:boolean):void
setHasDataLabels(hasDataLabels:boolean):void
setHasErrorBars(hasErrorBars:boolean):void
getLeaderLines():powerpoint.LeaderLines
getPlotOrder():int
setPlotOrder(plotOrder:int):void
setSmooth(smooth:boolean):void
setValues(values:any):void
getXValues():any
setXValues(xValues:any):void
dataLabels(index:any):any
trendlines(index:any):any
setIsFiltered(isFiltered:boolean):void
getPictureUnit2():double
setPictureUnit2(pictureUnit2:double):void
}
export interface SeriesCollection{
add(source:any,rowcol:int,seriesLabels:any,categoryLabels:any,replace:any):powerpoint.Series
item(index:any):powerpoint.Series
getCount():int
extend(source:any,rowcol:any,categoryLabels:any):void
newSeries():powerpoint.Series
}
export interface SeriesCollection{
add(source:any,rowcol:int,seriesLabels:any,categoryLabels:any,replace:any):powerpoint.Series
item(index:any):powerpoint.Series
getCount():int
extend(source:any,rowcol:any,categoryLabels:any):void
newSeries():powerpoint.Series
}
export interface SeriesLines{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
}
export interface SeriesLines{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
}
export interface SetEffect{
setProperty(property:int):void
getProperty():int
getTo():any
setTo(to:any):void
}
export interface SetEffect{
setProperty(property:int):void
getProperty():int
getTo():any
setTo(to:any):void
}
export interface ShadowFormat{
getType():int
getSize():float
setSize(size:float):void
setType(type:int):void
setVisible(visible:int):void
getForeColor():powerpoint.ColorFormat
getTransparency():float
setTransparency(transparency:float):void
getVisible():int
setForeColor(foreColor:powerpoint.ColorFormat):void
getStyle():int
setStyle(style:int):void
getObscured():int
setObscured(obscured:int):void
getOffsetX():float
setOffsetX(offsetX:float):void
getOffsetY():float
setOffsetY(offsetY:float):void
incrementOffsetX(increment:float):void
incrementOffsetY(increment:float):void
getBlur():float
setBlur(blur:float):void
getRotateWithShape():int
setRotateWithShape(rotateWithShape:int):void
}
export interface ShadowFormat{
getType():int
getSize():float
setSize(size:float):void
setType(type:int):void
setVisible(visible:int):void
getForeColor():powerpoint.ColorFormat
getTransparency():float
setTransparency(transparency:float):void
getVisible():int
setForeColor(foreColor:powerpoint.ColorFormat):void
getStyle():int
setStyle(style:int):void
getObscured():int
setObscured(obscured:int):void
getOffsetX():float
setOffsetX(offsetX:float):void
getOffsetY():float
setOffsetY(offsetY:float):void
incrementOffsetX(increment:float):void
incrementOffsetY(increment:float):void
getBlur():float
setBlur(blur:float):void
getRotateWithShape():int
setRotateWithShape(rotateWithShape:int):void
}
export interface Shape{
getName():string
apply():void
delete():void
setName(pName:string):void
getId():int
copy():void
getType():int
flip(flipCmd:int):void
getTable():powerpoint.Table
duplicate():powerpoint.ShapeRange
getScript():office.Script
setTitle(title:string):void
getTitle():string
getWidth():float
getLeft():float
setLeft(pLeft:float):void
setTop(top:float):void
getTop():float
setWidth(pWidth:float):void
getHeight():float
setHeight(pHeight:float):void
setVisible(pVisible:int):void
saveAs(savePath:string):void
cut():void
select(replace:int):void
getFill():powerpoint.FillFormat
getLine():powerpoint.LineFormat
getOLEFormat():powerpoint.OLEFormat
getVisible():int
getShadow():powerpoint.ShadowFormat
setLockAnchor(pLockAnchor:int):void
getTextFrame():powerpoint.TextFrame
getHasChart():int
getHasSmartArt():int
getPictureFormat():powerpoint.PictureFormat
getTextEffect():powerpoint.TextEffectFormat
getGroupItems():powerpoint.GroupShapes
setAlternativeText(pAlternativeText:string):void
getAlternativeText():string
setLockAspectRatio(pLockAspectRatio:int):void
getLockAspectRatio():int
getLinkFormat():powerpoint.LinkFormat
getDiagram():powerpoint.Diagram
ungroup():powerpoint.ShapeRange
getNodes():powerpoint.ShapeNodes
setShapesDefaultProperties():void
getAdjustments():powerpoint.Adjustments
getAutoShapeType():int
getCallout():powerpoint.CalloutFormat
getCanvasItems():powerpoint.CanvasShapes
getDiagramNode():powerpoint.DiagramNode
getHasDiagram():int
getLockAnchor():int
getParentGroup():powerpoint.Shape
getRotation():float
getThreeD():powerpoint.ThreeDFormat
getVerticalFlip():int
getVertices():any
setAutoShapeType(autoShapeType:int):void
setRotation(rotation:float):void
canvasCropBottom(increment:float):void
canvasCropLeft(increment:float):void
canvasCropRight(increment:float):void
canvasCropTop(increment:float):void
incrementLeft(increment:float):void
incrementTop(increment:float):void
scaleHeight(factor:float,relativeToOriginalSize:int,fScale:int):void
scaleWidth(factor:float,relativeToOriginalSize:int,fScale:int):void
getHasDiagramNode():int
getHorizontalFlip():int
getZOrderPosition():int
incrementRotation(increment:float):void
getChild():int
pickUp():void
zOrder(zOrderCmd:int):void
setShapeStyle(shapeStyle:int):void
getConnector():int
export(pathName:string,filter:int,scaleWidth:int,scaleHeight:int,exportMode:int):void
getChart():powerpoint.Chart
getTextFrame2():powerpoint.TextFrame2
getShapeStyle():int
getActionSettings():powerpoint.ActionSettings
getAnimationSettings():powerpoint.AnimationSettings
getPlaceholderFormat():powerpoint.PlaceholderFormat
convertTextToSmartArt(layout:office.SmartArtLayout):void
getBlackWhiteMode():int
setBlackWhiteMode(blackWhiteMode:int):void
getConnectionSiteCount():int
getConnectorFormat():powerpoint.ConnectorFormat
rerouteConnections():void
getHasTable():int
getHasTextFrame():int
getMediaFormat():powerpoint.MediaFormat
getMediaType():int
getReflection():office.ReflectionFormat
getSmartArt():office.SmartArt
getSoundFormat():powerpoint.SoundFormat
applyAnimation():void
pickupAnimation():void
upgradeMedia():void
getBackgroundStyle():int
setBackgroundStyle(backgroundStyle:int):void
getGlow():office.GlowFormat
getTags():powerpoint.Tags
getRTF():string
setRTF(rTF:string):void
getSoftEdge():office.SoftEdgeFormat
getCustomerData():powerpoint.CustomerData
}
export interface Shape{
getName():string
apply():void
delete():void
setName(pName:string):void
getId():int
copy():void
getType():int
flip(flipCmd:int):void
getTable():powerpoint.Table
duplicate():powerpoint.ShapeRange
getScript():office.Script
setTitle(title:string):void
getTitle():string
getWidth():float
getLeft():float
setLeft(pLeft:float):void
setTop(top:float):void
getTop():float
setWidth(pWidth:float):void
getHeight():float
setHeight(pHeight:float):void
setVisible(pVisible:int):void
saveAs(savePath:string):void
cut():void
select(replace:int):void
getFill():powerpoint.FillFormat
getLine():powerpoint.LineFormat
getOLEFormat():powerpoint.OLEFormat
getVisible():int
getShadow():powerpoint.ShadowFormat
setLockAnchor(pLockAnchor:int):void
getTextFrame():powerpoint.TextFrame
getHasChart():int
getHasSmartArt():int
getPictureFormat():powerpoint.PictureFormat
getTextEffect():powerpoint.TextEffectFormat
getGroupItems():powerpoint.GroupShapes
setAlternativeText(pAlternativeText:string):void
getAlternativeText():string
setLockAspectRatio(pLockAspectRatio:int):void
getLockAspectRatio():int
getLinkFormat():powerpoint.LinkFormat
getDiagram():powerpoint.Diagram
ungroup():powerpoint.ShapeRange
getNodes():powerpoint.ShapeNodes
setShapesDefaultProperties():void
getAdjustments():powerpoint.Adjustments
getAutoShapeType():int
getCallout():powerpoint.CalloutFormat
getCanvasItems():powerpoint.CanvasShapes
getDiagramNode():powerpoint.DiagramNode
getHasDiagram():int
getLockAnchor():int
getParentGroup():powerpoint.Shape
getRotation():float
getThreeD():powerpoint.ThreeDFormat
getVerticalFlip():int
getVertices():any
setAutoShapeType(autoShapeType:int):void
setRotation(rotation:float):void
canvasCropBottom(increment:float):void
canvasCropLeft(increment:float):void
canvasCropRight(increment:float):void
canvasCropTop(increment:float):void
incrementLeft(increment:float):void
incrementTop(increment:float):void
scaleHeight(factor:float,relativeToOriginalSize:int,fScale:int):void
scaleWidth(factor:float,relativeToOriginalSize:int,fScale:int):void
getHasDiagramNode():int
getHorizontalFlip():int
getZOrderPosition():int
incrementRotation(increment:float):void
getChild():int
pickUp():void
zOrder(zOrderCmd:int):void
setShapeStyle(shapeStyle:int):void
getConnector():int
export(pathName:string,filter:int,scaleWidth:int,scaleHeight:int,exportMode:int):void
getChart():powerpoint.Chart
getTextFrame2():powerpoint.TextFrame2
getShapeStyle():int
getActionSettings():powerpoint.ActionSettings
getAnimationSettings():powerpoint.AnimationSettings
getPlaceholderFormat():powerpoint.PlaceholderFormat
convertTextToSmartArt(layout:office.SmartArtLayout):void
getBlackWhiteMode():int
setBlackWhiteMode(blackWhiteMode:int):void
getConnectionSiteCount():int
getConnectorFormat():powerpoint.ConnectorFormat
rerouteConnections():void
getHasTable():int
getHasTextFrame():int
getMediaFormat():powerpoint.MediaFormat
getMediaType():int
getReflection():office.ReflectionFormat
getSmartArt():office.SmartArt
getSoundFormat():powerpoint.SoundFormat
applyAnimation():void
pickupAnimation():void
upgradeMedia():void
getBackgroundStyle():int
setBackgroundStyle(backgroundStyle:int):void
getGlow():office.GlowFormat
getTags():powerpoint.Tags
getRTF():string
setRTF(rTF:string):void
getSoftEdge():office.SoftEdgeFormat
getCustomerData():powerpoint.CustomerData
}
export interface ShapeNode{
getEditingType():int
getPoints():any
getSegmentType():int
}
export interface ShapeNode{
getEditingType():int
getPoints():any
getSegmentType():int
}
export interface ShapeNodes{
delete(index:int):void
insert(index:int,segmentType:int,editingType:int,x1:float,y1:float,x2:float,y2:float,x3:float,y3:float):void
item(index:any):powerpoint.ShapeNode
getCount():int
setPosition(index:int,x1:float,y1:float):void
setEditingType(index:int,editingType:int):void
setSegmentType(index:int,segmentType:int):void
}
export interface ShapeNodes{
delete(index:int):void
insert(index:int,segmentType:int,editingType:int,x1:float,y1:float,x2:float,y2:float,x3:float,y3:float):void
item(index:any):powerpoint.ShapeNode
getCount():int
setPosition(index:int,x1:float,y1:float):void
setEditingType(index:int,editingType:int):void
setSegmentType(index:int,segmentType:int):void
}
export interface ShapeRange{
group():powerpoint.Shape
getName():string
apply():void
delete():void
setName(name:string):void
getId():int
copy():void
getType():int
flip(flipCmd:int):void
getTable():powerpoint.Table
duplicate():powerpoint.ShapeRange
getScript():office.Script
item(index:any):powerpoint.Shape
getCount():int
setTitle(title:string):void
getTitle():string
getWidth():float
getLeft():float
setLeft(left:float):void
setTop(top:float):void
getTop():float
setWidth(width:float):void
activate():void
getHeight():float
setHeight(height:float):void
setVisible(pVisible:int):void
cut():void
select(replace:int):void
align(alignCmd:int,relativeTo:int):void
getFill():powerpoint.FillFormat
getLine():powerpoint.LineFormat
getOLEFormat():powerpoint.OLEFormat
getVisible():int
getShadow():powerpoint.ShadowFormat
getTextFrame():powerpoint.TextFrame
getHasChart():int
getHasSmartArt():int
getPictureFormat():powerpoint.PictureFormat
getTextEffect():powerpoint.TextEffectFormat
getGroupItems():powerpoint.GroupShapes
setAlternativeText(pAlternativeText:string):void
getAlternativeText():string
setLockAspectRatio(lockAspectRatio:int):void
getLockAspectRatio():int
getLinkFormat():powerpoint.LinkFormat
getDiagram():powerpoint.Diagram
ungroup():powerpoint.ShapeRange
getNodes():powerpoint.ShapeNodes
setShapesDefaultProperties():void
regroup():powerpoint.Shape
getAdjustments():powerpoint.Adjustments
getAutoShapeType():int
getCallout():powerpoint.CalloutFormat
getCanvasItems():powerpoint.CanvasShapes
getDiagramNode():powerpoint.DiagramNode
getHasDiagram():int
getParentGroup():powerpoint.Shape
getRotation():float
getThreeD():powerpoint.ThreeDFormat
getVerticalFlip():int
getVertices():any
setAutoShapeType(autoShapeType:int):void
setRotation(rotation:float):void
canvasCropBottom(increment:float):void
canvasCropLeft(increment:float):void
canvasCropRight(increment:float):void
canvasCropTop(increment:float):void
incrementLeft(increment:float):void
incrementTop(increment:float):void
scaleHeight(factor:float,relativeToOriginalSize:int,fScale:int):void
scaleWidth(factor:float,relativeToOriginalSize:int,fScale:int):void
distribute(distributeCmd:int,relativeTo:int):void
getHasDiagramNode():int
getHorizontalFlip():int
getZOrderPosition():int
incrementRotation(increment:float):void
getChild():int
pickUp():void
zOrder(zOrderCmd:int):void
setShapeStyle(shapeStyle:int):void
getConnector():int
export(pathName:string,filter:int,scaleWidth:int,scaleHeight:int,exportMode:int):void
getChart():powerpoint.Chart
getTextFrame2():powerpoint.TextFrame2
getShapeStyle():int
getActionSettings():powerpoint.ActionSettings
getAnimationSettings():powerpoint.AnimationSettings
getPlaceholderFormat():powerpoint.PlaceholderFormat
convertTextToSmartArt(layout:office.SmartArtLayout):void
getBlackWhiteMode():int
setBlackWhiteMode(blackWhiteMode:int):void
getConnectionSiteCount():int
getConnectorFormat():powerpoint.ConnectorFormat
rerouteConnections():void
getHasTable():int
getHasTextFrame():int
getMediaFormat():powerpoint.MediaFormat
getMediaType():int
getReflection():office.ReflectionFormat
getSmartArt():office.SmartArt
getSoundFormat():powerpoint.SoundFormat
applyAnimation():void
pickupAnimation():void
upgradeMedia():void
mergeShapes(mergeCmd:int,primaryShape:powerpoint.Shape):void
getBackgroundStyle():int
setBackgroundStyle(backgroundStyle:int):void
getGlow():office.GlowFormat
getTags():powerpoint.Tags
getRTF():string
setRTF(rTF:string):void
getSoftEdge():office.SoftEdgeFormat
getCustomerData():powerpoint.CustomerData
}
export interface ShapeRange{
group():powerpoint.Shape
getName():string
apply():void
delete():void
setName(name:string):void
getId():int
copy():void
getType():int
flip(flipCmd:int):void
getTable():powerpoint.Table
duplicate():powerpoint.ShapeRange
getScript():office.Script
item(index:any):powerpoint.Shape
getCount():int
setTitle(title:string):void
getTitle():string
getWidth():float
getLeft():float
setLeft(left:float):void
setTop(top:float):void
getTop():float
setWidth(width:float):void
activate():void
getHeight():float
setHeight(height:float):void
setVisible(pVisible:int):void
cut():void
select(replace:int):void
align(alignCmd:int,relativeTo:int):void
getFill():powerpoint.FillFormat
getLine():powerpoint.LineFormat
getOLEFormat():powerpoint.OLEFormat
getVisible():int
getShadow():powerpoint.ShadowFormat
getTextFrame():powerpoint.TextFrame
getHasChart():int
getHasSmartArt():int
getPictureFormat():powerpoint.PictureFormat
getTextEffect():powerpoint.TextEffectFormat
getGroupItems():powerpoint.GroupShapes
setAlternativeText(pAlternativeText:string):void
getAlternativeText():string
setLockAspectRatio(lockAspectRatio:int):void
getLockAspectRatio():int
getLinkFormat():powerpoint.LinkFormat
getDiagram():powerpoint.Diagram
ungroup():powerpoint.ShapeRange
getNodes():powerpoint.ShapeNodes
setShapesDefaultProperties():void
regroup():powerpoint.Shape
getAdjustments():powerpoint.Adjustments
getAutoShapeType():int
getCallout():powerpoint.CalloutFormat
getCanvasItems():powerpoint.CanvasShapes
getDiagramNode():powerpoint.DiagramNode
getHasDiagram():int
getParentGroup():powerpoint.Shape
getRotation():float
getThreeD():powerpoint.ThreeDFormat
getVerticalFlip():int
getVertices():any
setAutoShapeType(autoShapeType:int):void
setRotation(rotation:float):void
canvasCropBottom(increment:float):void
canvasCropLeft(increment:float):void
canvasCropRight(increment:float):void
canvasCropTop(increment:float):void
incrementLeft(increment:float):void
incrementTop(increment:float):void
scaleHeight(factor:float,relativeToOriginalSize:int,fScale:int):void
scaleWidth(factor:float,relativeToOriginalSize:int,fScale:int):void
distribute(distributeCmd:int,relativeTo:int):void
getHasDiagramNode():int
getHorizontalFlip():int
getZOrderPosition():int
incrementRotation(increment:float):void
getChild():int
pickUp():void
zOrder(zOrderCmd:int):void
setShapeStyle(shapeStyle:int):void
getConnector():int
export(pathName:string,filter:int,scaleWidth:int,scaleHeight:int,exportMode:int):void
getChart():powerpoint.Chart
getTextFrame2():powerpoint.TextFrame2
getShapeStyle():int
getActionSettings():powerpoint.ActionSettings
getAnimationSettings():powerpoint.AnimationSettings
getPlaceholderFormat():powerpoint.PlaceholderFormat
convertTextToSmartArt(layout:office.SmartArtLayout):void
getBlackWhiteMode():int
setBlackWhiteMode(blackWhiteMode:int):void
getConnectionSiteCount():int
getConnectorFormat():powerpoint.ConnectorFormat
rerouteConnections():void
getHasTable():int
getHasTextFrame():int
getMediaFormat():powerpoint.MediaFormat
getMediaType():int
getReflection():office.ReflectionFormat
getSmartArt():office.SmartArt
getSoundFormat():powerpoint.SoundFormat
applyAnimation():void
pickupAnimation():void
upgradeMedia():void
mergeShapes(mergeCmd:int,primaryShape:powerpoint.Shape):void
getBackgroundStyle():int
setBackgroundStyle(backgroundStyle:int):void
getGlow():office.GlowFormat
getTags():powerpoint.Tags
getRTF():string
setRTF(rTF:string):void
getSoftEdge():office.SoftEdgeFormat
getCustomerData():powerpoint.CustomerData
}
export interface Shapes{
range(index:any):powerpoint.ShapeRange
item(index:any):powerpoint.Shape
getCount():int
getTitle():powerpoint.Shape
paste():powerpoint.ShapeRange
getRange():powerpoint.ShapeRange
addCallout(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addConnector(type:int,beginX:float,beginY:float,endX:float,endY:float):powerpoint.Shape
addPicture(fileName:string,linkToFile:int,saveWithDocument:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addPolyline(safeArrayOfPoints:any):powerpoint.Shape
addTextbox(orientation:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addTextEffect(presetTextEffect:int,text:string,fontName:string,fontSize:float,fontBold:int,fontItalic:int,left:float,top:float):powerpoint.Shape
buildFreeform(editingType:int,x1:float,y1:float):powerpoint.FreeformBuilder
selectAll():void
addCurve(safeArrayOfPoints:any):powerpoint.Shape
addLabel(orientation:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addLine(beginX:float,beginY:float,endX:float,endY:float):powerpoint.Shape
addShape(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
pasteSpecial(dataType:int,displayAsIcon:int,iconFileName:string,iconIndex:int,iconLabel:string,link:int):powerpoint.ShapeRange
addOLEObject(left:float,top:float,width:float,height:float,className:string,fileName:string,displayAsIcon:int,iconFileName:string,iconIndex:int,iconLabel:string,link:int):powerpoint.Shape
addCanvas(left:float,top:float,width:float,height:float):powerpoint.Shape
addDiagram(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addChart(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addMediaObject(fileNamefloat:string,left:float,top:float,width:float,height:float):powerpoint.Shape
addPlaceholder(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addPicture2(fileName:string,linkToFile:int,saveWithDocument:int,left:float,top:float,width:float,height:float,compress:int):powerpoint.Shape
addMediaObject2(fileName:string,linkToFile:int,saveWithDocument:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addTitle():powerpoint.Shape
addMediaObjectFromEmbedTag(embedTag:string,left:float,top:float,width:float,height:float):powerpoint.Shape
getHasTitle():int
getPlaceholders():powerpoint.Placeholders
addChart2(style:int,type:int,left:float,top:float,width:float,height:float,newLayout:boolean):powerpoint.Shape
addSmartArt(layout:office.SmartArtLayout,left:float,top:float,width:float,height:float):powerpoint.Shape
addTable(numRows:int,numColumns:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addComment(left:float,top:float,width:float,height:float):powerpoint.Shape
}
export interface Shapes{
range(index:any):powerpoint.ShapeRange
item(index:any):powerpoint.Shape
getCount():int
getTitle():powerpoint.Shape
paste():powerpoint.ShapeRange
getRange():powerpoint.ShapeRange
addCallout(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addConnector(type:int,beginX:float,beginY:float,endX:float,endY:float):powerpoint.Shape
addPicture(fileName:string,linkToFile:int,saveWithDocument:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addPolyline(safeArrayOfPoints:any):powerpoint.Shape
addTextbox(orientation:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addTextEffect(presetTextEffect:int,text:string,fontName:string,fontSize:float,fontBold:int,fontItalic:int,left:float,top:float):powerpoint.Shape
buildFreeform(editingType:int,x1:float,y1:float):powerpoint.FreeformBuilder
selectAll():void
addCurve(safeArrayOfPoints:any):powerpoint.Shape
addLabel(orientation:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addLine(beginX:float,beginY:float,endX:float,endY:float):powerpoint.Shape
addShape(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
pasteSpecial(dataType:int,displayAsIcon:int,iconFileName:string,iconIndex:int,iconLabel:string,link:int):powerpoint.ShapeRange
addOLEObject(left:float,top:float,width:float,height:float,className:string,fileName:string,displayAsIcon:int,iconFileName:string,iconIndex:int,iconLabel:string,link:int):powerpoint.Shape
addCanvas(left:float,top:float,width:float,height:float):powerpoint.Shape
addDiagram(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addChart(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addMediaObject(fileNamefloat:string,left:float,top:float,width:float,height:float):powerpoint.Shape
addPlaceholder(type:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addPicture2(fileName:string,linkToFile:int,saveWithDocument:int,left:float,top:float,width:float,height:float,compress:int):powerpoint.Shape
addMediaObject2(fileName:string,linkToFile:int,saveWithDocument:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addTitle():powerpoint.Shape
addMediaObjectFromEmbedTag(embedTag:string,left:float,top:float,width:float,height:float):powerpoint.Shape
getHasTitle():int
getPlaceholders():powerpoint.Placeholders
addChart2(style:int,type:int,left:float,top:float,width:float,height:float,newLayout:boolean):powerpoint.Shape
addSmartArt(layout:office.SmartArtLayout,left:float,top:float,width:float,height:float):powerpoint.Shape
addTable(numRows:int,numColumns:int,left:float,top:float,width:float,height:float):powerpoint.Shape
addComment(left:float,top:float,width:float,height:float):powerpoint.Shape
}
export const enum SldEvents{
//clsid=
}
export const enum SldEvents{
//clsid=
}
export interface Slide{
getName():string
delete():void
setName(name:string):void
copy():void
duplicate():powerpoint.SlideRange
setLayout(layout:int):void
getBackground():powerpoint.ShapeRange
getLayout():int
getNativeHandle():int
setNativeHandle(handle:int):void
cut():void
createPreviewPicForOle():string
select():void
getScripts():office.Scripts
getShapes():powerpoint.Shapes
applyTheme(themeName:string):void
getComments():powerpoint.Comments
getHyperlinks():powerpoint.Hyperlinks
export(fileName:string,filterName:string,scaleWidth:int,scaleHeight:int):void
getFollowMasterBackground():int
setFollowMasterBackground(followMasterBackground:int):void
applyThemeColorScheme(themeColorSchemeName:string):void
moveToSectionStart(toSection:int):void
applyTemplate(fileName:string,variantGUID:string):void
applyTemplate(fileName:string):void
publishSlides(slideLibraryUrl:string,overwrite:boolean,useSlideOrder:boolean):void
getCustomLayout():powerpoint.CustomLayout
setCustomLayout(customLayout:powerpoint.CustomLayout):void
setDesign(design:powerpoint.Design):void
getHasNotesPage():int
getMaster():powerpoint.Master
getNotesPage():powerpoint.SlideRange
getPrintSteps():int
getsectionIndex():int
getSectionNumber():int
getSlideID():int
getSlideIndex():int
getDisplayMasterShapes():int
setDisplayMasterShapes(displayMasterShapes:int):void
getHeadersFooters():powerpoint.HeadersFooters
getSlideShowTransition():powerpoint.SlideShowTransition
getThemeColorScheme():office.ThemeColorScheme
getBackgroundStyle():int
setBackgroundStyle(backgroundStyle:int):void
moveTo(toPos:int):void
getTags():powerpoint.Tags
getCustomerData():powerpoint.CustomerData
getDesign():powerpoint.Design
getTimeLine():powerpoint.TimeLine
getSlideNumber():int
getColorScheme():powerpoint.ColorScheme
setColorScheme(colorScheme:powerpoint.ColorScheme):void
}
export interface Slide{
getName():string
delete():void
setName(name:string):void
copy():void
duplicate():powerpoint.SlideRange
setLayout(layout:int):void
getBackground():powerpoint.ShapeRange
getLayout():int
getNativeHandle():int
setNativeHandle(handle:int):void
cut():void
createPreviewPicForOle():string
select():void
getScripts():office.Scripts
getShapes():powerpoint.Shapes
applyTheme(themeName:string):void
getComments():powerpoint.Comments
getHyperlinks():powerpoint.Hyperlinks
export(fileName:string,filterName:string,scaleWidth:int,scaleHeight:int):void
getFollowMasterBackground():int
setFollowMasterBackground(followMasterBackground:int):void
applyThemeColorScheme(themeColorSchemeName:string):void
moveToSectionStart(toSection:int):void
applyTemplate(fileName:string,variantGUID:string):void
applyTemplate(fileName:string):void
publishSlides(slideLibraryUrl:string,overwrite:boolean,useSlideOrder:boolean):void
getCustomLayout():powerpoint.CustomLayout
setCustomLayout(customLayout:powerpoint.CustomLayout):void
setDesign(design:powerpoint.Design):void
getHasNotesPage():int
getMaster():powerpoint.Master
getNotesPage():powerpoint.SlideRange
getPrintSteps():int
getsectionIndex():int
getSectionNumber():int
getSlideID():int
getSlideIndex():int
getDisplayMasterShapes():int
setDisplayMasterShapes(displayMasterShapes:int):void
getHeadersFooters():powerpoint.HeadersFooters
getSlideShowTransition():powerpoint.SlideShowTransition
getThemeColorScheme():office.ThemeColorScheme
getBackgroundStyle():int
setBackgroundStyle(backgroundStyle:int):void
moveTo(toPos:int):void
getTags():powerpoint.Tags
getCustomerData():powerpoint.CustomerData
getDesign():powerpoint.Design
getTimeLine():powerpoint.TimeLine
getSlideNumber():int
getColorScheme():powerpoint.ColorScheme
setColorScheme(colorScheme:powerpoint.ColorScheme):void
}
export interface SlideNavigation{
isVisible():boolean
setVisible(visible:boolean):void
}
export interface SlideNavigation{
isVisible():boolean
setVisible(visible:boolean):void
}
export interface SlideRange{
getName():string
delete():void
setName(name:string):void
copy():void
duplicate():powerpoint.SlideRange
setLayout(layout:int):void
item(index:any):powerpoint.Slide
getBackground():powerpoint.ShapeRange
getLayout():int
getCount():int
cut():void
select():void
getScripts():office.Scripts
getShapes():powerpoint.Shapes
applyTheme(themeName:string):void
getComments():powerpoint.Comments
getHyperlinks():powerpoint.Hyperlinks
export(fileName:string,filterName:string,scaleWidth:int,scaleHeight:int):void
getFollowMasterBackground():int
setFollowMasterBackground(followMasterBackground:int):void
applyThemeColorScheme(themeColorSchemeName:string):void
moveToSectionStart(toSection:int):void
applyTemplate(fileName:string):void
publishSlides(slideLibraryUrl:string,overwrite:boolean,useSlideOrder:boolean):void
applyTemplate2(fileName:string,variantGUID:string):void
getCustomLayout():powerpoint.CustomLayout
setCustomLayout(customLayout:powerpoint.CustomLayout):void
setDesign(design:powerpoint.Design):void
getHasNotesPage():int
getMaster():powerpoint.Master
getNotesPage():powerpoint.SlideRange
getPrintSteps():int
getsectionIndex():int
getSectionNumber():int
getSlideID():int
getSlideIndex():int
getDisplayMasterShapes():int
setDisplayMasterShapes(displayMasterShapes:int):void
getHeadersFooters():powerpoint.HeadersFooters
getSlideShowTransition():powerpoint.SlideShowTransition
getThemeColorScheme():office.ThemeColorScheme
getBackgroundStyle():int
setBackgroundStyle(backgroundStyle:int):void
moveTo(toPos:int):void
getTags():powerpoint.Tags
getCustomerData():powerpoint.CustomerData
getDesign():powerpoint.Design
getTimeLine():powerpoint.TimeLine
getSlideNumber():int
getColorScheme():powerpoint.ColorScheme
setColorScheme(colorScheme:powerpoint.ColorScheme):void
}
export interface SlideRange{
getName():string
delete():void
setName(name:string):void
copy():void
duplicate():powerpoint.SlideRange
setLayout(layout:int):void
item(index:any):powerpoint.Slide
getBackground():powerpoint.ShapeRange
getLayout():int
getCount():int
cut():void
select():void
getScripts():office.Scripts
getShapes():powerpoint.Shapes
applyTheme(themeName:string):void
getComments():powerpoint.Comments
getHyperlinks():powerpoint.Hyperlinks
export(fileName:string,filterName:string,scaleWidth:int,scaleHeight:int):void
getFollowMasterBackground():int
setFollowMasterBackground(followMasterBackground:int):void
applyThemeColorScheme(themeColorSchemeName:string):void
moveToSectionStart(toSection:int):void
applyTemplate(fileName:string):void
publishSlides(slideLibraryUrl:string,overwrite:boolean,useSlideOrder:boolean):void
applyTemplate2(fileName:string,variantGUID:string):void
getCustomLayout():powerpoint.CustomLayout
setCustomLayout(customLayout:powerpoint.CustomLayout):void
setDesign(design:powerpoint.Design):void
getHasNotesPage():int
getMaster():powerpoint.Master
getNotesPage():powerpoint.SlideRange
getPrintSteps():int
getsectionIndex():int
getSectionNumber():int
getSlideID():int
getSlideIndex():int
getDisplayMasterShapes():int
setDisplayMasterShapes(displayMasterShapes:int):void
getHeadersFooters():powerpoint.HeadersFooters
getSlideShowTransition():powerpoint.SlideShowTransition
getThemeColorScheme():office.ThemeColorScheme
getBackgroundStyle():int
setBackgroundStyle(backgroundStyle:int):void
moveTo(toPos:int):void
getTags():powerpoint.Tags
getCustomerData():powerpoint.CustomerData
getDesign():powerpoint.Design
getTimeLine():powerpoint.TimeLine
getSlideNumber():int
getColorScheme():powerpoint.ColorScheme
setColorScheme(colorScheme:powerpoint.ColorScheme):void
}
export interface Slides{
add(index:int,layout:int):powerpoint.Slide
range(index:any):powerpoint.SlideRange
item(index:any):powerpoint.Slide
getCount():int
paste(index:any):powerpoint.SlideRange
createSlide(mSlide:any):powerpoint.Slide
findBySlideID(slideID:int):powerpoint.Slide
insertFromFile(fileName:string,index:int,slideStart:int,slideEnd:int):int
addSlide(index:int,pCustomLayout:powerpoint.CustomLayout):powerpoint.Slide
getActiveSlide():powerpoint.Slide
}
export interface Slides{
add(index:int,layout:int):powerpoint.Slide
range(index:any):powerpoint.SlideRange
item(index:any):powerpoint.Slide
getCount():int
paste(index:any):powerpoint.SlideRange
createSlide(mSlide:any):powerpoint.Slide
findBySlideID(slideID:int):powerpoint.Slide
insertFromFile(fileName:string,index:int,slideStart:int,slideEnd:int):int
addSlide(index:int,pCustomLayout:powerpoint.CustomLayout):powerpoint.Slide
getActiveSlide():powerpoint.Slide
}
export interface SlideShowSettings{
run():powerpoint.SlideShowWindow
getNamedSlideShows():powerpoint.NamedSlideShows
getShowMediaControls():int
setShowMediaControls(showMediaControls:int):void
getShowPresenterView():int
setShowPresenterView(showPresenterView:int):void
getShowWithAnimation():int
setShowWithAnimation(showWithAnimation:int):void
getShowWithNarration():int
setShowWithNarration(showWithNarration:int):void
getDefaultColor(colorFormat:powerpoint.ColorFormat):any
getRangeType():int
setRangeType(rangeType:int):void
getEndingSlide():int
setEndingSlide(endingSlide:int):void
getPointerColor():powerpoint.ColorFormat
setStartingSlide(startingSlide:int):void
getShowScrollbar():int
setShowScrollbar(showScrollbar:int):void
getShowType():int
setShowType(showType:int):void
getStartingSlide():int
getLoopUntilStopped():int
setLoopUntilStopped(loopUntilStopped:int):void
getSlideShowName():string
setSlideShowName(slideShowName:string):void
getAdvanceMode():int
setAdvanceMode(advanceMode:int):void
getObjectColor(colorFormat:powerpoint.ColorFormat):any
setObjectColor(colorFormat:powerpoint.ColorFormat,rgb:int):void
}
export interface SlideShowSettings{
run():powerpoint.SlideShowWindow
getNamedSlideShows():powerpoint.NamedSlideShows
getShowMediaControls():int
setShowMediaControls(showMediaControls:int):void
getShowPresenterView():int
setShowPresenterView(showPresenterView:int):void
getShowWithAnimation():int
setShowWithAnimation(showWithAnimation:int):void
getShowWithNarration():int
setShowWithNarration(showWithNarration:int):void
getDefaultColor(colorFormat:powerpoint.ColorFormat):any
getRangeType():int
setRangeType(rangeType:int):void
getEndingSlide():int
setEndingSlide(endingSlide:int):void
getPointerColor():powerpoint.ColorFormat
setStartingSlide(startingSlide:int):void
getShowScrollbar():int
setShowScrollbar(showScrollbar:int):void
getShowType():int
setShowType(showType:int):void
getStartingSlide():int
getLoopUntilStopped():int
setLoopUntilStopped(loopUntilStopped:int):void
getSlideShowName():string
setSlideShowName(slideShowName:string):void
getAdvanceMode():int
setAdvanceMode(advanceMode:int):void
getObjectColor(colorFormat:powerpoint.ColorFormat):any
setObjectColor(colorFormat:powerpoint.ColorFormat,rgb:int):void
}
export interface SlideShowTransition{
getHidden():int
setHidden(hidden:int):void
getAdvanceOnClick():int
setAdvanceOnClick(advanceOnClick:int):void
getLoopSoundUntilNext():int
setLoopSoundUntilNext(loopSoundUntilNext:int):void
getAdvanceOnTime():int
setAdvanceOnTime(advanceOnTime:int):void
getDuration():float
setDuration(duration:float):void
getSpeed():int
setSpeed(speed:int):void
getSoundEffect():powerpoint.SoundEffect
getAdvanceTime():float
setAdvanceTime(advanceTime:float):void
getEntryEffect():int
setEntryEffect(entryEffect:int):void
}
export interface SlideShowTransition{
getHidden():int
setHidden(hidden:int):void
getAdvanceOnClick():int
setAdvanceOnClick(advanceOnClick:int):void
getLoopSoundUntilNext():int
setLoopSoundUntilNext(loopSoundUntilNext:int):void
getAdvanceOnTime():int
setAdvanceOnTime(advanceOnTime:int):void
getDuration():float
setDuration(duration:float):void
getSpeed():int
setSpeed(speed:int):void
getSoundEffect():powerpoint.SoundEffect
getAdvanceTime():float
setAdvanceTime(advanceTime:float):void
getEntryEffect():int
setEntryEffect(entryEffect:int):void
}
export interface SlideShowView{
exit():void
next():void
first():void
getState():int
previous():void
last():void
getClickCount():int
setState(state:int):void
getZoom():int
getAcceleratorsEnabled():int
setAcceleratorsEnabled(acceleratorsEnabled:int):void
getCurrentShowPosition():int
getLastSlideViewed():powerpoint.Slide
getMediaControlsHeight():float
getMediaControlsLeft():float
getMediaControlsTop():float
getMediaControlsVisible():int
getMediaControlsWidth():float
getSlideElapsedTime():float
setSlideElapsedTime(slideElapsedTime:float):void
getPointerColor():powerpoint.ColorFormat
getIsNamedShow():int
getPointerType():int
setPointerType(pointerType:int):void
endNamedShow():void
eraseDrawing():void
getClickIndex():int
gotoClick(index:int):void
gotoNamedShow(slideShowName:string):void
gotoSlide(index:int,resetSlide:int):void
installTracker(pTracker:powerpoint.MouseTracker,presenter:int):void
resetSlideTime():void
getPresentationElapsedTime():float
firstAnimationIsAutomatic():boolean
getSlide():powerpoint.Slide
drawLine(beginX:float,beginY:float,endX:float,endY:float):void
player(shapeId:any):powerpoint.Player
getSlideShowName():string
getAdvanceMode():int
}
export interface SlideShowView{
exit():void
next():void
first():void
getState():int
previous():void
last():void
getClickCount():int
setState(state:int):void
getZoom():int
getAcceleratorsEnabled():int
setAcceleratorsEnabled(acceleratorsEnabled:int):void
getCurrentShowPosition():int
getLastSlideViewed():powerpoint.Slide
getMediaControlsHeight():float
getMediaControlsLeft():float
getMediaControlsTop():float
getMediaControlsVisible():int
getMediaControlsWidth():float
getSlideElapsedTime():float
setSlideElapsedTime(slideElapsedTime:float):void
getPointerColor():powerpoint.ColorFormat
getIsNamedShow():int
getPointerType():int
setPointerType(pointerType:int):void
endNamedShow():void
eraseDrawing():void
getClickIndex():int
gotoClick(index:int):void
gotoNamedShow(slideShowName:string):void
gotoSlide(index:int,resetSlide:int):void
installTracker(pTracker:powerpoint.MouseTracker,presenter:int):void
resetSlideTime():void
getPresentationElapsedTime():float
firstAnimationIsAutomatic():boolean
getSlide():powerpoint.Slide
drawLine(beginX:float,beginY:float,endX:float,endY:float):void
player(shapeId:any):powerpoint.Player
getSlideShowName():string
getAdvanceMode():int
}
export interface SlideShowWindow{
getWidth():float
getLeft():float
setLeft(left:float):void
setTop(top:float):void
getTop():float
setWidth(width:float):void
activate():void
getHeight():float
setHeight(height:float):void
getActive():int
getView():powerpoint.SlideShowView
getPresentation():powerpoint.Presentation
getSlideNavigation():powerpoint.SlideNavigation
getIsFullScreen():int
}
export interface SlideShowWindow{
getWidth():float
getLeft():float
setLeft(left:float):void
setTop(top:float):void
getTop():float
setWidth(width:float):void
activate():void
getHeight():float
setHeight(height:float):void
getActive():int
getView():powerpoint.SlideShowView
getPresentation():powerpoint.Presentation
getSlideNavigation():powerpoint.SlideNavigation
getIsFullScreen():int
}
export interface SlideShowWindows{
item(index:int):powerpoint.SlideShowWindow
getCount():int
}
export interface SlideShowWindows{
item(index:int):powerpoint.SlideShowWindow
getCount():int
}
export interface SoundEffect{
getName():string
setName(name:string):void
getType():int
setType(type:int):void
importFromFile(fileName:string):void
play():void
}
export interface SoundEffect{
getName():string
setName(name:string):void
getType():int
setType(type:int):void
importFromFile(fileName:string):void
play():void
}
export interface SoundFormat{
getType():int
getSourceFullName():string
export(fileName:string):int
yozoImport(filename:string):void
play():void
}
export interface SoundFormat{
getType():int
getSourceFullName():string
export(fileName:string):int
yozoImport(filename:string):void
play():void
}
export interface Table{
getBackground():powerpoint.TableBackground
setTitle(title:string):void
getTitle():string
cell(row:int,column:int):powerpoint.Cell
getColumns():powerpoint.Columns
getRows():powerpoint.Rows
setAlternativeText(alternativeText:string):void
getAlternativeText():string
getStyle():powerpoint.TableStyle
getTableDirection():int
setTableDirection(tableDirection:int):void
scaleProportionally(scale:float):void
applyStyle(styleID:string,saveFormatting:boolean):void
isFirstCol():boolean
setFirstCol(firstCol:boolean):void
isFirstRow():boolean
setFirstRow(firstRow:boolean):void
isHorizBanding():boolean
setHorizBanding(horizBanding:boolean):void
isLastCol():boolean
setLastCol(lastCol:boolean):void
isLastRow():boolean
setLastRow(lastRow:boolean):void
isVertBanding():boolean
setVertBanding(vertBanding:boolean):void
mergeBorders():void
}
export interface Table{
getBackground():powerpoint.TableBackground
setTitle(title:string):void
getTitle():string
cell(row:int,column:int):powerpoint.Cell
getColumns():powerpoint.Columns
getRows():powerpoint.Rows
setAlternativeText(alternativeText:string):void
getAlternativeText():string
getStyle():powerpoint.TableStyle
getTableDirection():int
setTableDirection(tableDirection:int):void
scaleProportionally(scale:float):void
applyStyle(styleID:string,saveFormatting:boolean):void
isFirstCol():boolean
setFirstCol(firstCol:boolean):void
isFirstRow():boolean
setFirstRow(firstRow:boolean):void
isHorizBanding():boolean
setHorizBanding(horizBanding:boolean):void
isLastCol():boolean
setLastCol(lastCol:boolean):void
isLastRow():boolean
setLastRow(lastRow:boolean):void
isVertBanding():boolean
setVertBanding(vertBanding:boolean):void
mergeBorders():void
}
export interface TableBackground{
getFill():powerpoint.FillFormat
getShadow():powerpoint.ShadowFormat
getPicture():powerpoint.PictureFormat
getReflection():office.ReflectionFormat
}
export interface TableBackground{
getFill():powerpoint.FillFormat
getShadow():powerpoint.ShadowFormat
getPicture():powerpoint.PictureFormat
getReflection():office.ReflectionFormat
}
export interface TableStyle{
getName():string
getId():string
}
export interface TableStyle{
getName():string
getId():string
}
export interface TabStop{
clear():void
getType():int
setType(type:int):void
setPosition(position:float):void
getPosition():float
}
export interface TabStop{
clear():void
getType():int
setType(type:int):void
setPosition(position:float):void
getPosition():float
}
export interface TabStops{
add(type:int,position:float):powerpoint.TabStop
item(index:int):powerpoint.TabStop
getCount():int
getDefaultSpacing():float
setDefaultSpacing(defaultSpacing:float):void
}
export interface TabStops{
add(type:int,position:float):powerpoint.TabStop
item(index:int):powerpoint.TabStop
getCount():int
getDefaultSpacing():float
setDefaultSpacing(defaultSpacing:float):void
}
export interface Tags{
name(index:int):string
add(name:string,value:string):void
value(index:int):string
delete(name:string):void
item(name:string):string
getCount():int
addBinary(name:string,filePath:string):void
binaryValue(name:string):int
}
export interface Tags{
name(index:int):string
add(name:string,value:string):void
value(index:int):string
delete(name:string):void
item(name:string):string
getCount():int
addBinary(name:string,filePath:string):void
binaryValue(name:string):int
}
export interface TextEffectFormat{
getText():string
setFontSize(fontSize:float):void
setText(text:string):void
getAlignment():int
setAlignment(alignment:int):void
getFontName():string
setFontName(fontName:string):void
setNormalizedHeight(normalizedHeight:int):void
getNormalizedHeight():int
setPresetTextEffect(presetTextEffect:int):void
getPresetTextEffect():int
toggleVerticalText():void
setFontBold(fontBold:int):void
getFontBold():int
setFontItalic(fontItalic:int):void
getFontItalic():int
getFontSize():float
setKernedPairs(kernedPairs:int):void
setPresetShape(presetShape:int):void
getPresetShape():int
setRotatedChars(rotatedChars:int):void
getRotatedChars():int
setTracking(tracking:float):void
getTracking():float
getKernedPairs():int
}
export interface TextEffectFormat{
getText():string
setFontSize(fontSize:float):void
setText(text:string):void
getAlignment():int
setAlignment(alignment:int):void
getFontName():string
setFontName(fontName:string):void
setNormalizedHeight(normalizedHeight:int):void
getNormalizedHeight():int
setPresetTextEffect(presetTextEffect:int):void
getPresetTextEffect():int
toggleVerticalText():void
setFontBold(fontBold:int):void
getFontBold():int
setFontItalic(fontItalic:int):void
getFontItalic():int
getFontSize():float
setKernedPairs(kernedPairs:int):void
setPresetShape(presetShape:int):void
getPresetShape():int
setRotatedChars(rotatedChars:int):void
getRotatedChars():int
setTracking(tracking:float):void
getTracking():float
getKernedPairs():int
}
export interface TextFrame{
getOrientation():int
setAutoSize(autoSize:int):void
setWordWrap(wordWrap:int):void
setOrientation(orientation:int):void
getTextRange():powerpoint.TextRange
getWordWrap():int
getMarginLeft():float
setMarginLeft(marginLeft:float):void
getMarginRight():float
setMarginRight(marginRight:float):void
getMarginBottom():float
setMarginBottom(marginBottom:float):void
getMarginTop():float
setMarginTop(marginTop:float):void
setHorizontalAnchor(horizontalAnchor:int):void
getHorizontalAnchor():int
setVerticalAnchor(verticalAnchor:int):void
getVerticalAnchor():int
getAutoSize():int
deleteText():void
getHasText():int
getRuler():powerpoint.Ruler
}
export interface TextFrame{
getOrientation():int
setAutoSize(autoSize:int):void
setWordWrap(wordWrap:int):void
setOrientation(orientation:int):void
getTextRange():powerpoint.TextRange
getWordWrap():int
getMarginLeft():float
setMarginLeft(marginLeft:float):void
getMarginRight():float
setMarginRight(marginRight:float):void
getMarginBottom():float
setMarginBottom(marginBottom:float):void
getMarginTop():float
setMarginTop(marginTop:float):void
setHorizontalAnchor(horizontalAnchor:int):void
getHorizontalAnchor():int
setVerticalAnchor(verticalAnchor:int):void
getVerticalAnchor():int
getAutoSize():int
deleteText():void
getHasText():int
getRuler():powerpoint.Ruler
}
export interface TextFrame2{
getOrientation():int
setAutoSize(autoSize:int):void
getColumn():office.TextColumn2
setWordWrap(wordWrap:int):void
setOrientation(orientation:int):void
getTextRange():office.TextRange2
getWordWrap():int
getThreeD():powerpoint.ThreeDFormat
getMarginLeft():float
setMarginLeft(marginLeft:float):void
getMarginRight():float
setMarginRight(marginRight:float):void
getMarginBottom():float
setMarginBottom(marginBottom:float):void
getMarginTop():float
setMarginTop(marginTop:float):void
setHorizontalAnchor(horizontalAnchor:int):void
getHorizontalAnchor():int
setVerticalAnchor(verticalAnchor:int):void
getVerticalAnchor():int
getAutoSize():int
setWarpFormat(warpFormat:int):void
getWarpFormat():int
deleteText():void
getNoTextRotation():int
setNoTextRotation(noTextRotation:int):void
getHasText():int
getPathFormat():int
setPathFormat(pathFormat:int):void
getWordArtFormat():int
setWordArtFormat(wordArtFormat:int):void
getRuler():office.Ruler2
}
export interface TextFrame2{
getOrientation():int
setAutoSize(autoSize:int):void
getColumn():office.TextColumn2
setWordWrap(wordWrap:int):void
setOrientation(orientation:int):void
getTextRange():office.TextRange2
getWordWrap():int
getThreeD():powerpoint.ThreeDFormat
getMarginLeft():float
setMarginLeft(marginLeft:float):void
getMarginRight():float
setMarginRight(marginRight:float):void
getMarginBottom():float
setMarginBottom(marginBottom:float):void
getMarginTop():float
setMarginTop(marginTop:float):void
setHorizontalAnchor(horizontalAnchor:int):void
getHorizontalAnchor():int
setVerticalAnchor(verticalAnchor:int):void
getVerticalAnchor():int
getAutoSize():int
setWarpFormat(warpFormat:int):void
getWarpFormat():int
deleteText():void
getNoTextRotation():int
setNoTextRotation(noTextRotation:int):void
getHasText():int
getPathFormat():int
setPathFormat(pathFormat:int):void
getWordArtFormat():int
setWordArtFormat(wordArtFormat:int):void
getRuler():office.Ruler2
}
export interface TextRange{
getLength():int
replace(findWhat:string,replaceWhat:string,after:int,matchCase:int,wholeWords:int):powerpoint.TextRange
find(findWhat:string,after:int,matchCase:int,wholeWords:int):powerpoint.TextRange
delete():void
copy():void
lines(start:int,length:int):powerpoint.TextRange
words(start:int,length:int):powerpoint.TextRange
getFont():powerpoint.Font
getCount():int
getText():string
paste():powerpoint.TextRange
cut():void
setText(text:string):void
getStart():int
select():void
insertAfter(newText:string):powerpoint.TextRange
getParagraphFormat():powerpoint.ParagraphFormat
changeCase(type:int):void
pasteSpecial(dataType:int,displayAsIcon:int,iconFileName:string,iconIndex:int,iconLabel:string,link:int):powerpoint.TextRange
insertSymbol(fontName:string,charNumber:int,unicode:int):powerpoint.TextRange
getLanguageID():int
setLanguageID(languageID:int):void
paragraphs(start:int,length:int):powerpoint.TextRange
insertBefore(newText:string):powerpoint.TextRange
insertDateTime(dateTimeFormat:int,insertAsField:int):powerpoint.TextRange
rtlRun():void
getActionSettings():powerpoint.ActionSettings
insertSlideNumber():powerpoint.TextRange
characters(start:int,length:int):powerpoint.TextRange
setIndentLevel(indentLevel:int):void
getIndentLevel():int
getBoundHeight():float
getBoundLeft():float
getBoundTop():float
getBoundWidth():float
addPeriods():void
removePeriods():void
rotatedBounds(x1:float,y1:float,x2:float,y2:float,x3:float,y3:float,x4:float,y4:float):void
sentences(start:int,length:int):powerpoint.TextRange
itrRun():void
runs(start:int,length:int):powerpoint.TextRange
trimText():powerpoint.TextRange
}
export interface TextRange{
getLength():int
replace(findWhat:string,replaceWhat:string,after:int,matchCase:int,wholeWords:int):powerpoint.TextRange
find(findWhat:string,after:int,matchCase:int,wholeWords:int):powerpoint.TextRange
delete():void
copy():void
lines(start:int,length:int):powerpoint.TextRange
words(start:int,length:int):powerpoint.TextRange
getFont():powerpoint.Font
getCount():int
getText():string
paste():powerpoint.TextRange
cut():void
setText(text:string):void
getStart():int
select():void
insertAfter(newText:string):powerpoint.TextRange
getParagraphFormat():powerpoint.ParagraphFormat
changeCase(type:int):void
pasteSpecial(dataType:int,displayAsIcon:int,iconFileName:string,iconIndex:int,iconLabel:string,link:int):powerpoint.TextRange
insertSymbol(fontName:string,charNumber:int,unicode:int):powerpoint.TextRange
getLanguageID():int
setLanguageID(languageID:int):void
paragraphs(start:int,length:int):powerpoint.TextRange
insertBefore(newText:string):powerpoint.TextRange
insertDateTime(dateTimeFormat:int,insertAsField:int):powerpoint.TextRange
rtlRun():void
getActionSettings():powerpoint.ActionSettings
insertSlideNumber():powerpoint.TextRange
characters(start:int,length:int):powerpoint.TextRange
setIndentLevel(indentLevel:int):void
getIndentLevel():int
getBoundHeight():float
getBoundLeft():float
getBoundTop():float
getBoundWidth():float
addPeriods():void
removePeriods():void
rotatedBounds(x1:float,y1:float,x2:float,y2:float,x3:float,y3:float,x4:float,y4:float):void
sentences(start:int,length:int):powerpoint.TextRange
itrRun():void
runs(start:int,length:int):powerpoint.TextRange
trimText():powerpoint.TextRange
}
export interface TextStyle{
getTextFrame():powerpoint.TextFrame
getLevels():powerpoint.TextStyleLevels
getRuler():powerpoint.Ruler
}
export interface TextStyle{
getTextFrame():powerpoint.TextFrame
getLevels():powerpoint.TextStyleLevels
getRuler():powerpoint.Ruler
}
export interface TextStyleLevel{
getFont():powerpoint.Font
getParagraphFormat():powerpoint.ParagraphFormat
}
export interface TextStyleLevel{
getFont():powerpoint.Font
getParagraphFormat():powerpoint.ParagraphFormat
}
export interface TextStyleLevels{
item(level:int):powerpoint.TextStyleLevel
getCount():int
}
export interface TextStyleLevels{
item(level:int):powerpoint.TextStyleLevel
getCount():int
}
export interface TextStyles{
item(type:int):powerpoint.TextStyle
getCount():int
}
export interface TextStyles{
item(type:int):powerpoint.TextStyle
getCount():int
}
export interface Theme{
getThemeVariants():powerpoint.ThemeVariants
}
export interface Theme{
getThemeVariants():powerpoint.ThemeVariants
}
export interface ThemeVariant{
getName():string
getId():string
getWidth():int
getHeight():int
}
export interface ThemeVariant{
getName():string
getId():string
getWidth():int
getHeight():int
}
export interface ThemeVariants{
item(index:int):powerpoint.ThemeVariant
getCount():int
}
export interface ThemeVariants{
item(index:int):powerpoint.ThemeVariant
getCount():int
}
export interface ThreeDFormat{
setVisible(visible:int):void
getVisible():int
setDepth(depth:float):void
getDepth():float
getExtrusionColor():powerpoint.ColorFormat
setExtrusionColorType(extrusionColorType:int):void
getExtrusionColorType():int
setPresetMaterial(presetMaterial:int):void
getPresetMaterial():int
incrementRotationX(increment:float):void
incrementRotationY(increment:float):void
getPresetThreeDFormat():int
getPresetExtrusionDirection():int
setPresetLightingDirection(presetLightingDirection:int):void
getPresetLightingDirection():int
setPresetLightingSoftness(presetLightingSoftness:int):void
getPresetLightingSoftness():int
setPerspective(perspective:int):void
getPerspective():int
setRotationX(rotationX:float):void
getRotationX():float
setRotationY(rotationY:float):void
getRotationY():float
resetRotation():void
setThreeDFormat(presetThreeDFormat:int):void
setExtrusionDirection(presetExtrusionDirection:int):void
getBevelBottomDepth():float
setBevelBottomDepth(bevelBottomDepth:float):void
getBevelBottomInset():float
setBevelBottomInset(bevelBottomInset:float):void
getBevelBottomType():int
setBevelBottomType(bevelBottomType:int):void
getPresetLighting():int
setPresetLighting(presetLighting:int):void
incrementRotationZ(increment:float):void
getBevelTopDepth():float
setBevelTopDepth(bevelTopDepth:float):void
getBevelTopInset():float
setBevelTopInset(bevelTopInset:float):void
getBevelTopType():int
setBevelTopType(bevelTopType:int):void
getContourColor():powerpoint.ColorFormat
getContourWidth():float
setContourWidth(contourWidth:float):void
getFieldOfView():float
setFieldOfView(fieldOfView:float):void
getLightAngle():float
setLightAngle(lightAngle:float):void
getPresetCamera():int
getProjectText():int
setProjectText(projectText:int):void
getRotationZ():float
setRotationZ(rotationZ:float):void
setPresetCamera(presetCamera:int):void
incrementRotationHorizontal(increment:float):void
incrementRotationVertical(increment:float):void
getZ():float
setZ(z:float):void
}
export interface ThreeDFormat{
setVisible(visible:int):void
getVisible():int
setDepth(depth:float):void
getDepth():float
getExtrusionColor():powerpoint.ColorFormat
setExtrusionColorType(extrusionColorType:int):void
getExtrusionColorType():int
setPresetMaterial(presetMaterial:int):void
getPresetMaterial():int
incrementRotationX(increment:float):void
incrementRotationY(increment:float):void
getPresetThreeDFormat():int
getPresetExtrusionDirection():int
setPresetLightingDirection(presetLightingDirection:int):void
getPresetLightingDirection():int
setPresetLightingSoftness(presetLightingSoftness:int):void
getPresetLightingSoftness():int
setPerspective(perspective:int):void
getPerspective():int
setRotationX(rotationX:float):void
getRotationX():float
setRotationY(rotationY:float):void
getRotationY():float
resetRotation():void
setThreeDFormat(presetThreeDFormat:int):void
setExtrusionDirection(presetExtrusionDirection:int):void
getBevelBottomDepth():float
setBevelBottomDepth(bevelBottomDepth:float):void
getBevelBottomInset():float
setBevelBottomInset(bevelBottomInset:float):void
getBevelBottomType():int
setBevelBottomType(bevelBottomType:int):void
getPresetLighting():int
setPresetLighting(presetLighting:int):void
incrementRotationZ(increment:float):void
getBevelTopDepth():float
setBevelTopDepth(bevelTopDepth:float):void
getBevelTopInset():float
setBevelTopInset(bevelTopInset:float):void
getBevelTopType():int
setBevelTopType(bevelTopType:int):void
getContourColor():powerpoint.ColorFormat
getContourWidth():float
setContourWidth(contourWidth:float):void
getFieldOfView():float
setFieldOfView(fieldOfView:float):void
getLightAngle():float
setLightAngle(lightAngle:float):void
getPresetCamera():int
getProjectText():int
setProjectText(projectText:int):void
getRotationZ():float
setRotationZ(rotationZ:float):void
setPresetCamera(presetCamera:int):void
incrementRotationHorizontal(increment:float):void
incrementRotationVertical(increment:float):void
getZ():float
setZ(z:float):void
}
export interface TickLabels{
getName():string
delete():any
getOffset():int
setOffset(offset:int):void
getFont():powerpoint.ChartFont
getOrientation():int
select():any
getFormat():powerpoint.ChartFont
setOrientation(orientation:int):void
getAlignment():int
setAlignment(alignment:int):void
getNumberFormat():string
setNumberFormat(numberFormat:string):void
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getDepth():int
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
setNumberFormatLocal(numberFormatLocal:any):void
getNumberFormatLocal():any
setNumberFormatLinked(numberFormatLinked:boolean):void
isNumberFormatLinked():boolean
isMultiLevel():boolean
setMultiLevel(multiLevel:boolean):void
}
export interface TickLabels{
getName():string
delete():any
getOffset():int
setOffset(offset:int):void
getFont():powerpoint.ChartFont
getOrientation():int
select():any
getFormat():powerpoint.ChartFont
setOrientation(orientation:int):void
getAlignment():int
setAlignment(alignment:int):void
getNumberFormat():string
setNumberFormat(numberFormat:string):void
getReadingOrder():int
setReadingOrder(readingOrder:int):void
getDepth():int
getAutoScaleFont():any
setAutoScaleFont(autoScaleFont:any):void
setNumberFormatLocal(numberFormatLocal:any):void
getNumberFormatLocal():any
setNumberFormatLinked(numberFormatLinked:boolean):void
isNumberFormatLinked():boolean
isMultiLevel():boolean
setMultiLevel(multiLevel:boolean):void
}
export interface TimeLine{
getInteractiveSequences():powerpoint.Sequences
getMainSequence():powerpoint.Sequence
}
export interface TimeLine{
getInteractiveSequences():powerpoint.Sequences
getMainSequence():powerpoint.Sequence
}
export interface Timing{
getBounceEndIntensity():float
setBounceEndIntensity(bounceEndIntensity:float):void
getRepeatDuration():float
setRepeatDuration(repeatDuration:float):void
getTriggerBookmark():string
setTriggerBookmark(triggerBookmark:string):void
getTriggerDelayTime():float
setTriggerDelayTime(triggerDelayTime:float):void
getDuration():float
setDuration(duration:float):void
getAccelerate():float
setAccelerate(accelerate:float):void
getAutoReverse():int
setAutoReverse(autoReverse:int):void
getBounceEnd():int
setBounceEnd(bounceEnd:int):void
getDecelerate():float
setDecelerate(decelerate:float):void
getRepeatCount():int
setRepeatCount(repeatCount:int):void
getRestart():int
setRestart(restart:int):void
getRewindAtEnd():int
setRewindAtEnd(rewindAtEnd:int):void
getSmoothEnd():int
setSmoothEnd(smoothEnd:int):void
getSmoothStart():int
setSmoothStart(smoothStart:int):void
getTriggerShape():powerpoint.Shape
setTriggerShape(triggerShape:powerpoint.Shape):void
getTriggerType():int
setTriggerType(triggerType:int):void
getSpeed():float
setSpeed(speed:float):void
}
export interface Timing{
getBounceEndIntensity():float
setBounceEndIntensity(bounceEndIntensity:float):void
getRepeatDuration():float
setRepeatDuration(repeatDuration:float):void
getTriggerBookmark():string
setTriggerBookmark(triggerBookmark:string):void
getTriggerDelayTime():float
setTriggerDelayTime(triggerDelayTime:float):void
getDuration():float
setDuration(duration:float):void
getAccelerate():float
setAccelerate(accelerate:float):void
getAutoReverse():int
setAutoReverse(autoReverse:int):void
getBounceEnd():int
setBounceEnd(bounceEnd:int):void
getDecelerate():float
setDecelerate(decelerate:float):void
getRepeatCount():int
setRepeatCount(repeatCount:int):void
getRestart():int
setRestart(restart:int):void
getRewindAtEnd():int
setRewindAtEnd(rewindAtEnd:int):void
getSmoothEnd():int
setSmoothEnd(smoothEnd:int):void
getSmoothStart():int
setSmoothStart(smoothStart:int):void
getTriggerShape():powerpoint.Shape
setTriggerShape(triggerShape:powerpoint.Shape):void
getTriggerType():int
setTriggerType(triggerType:int):void
getSpeed():float
setSpeed(speed:float):void
}
export interface Trendline{
getName():string
delete():any
setName(name:string):void
getType():int
getBorder():powerpoint.ChartBorder
getIndex():int
setType(type:int):void
select():any
getFormat():powerpoint.ChartFormat
clearFormats():any
setForward(forward:int):void
isDisplayEquation():boolean
setDisplayEquation(displayEquation:boolean):void
isDisplayRSquared():boolean
setDisplayRSquared(displayRSquared:boolean):void
isInterceptIsAuto():boolean
setInterceptIsAuto(interceptIsAuto:boolean):void
getOrder():int
setOrder(order:int):void
getBackward():int
setBackward(backward:int):void
getForward():int
getIntercept():double
setIntercept(intercept:double):void
isNameIsAuto():boolean
setNameIsAuto(nameIsAuto:boolean):void
getPeriod():int
setPeriod(period:int):void
getBackward2():double
setBackward2(backward2:double):void
getForward2():double
setForward2(forward2:double):void
getDataLabel():powerpoint.DataLabel
}
export interface Trendline{
getName():string
delete():any
setName(name:string):void
getType():int
getBorder():powerpoint.ChartBorder
getIndex():int
setType(type:int):void
select():any
getFormat():powerpoint.ChartFormat
clearFormats():any
setForward(forward:int):void
isDisplayEquation():boolean
setDisplayEquation(displayEquation:boolean):void
isDisplayRSquared():boolean
setDisplayRSquared(displayRSquared:boolean):void
isInterceptIsAuto():boolean
setInterceptIsAuto(interceptIsAuto:boolean):void
getOrder():int
setOrder(order:int):void
getBackward():int
setBackward(backward:int):void
getForward():int
getIntercept():double
setIntercept(intercept:double):void
isNameIsAuto():boolean
setNameIsAuto(nameIsAuto:boolean):void
getPeriod():int
setPeriod(period:int):void
getBackward2():double
setBackward2(backward2:double):void
getForward2():double
setForward2(forward2:double):void
getDataLabel():powerpoint.DataLabel
}
export interface Trendlines{
add(type:int,order:any,period:any,forward:any,backward:any,intercept:any,displayEquation:any,displayRSquared:any,name:any):powerpoint.Trendline
item(index:any):powerpoint.Trendline
getCount():int
}
export interface Trendlines{
add(type:int,order:any,period:any,forward:any,backward:any,intercept:any,displayEquation:any,displayRSquared:any,name:any):powerpoint.Trendline
item(index:any):powerpoint.Trendline
getCount():int
}
export interface UpBars{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
getInterior():powerpoint.Interior
}
export interface UpBars{
getName():string
delete():any
getBorder():powerpoint.ChartBorder
select():any
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
getInterior():powerpoint.Interior
}
export interface View{
getType():int
printOut(from:int,to:int,printToFile:string,copies:int,collate:int):void
paste():void
pasteSpecial(dataType:int,displayAsIcon:int,iconFileName:string,iconIndex:int,iconLabel:string,link:int):void
getZoom():int
setZoom(zoom:int):void
getMediaControlsHeight():float
getMediaControlsLeft():float
getMediaControlsTop():float
getMediaControlsVisible():int
getMediaControlsWidth():float
getDisplaySlideMiniature():int
setDisplaySlideMiniature(displaySlideMiniature:int):void
getPrintOptions():powerpoint.PrintOptions
gotoSlide(index:int):void
getZoomToFit():int
setZoomToFit(zoomToFit:int):void
getSlide():any
player(shapeId:any):powerpoint.Player
setSlide(slide:any):void
}
export interface View{
getType():int
printOut(from:int,to:int,printToFile:string,copies:int,collate:int):void
paste():void
pasteSpecial(dataType:int,displayAsIcon:int,iconFileName:string,iconIndex:int,iconLabel:string,link:int):void
getZoom():int
setZoom(zoom:int):void
getMediaControlsHeight():float
getMediaControlsLeft():float
getMediaControlsTop():float
getMediaControlsVisible():int
getMediaControlsWidth():float
getDisplaySlideMiniature():int
setDisplaySlideMiniature(displaySlideMiniature:int):void
getPrintOptions():powerpoint.PrintOptions
gotoSlide(index:int):void
getZoomToFit():int
setZoomToFit(zoomToFit:int):void
getSlide():any
player(shapeId:any):powerpoint.Player
setSlide(slide:any):void
}
export interface Walls{
getName():string
getBorder():powerpoint.ChartBorder
paste():void
select():any
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
getPictureType():any
setPictureType(pictureType:any):void
setPictureUnit(pictureUnit:any):void
getPictureUnit():any
getThickness():int
setThickness(thickness:int):void
}
export interface Walls{
getName():string
getBorder():powerpoint.ChartBorder
paste():void
select():any
getFormat():powerpoint.ChartFormat
getFill():powerpoint.ChartFillFormat
clearFormats():any
getInterior():powerpoint.Interior
getPictureType():any
setPictureType(pictureType:any):void
setPictureUnit(pictureUnit:any):void
getPictureUnit():any
getThickness():int
setThickness(thickness:int):void
}
export interface WebOptions{
getEncoding():int
setOrganizeInFolder(organizeInFolder:int):void
setUseLongFileNames(useLongFileNames:int):void
getFolderSuffix():string
setAllowPNG(allowPNG:int):void
setEncoding(encoding:int):void
setRelyOnVML(relyOnVML:int):void
getScreenSize():int
setScreenSize(screenSize:int):void
setTargetBrowser(targetBrowser:int):void
getTargetBrowser():int
useDefaultFolderSuffix():void
getIncludeNavigation():int
setIncludeNavigation(includeNavigation:int):void
getOrganizeInFolder():int
getResizeGraphics():int
setResizeGraphics(resizeGraphics:int):void
getShowSlideAnimation():int
setShowSlideAnimation(showSlideAnimation:int):void
getUseLongFileNames():int
getAllowPNG():int
getFrameColors():int
setFrameColors(frameColors:int):void
getHTMLVersion():int
setHTMLVersion(hTMLVersion:int):void
getRelyOnVML():int
}
export interface WebOptions{
getEncoding():int
setOrganizeInFolder(organizeInFolder:int):void
setUseLongFileNames(useLongFileNames:int):void
getFolderSuffix():string
setAllowPNG(allowPNG:int):void
setEncoding(encoding:int):void
setRelyOnVML(relyOnVML:int):void
getScreenSize():int
setScreenSize(screenSize:int):void
setTargetBrowser(targetBrowser:int):void
getTargetBrowser():int
useDefaultFolderSuffix():void
getIncludeNavigation():int
setIncludeNavigation(includeNavigation:int):void
getOrganizeInFolder():int
getResizeGraphics():int
setResizeGraphics(resizeGraphics:int):void
getShowSlideAnimation():int
setShowSlideAnimation(showSlideAnimation:int):void
getUseLongFileNames():int
getAllowPNG():int
getFrameColors():int
setFrameColors(frameColors:int):void
getHTMLVersion():int
setHTMLVersion(hTMLVersion:int):void
getRelyOnVML():int
}
}
declare namespace powerpoint.constants{
export const enum PpActionType{
ppActionMixed=-2,
ppActionNone=0,
ppActionNextSlide=1,
ppActionPreviousSlide=2,
ppActionFirstSlide=3,
ppActionLastSlide=4,
ppActionLastSlideViewed=5,
ppActionEndShow=6,
ppActionHyperlink=7,
ppActionRunMacro=8,
ppActionRunProgram=9,
ppActionNamedSlideShow=10,
ppActionOLEVerb=11,
ppActionPlay=12

}
export const enum PpActionType{
ppActionMixed=-2,
ppActionNone=0,
ppActionNextSlide=1,
ppActionPreviousSlide=2,
ppActionFirstSlide=3,
ppActionLastSlide=4,
ppActionLastSlideViewed=5,
ppActionEndShow=6,
ppActionHyperlink=7,
ppActionRunMacro=8,
ppActionRunProgram=9,
ppActionNamedSlideShow=10,
ppActionOLEVerb=11,
ppActionPlay=12

}
export const enum PpAdvanceMode{
ppAdvanceModeMixed=-2,
ppAdvanceOnClick=1,
ppAdvanceOnTime=2

}
export const enum PpAdvanceMode{
ppAdvanceModeMixed=-2,
ppAdvanceOnClick=1,
ppAdvanceOnTime=2

}
export const enum PpAfterEffect{
ppAfterEffectMixed=-2,
ppAfterEffectNothing=0,
ppAfterEffectHide=1,
ppAfterEffectDim=2,
ppAfterEffectHideOnClick=3

}
export const enum PpAfterEffect{
ppAfterEffectMixed=-2,
ppAfterEffectNothing=0,
ppAfterEffectHide=1,
ppAfterEffectDim=2,
ppAfterEffectHideOnClick=3

}
export const enum PpAlertLevel{
ppAlertsAll=2,
ppAlertsNone=1

}
export const enum PpAlertLevel{
ppAlertsAll=2,
ppAlertsNone=1

}
export const enum PpArrangeStyle{
ppArrangeTiled=1,
ppArrangeCascade=2

}
export const enum PpArrangeStyle{
ppArrangeTiled=1,
ppArrangeCascade=2

}
export const enum PpAutoSize{
ppAutoSizeMixed=-2,
vppAutoSizeNone=0,
ppAutoSizeShapeToFitText=1

}
export const enum PpAutoSize{
ppAutoSizeMixed=-2,
vppAutoSizeNone=0,
ppAutoSizeShapeToFitText=1

}
export const enum PpBaselineAlignment{
ppBaselineAlignMixed=-2,
ppBaselineAlignBaseline=1,
ppBaselineAlignTop=2,
ppBaselineAlignCenter=3,
ppBaselineAlignFarEast50=4,
ppBaselineAlignAuto=5

}
export const enum PpBaselineAlignment{
ppBaselineAlignMixed=-2,
ppBaselineAlignBaseline=1,
ppBaselineAlignTop=2,
ppBaselineAlignCenter=3,
ppBaselineAlignFarEast50=4,
ppBaselineAlignAuto=5

}
export const enum PpChangeCase{
ppCaseSentence=1,
ppCaseLower=2,
ppCaseUpper=3,
ppCaseTitle=4,
ppCaseToggle=5

}
export const enum PpChangeCase{
ppCaseSentence=1,
ppCaseLower=2,
ppCaseUpper=3,
ppCaseTitle=4,
ppCaseToggle=5

}
export const enum PpChartUnitEffect{
ppAnimateChartMixed=-2,
ppAnimateBySeries=1,
ppAnimateByCategory=2,
ppAnimateBySeriesElements=3,
ppAnimateByCategoryElements=4,
ppAnimateChartAllAtOnce=5

}
export const enum PpChartUnitEffect{
ppAnimateChartMixed=-2,
ppAnimateBySeries=1,
ppAnimateByCategory=2,
ppAnimateBySeriesElements=3,
ppAnimateByCategoryElements=4,
ppAnimateChartAllAtOnce=5

}
export const enum PpColorSchemeIndex{
ppSchemeColorMixed=-2,
ppNotSchemeColor=0,
ppBackground=1,
ppForeground=2,
ppShadow=3,
ppTitle=4,
ppFill=5,
ppAccent1=6,
ppAccent2=7,
ppAccent3=8

}
export const enum PpColorSchemeIndex{
ppSchemeColorMixed=-2,
ppNotSchemeColor=0,
ppBackground=1,
ppForeground=2,
ppShadow=3,
ppTitle=4,
ppFill=5,
ppAccent1=6,
ppAccent2=7,
ppAccent3=8

}
export const enum PpDateTimeFormat{
ppDateTimeFormatMixed=-2,
ppDateTimeMdyy=1,
ppDateTimeddddMMMMddyyyy=2,
ppDateTimedMMMMyyyy=3,
ppDateTimeMMMMdyyyy=4,
ppDateTimedMMMyy=5,
ppDateTimeMMMMyy=6,
ppDateTimeMMyy=7,
ppDateTimeMMddyyHmm=8,
ppDateTimeMMddyyhmmAMPM=9,
ppDateTimeHmm=10,
ppDateTimeHmmss=11,
ppDateTimehmmAMPM=12,
ppDateTimehmmssAMPM=13,
ppDateTimeFigureOut=14,
ppDateTimeUAQ1=15,
ppDateTimeUAQ2=16,
ppDateTimeUAQ3=17,
ppDateTimeUAQ4=18,
ppDateTimeUAQ5=19,
ppDateTimeUAQ6=20,
ppDateTimeUAQ7=21

}
export const enum PpDateTimeFormat{
ppDateTimeFormatMixed=-2,
ppDateTimeMdyy=1,
ppDateTimeddddMMMMddyyyy=2,
ppDateTimedMMMMyyyy=3,
ppDateTimeMMMMdyyyy=4,
ppDateTimedMMMyy=5,
ppDateTimeMMMMyy=6,
ppDateTimeMMyy=7,
ppDateTimeMMddyyHmm=8,
ppDateTimeMMddyyhmmAMPM=9,
ppDateTimeHmm=10,
ppDateTimeHmmss=11,
ppDateTimehmmAMPM=12,
ppDateTimehmmssAMPM=13,
ppDateTimeFigureOut=14,
ppDateTimeUAQ1=15,
ppDateTimeUAQ2=16,
ppDateTimeUAQ3=17,
ppDateTimeUAQ4=18,
ppDateTimeUAQ5=19,
ppDateTimeUAQ6=20,
ppDateTimeUAQ7=21

}
export const enum PpDirection{
ppDirectionMixed=-2,
ppDirectionLeftToRight=1,
ppDirectionRightToLeft=2

}
export const enum PpDirection{
ppDirectionMixed=-2,
ppDirectionLeftToRight=1,
ppDirectionRightToLeft=2

}
export const enum PpEntryEffect{
ppEffectMixed=-2,
ppEffectNone=0,
ppEffectCut=257,
ppEffectCutThroughBlack=258,
ppEffectRandom=513,
ppEffectBlindsHorizontal=769,
ppEffectBlindsVertical=770,
ppEffectCheckerboardAcross=1025,
ppEffectCheckerboardDown=1026,
ppEffectCoverLeft=1281,
ppEffectCoverUp=1282,
ppEffectCoverRight=1283,
ppEffectCoverDown=1284,
ppEffectCoverLeftUp=1285,
ppEffectCoverRightUp=1286,
ppEffectCoverLeftDown=1287,
ppEffectCoverRightDown=1288,
ppEffectDissolve=1537,
ppEffectFade=1793,
ppEffectUncoverLeft=2049,
ppEffectUncoverUp=2050,
ppEffectUncoverRight=2051,
ppEffectUncoverDown=2052,
ppEffectUncoverLeftUp=2053,
ppEffectUncoverRightUp=2054,
ppEffectUncoverLeftDown=2055,
ppEffectUncoverRightDown=2056,
ppEffectRandomBarsHorizontal=2305,
ppEffectRandomBarsVertical=2306,
ppEffectStripsUpLeft=2561,
ppEffectStripsUpRight=2562,
ppEffectStripsDownLeft=2563,
ppEffectStripsDownRight=2564,
ppEffectStripsLeftUp=2565,
ppEffectStripsRightUp=2566,
ppEffectStripsLeftDown=2567,
ppEffectStripsRightDown=2568,
ppEffectWipeLeft=2817,
ppEffectWipeUp=2818,
ppEffectWipeRight=2819,
ppEffectWipeDown=2820,
ppEffectBoxOut=3073,
ppEffectBoxIn=3074,
ppEffectFlyFromLeft=3329,
ppEffectFlyFromTop=3330,
ppEffectFlyFromRight=3331,
ppEffectFlyFromBottom=3332,
ppEffectFlyFromTopLeft=3333,
ppEffectFlyFromTopRight=3334,
ppEffectFlyFromBottomLeft=3335,
ppEffectFlyFromBottomRight=3336,
ppEffectPeekFromLeft=3337,
ppEffectPeekFromDown=3338,
ppEffectPeekFromRight=3339,
ppEffectPeekFromUp=3340,
ppEffectCrawlFromLeft=3341,
ppEffectCrawlFromUp=3342,
ppEffectCrawlFromRight=3343,
ppEffectCrawlFromDown=3344,
ppEffectZoomIn=3345,
ppEffectZoomInSlightly=3346,
ppEffectZoomOut=3347,
ppEffectZoomOutSlightly=3348,
ppEffectZoomCenter=3349,
ppEffectZoomBottom=3350,
ppEffectStretchAcross=3351,
ppEffectStretchLeft=3352,
ppEffectStretchUp=3353,
ppEffectStretchRight=3354,
ppEffectStretchDown=3355,
ppEffectSwivel=3356,
ppEffectSpiral=3357,
ppEffectSplitHorizontalOut=3585,
ppEffectSplitHorizontalIn=3586,
ppEffectSplitVerticalOut=3587,
ppEffectSplitVerticalIn=3588,
ppEffectFlashOnceFast=3841,
ppEffectFlashOnceMedium=3842,
ppEffectFlashOnceSlow=3843,
ppEffectAppear=3844,
ppEffectCircleOut=3845,
ppEffectDiamondOut=3846,
ppEffectCombHorizontal=3847,
ppEffectCombVertical=3848,
ppEffectFadeSmoothly=3849,
ppEffectNewsflash=3850,
ppEffectPlusOut=3851,
ppEffectPushDown=3852,
ppEffectPushLeft=3853,
ppEffectPushRight=3854,
ppEffectPushUp=3855,
ppEffectWedge=3856,
ppEffectWheel1Spoke=3857,
ppEffectWheel2Spokes=3858,
ppEffectWheel3Spokes=3859,
ppEffectWheel4Spokes=3860,
ppEffectWheel8Spokes=3861,
ppEffectWheelReverse1Spoke=3862,
ppEffectVortexLeft=3863,
ppEffectVortexUp=3864,
ppEffectVortexRight=3865,
ppEffectVortexDown=3866,
ppEffectRippleCenter=3867,
ppEffectRippleRightUp=3868,
ppEffectRippleLeftUp=3869,
ppEffectRippleLeftDown=3870,
ppEffectRippleRightDown=3871,
ppEffectGlitterDiamondLeft=3872,
ppEffectGlitterDiamondUp=3873,
ppEffectGlitterDiamondRight=3874,
ppEffectGlitterDiamondDown=3875,
ppEffectGlitterHexagonLeft=3876,
ppEffectGlitterHexagonUp=3877,
ppEffectGlitterHexagonRight=3878,
ppEffectGlitterHexagonDown=3879,
ppEffectGalleryLeft=3880,
ppEffectGalleryRight=3881,
ppEffectConveyorLeft=3882,
ppEffectConveyorRight=3883,
ppEffectDoorsVertical=3884,
ppEffectDoorsHorizontal=3885,
ppEffectWindowVertical=3886,
ppEffectWindowHorizontal=3887,
ppEffectWarpIn=3888,
ppEffectWarpOut=3889,
ppEffectFlyThroughIn=3890,
ppEffectFlyThroughOut=3891,
ppEffectFlyThroughInBounce=3892,
ppEffectFlyThroughOutBounce=3893,
ppEffectRevealSmoothLeft=3894,
ppEffectRevealSmoothRight=3895,
ppEffectRevealBlackLeft=3896,
ppEffectRevealBlackRight=3897,
ppEffectHoneycomb=3898,
ppEffectFerrisWheelLeft=3899,
ppEffectFerrisWheelRight=3900,
ppEffectSwitchLeft=3901,
ppEffectSwitchUp=3902,
ppEffectSwitchRight=3903,
ppEffectSwitchDown=3904,
ppEffectFlipLeft=3905,
ppEffectFlipUp=3906,
ppEffectFlipRight=3907,
ppEffectFlipDown=3908,
ppEffectFlashbulb=3909,
ppEffectShredStripsIn=3910,
ppEffectShredStripsOut=3911,
ppEffectShredRectangleIn=3912,
ppEffectShredRectangleOut=3913,
ppEffectCubeLeft=3914,
ppEffectCubeUp=3915,
ppEffectCubeRight=3916,
ppEffectCubeDown=3917,
ppEffectRotateLeft=3918,
ppEffectRotateUp=3919,
ppEffectRotateRight=3920,
ppEffectRotateDown=3921,
ppEffectBoxLeft=3922,
ppEffectBoxUp=3923,
ppEffectBoxRight=3924,
ppEffectBoxDown=3925,
ppEffectOrbitLeft=3926,
ppEffectOrbitUp=3927,
ppEffectOrbitRight=3928,
ppEffectOrbitDown=3929,
ppEffectPanLeft=3930,
ppEffectPanUp=3931,
ppEffectPanRight=3932,
ppEffectPanDown=3933,
ppEffectFallOverLeft=3934,
ppEffectFallOverRight=3935,
ppEffectDrapeLeft=3936,
ppEffectDrapeRight=3937,
ppEffectCurtains=3938,
ppEffectWindLeft=3939,
ppEffectWindRight=3940,
ppEffectPrestige=3941,
ppEffectFracture=3942,
ppEffectCrush=3943,
ppEffectPeelOffLeft=3944,
ppEffectPeelOffRight=3945,
ppEffectPageCurlSingleLeft=3946,
ppEffectPageCurlSingleRight=3947,
ppEffectPageCurlDoubleLeft=3948,
ppEffectPageCurlDoubleRight=3949,
ppEffectAirplaneLeft=3950,
ppEffectAirplaneRight=3951,
ppEffectOrigamiLeft=3952,
ppEffectOrigamiRight=3953

}
export const enum PpEntryEffect{
ppEffectMixed=-2,
ppEffectNone=0,
ppEffectCut=257,
ppEffectCutThroughBlack=258,
ppEffectRandom=513,
ppEffectBlindsHorizontal=769,
ppEffectBlindsVertical=770,
ppEffectCheckerboardAcross=1025,
ppEffectCheckerboardDown=1026,
ppEffectCoverLeft=1281,
ppEffectCoverUp=1282,
ppEffectCoverRight=1283,
ppEffectCoverDown=1284,
ppEffectCoverLeftUp=1285,
ppEffectCoverRightUp=1286,
ppEffectCoverLeftDown=1287,
ppEffectCoverRightDown=1288,
ppEffectDissolve=1537,
ppEffectFade=1793,
ppEffectUncoverLeft=2049,
ppEffectUncoverUp=2050,
ppEffectUncoverRight=2051,
ppEffectUncoverDown=2052,
ppEffectUncoverLeftUp=2053,
ppEffectUncoverRightUp=2054,
ppEffectUncoverLeftDown=2055,
ppEffectUncoverRightDown=2056,
ppEffectRandomBarsHorizontal=2305,
ppEffectRandomBarsVertical=2306,
ppEffectStripsUpLeft=2561,
ppEffectStripsUpRight=2562,
ppEffectStripsDownLeft=2563,
ppEffectStripsDownRight=2564,
ppEffectStripsLeftUp=2565,
ppEffectStripsRightUp=2566,
ppEffectStripsLeftDown=2567,
ppEffectStripsRightDown=2568,
ppEffectWipeLeft=2817,
ppEffectWipeUp=2818,
ppEffectWipeRight=2819,
ppEffectWipeDown=2820,
ppEffectBoxOut=3073,
ppEffectBoxIn=3074,
ppEffectFlyFromLeft=3329,
ppEffectFlyFromTop=3330,
ppEffectFlyFromRight=3331,
ppEffectFlyFromBottom=3332,
ppEffectFlyFromTopLeft=3333,
ppEffectFlyFromTopRight=3334,
ppEffectFlyFromBottomLeft=3335,
ppEffectFlyFromBottomRight=3336,
ppEffectPeekFromLeft=3337,
ppEffectPeekFromDown=3338,
ppEffectPeekFromRight=3339,
ppEffectPeekFromUp=3340,
ppEffectCrawlFromLeft=3341,
ppEffectCrawlFromUp=3342,
ppEffectCrawlFromRight=3343,
ppEffectCrawlFromDown=3344,
ppEffectZoomIn=3345,
ppEffectZoomInSlightly=3346,
ppEffectZoomOut=3347,
ppEffectZoomOutSlightly=3348,
ppEffectZoomCenter=3349,
ppEffectZoomBottom=3350,
ppEffectStretchAcross=3351,
ppEffectStretchLeft=3352,
ppEffectStretchUp=3353,
ppEffectStretchRight=3354,
ppEffectStretchDown=3355,
ppEffectSwivel=3356,
ppEffectSpiral=3357,
ppEffectSplitHorizontalOut=3585,
ppEffectSplitHorizontalIn=3586,
ppEffectSplitVerticalOut=3587,
ppEffectSplitVerticalIn=3588,
ppEffectFlashOnceFast=3841,
ppEffectFlashOnceMedium=3842,
ppEffectFlashOnceSlow=3843,
ppEffectAppear=3844,
ppEffectCircleOut=3845,
ppEffectDiamondOut=3846,
ppEffectCombHorizontal=3847,
ppEffectCombVertical=3848,
ppEffectFadeSmoothly=3849,
ppEffectNewsflash=3850,
ppEffectPlusOut=3851,
ppEffectPushDown=3852,
ppEffectPushLeft=3853,
ppEffectPushRight=3854,
ppEffectPushUp=3855,
ppEffectWedge=3856,
ppEffectWheel1Spoke=3857,
ppEffectWheel2Spokes=3858,
ppEffectWheel3Spokes=3859,
ppEffectWheel4Spokes=3860,
ppEffectWheel8Spokes=3861,
ppEffectWheelReverse1Spoke=3862,
ppEffectVortexLeft=3863,
ppEffectVortexUp=3864,
ppEffectVortexRight=3865,
ppEffectVortexDown=3866,
ppEffectRippleCenter=3867,
ppEffectRippleRightUp=3868,
ppEffectRippleLeftUp=3869,
ppEffectRippleLeftDown=3870,
ppEffectRippleRightDown=3871,
ppEffectGlitterDiamondLeft=3872,
ppEffectGlitterDiamondUp=3873,
ppEffectGlitterDiamondRight=3874,
ppEffectGlitterDiamondDown=3875,
ppEffectGlitterHexagonLeft=3876,
ppEffectGlitterHexagonUp=3877,
ppEffectGlitterHexagonRight=3878,
ppEffectGlitterHexagonDown=3879,
ppEffectGalleryLeft=3880,
ppEffectGalleryRight=3881,
ppEffectConveyorLeft=3882,
ppEffectConveyorRight=3883,
ppEffectDoorsVertical=3884,
ppEffectDoorsHorizontal=3885,
ppEffectWindowVertical=3886,
ppEffectWindowHorizontal=3887,
ppEffectWarpIn=3888,
ppEffectWarpOut=3889,
ppEffectFlyThroughIn=3890,
ppEffectFlyThroughOut=3891,
ppEffectFlyThroughInBounce=3892,
ppEffectFlyThroughOutBounce=3893,
ppEffectRevealSmoothLeft=3894,
ppEffectRevealSmoothRight=3895,
ppEffectRevealBlackLeft=3896,
ppEffectRevealBlackRight=3897,
ppEffectHoneycomb=3898,
ppEffectFerrisWheelLeft=3899,
ppEffectFerrisWheelRight=3900,
ppEffectSwitchLeft=3901,
ppEffectSwitchUp=3902,
ppEffectSwitchRight=3903,
ppEffectSwitchDown=3904,
ppEffectFlipLeft=3905,
ppEffectFlipUp=3906,
ppEffectFlipRight=3907,
ppEffectFlipDown=3908,
ppEffectFlashbulb=3909,
ppEffectShredStripsIn=3910,
ppEffectShredStripsOut=3911,
ppEffectShredRectangleIn=3912,
ppEffectShredRectangleOut=3913,
ppEffectCubeLeft=3914,
ppEffectCubeUp=3915,
ppEffectCubeRight=3916,
ppEffectCubeDown=3917,
ppEffectRotateLeft=3918,
ppEffectRotateUp=3919,
ppEffectRotateRight=3920,
ppEffectRotateDown=3921,
ppEffectBoxLeft=3922,
ppEffectBoxUp=3923,
ppEffectBoxRight=3924,
ppEffectBoxDown=3925,
ppEffectOrbitLeft=3926,
ppEffectOrbitUp=3927,
ppEffectOrbitRight=3928,
ppEffectOrbitDown=3929,
ppEffectPanLeft=3930,
ppEffectPanUp=3931,
ppEffectPanRight=3932,
ppEffectPanDown=3933,
ppEffectFallOverLeft=3934,
ppEffectFallOverRight=3935,
ppEffectDrapeLeft=3936,
ppEffectDrapeRight=3937,
ppEffectCurtains=3938,
ppEffectWindLeft=3939,
ppEffectWindRight=3940,
ppEffectPrestige=3941,
ppEffectFracture=3942,
ppEffectCrush=3943,
ppEffectPeelOffLeft=3944,
ppEffectPeelOffRight=3945,
ppEffectPageCurlSingleLeft=3946,
ppEffectPageCurlSingleRight=3947,
ppEffectPageCurlDoubleLeft=3948,
ppEffectPageCurlDoubleRight=3949,
ppEffectAirplaneLeft=3950,
ppEffectAirplaneRight=3951,
ppEffectOrigamiLeft=3952,
ppEffectOrigamiRight=3953

}
export const enum PpFarEastLineBreakLevel{
ppFarEastLineBreakLevelNormal=1,
ppFarEastLineBreakLevelStrict=2,
ppFarEastLineBreakLevelCustom=3

}
export const enum PpFarEastLineBreakLevel{
ppFarEastLineBreakLevelNormal=1,
ppFarEastLineBreakLevelStrict=2,
ppFarEastLineBreakLevelCustom=3

}
export const enum PpFileDialogType{
ppFileDialogOpen=1,
ppFileDialogSave=2

}
export const enum PpFileDialogType{
ppFileDialogOpen=1,
ppFileDialogSave=2

}
export const enum PpFollowColors{
ppFollowColorsMixed=-2,
ppFollowColorsNone=0,
ppFollowColorsScheme=1,
ppFollowColorsTextAndBackground=2

}
export const enum PpFollowColors{
ppFollowColorsMixed=-2,
ppFollowColorsNone=0,
ppFollowColorsScheme=1,
ppFollowColorsTextAndBackground=2

}
export const enum PpFrameColors{
ppFrameColorsBrowserColors=1,
ppFrameColorsPresentationSchemeTextColor=2,
ppFrameColorsPresentationSchemeAccentColor=3,
ppFrameColorsWhiteTextOnBlack=4,
ppFrameColorsBlackTextOnWhite=5

}
export const enum PpFrameColors{
ppFrameColorsBrowserColors=1,
ppFrameColorsPresentationSchemeTextColor=2,
ppFrameColorsPresentationSchemeAccentColor=3,
ppFrameColorsWhiteTextOnBlack=4,
ppFrameColorsBlackTextOnWhite=5

}
export const enum PpIndentControl{
ppIndentControlMixed=-2,
ppIndentReplaceAttr=1,
ppIndentKeepAttr=2

}
export const enum PpIndentControl{
ppIndentControlMixed=-2,
ppIndentReplaceAttr=1,
ppIndentKeepAttr=2

}
export const enum PpMediaType{
ppMediaTypeMixed=-2,
ppMediaTypeOther=1,
ppMediaTypeSound=2,
ppMediaTypeMovie=3

}
export const enum PpMediaType{
ppMediaTypeMixed=-2,
ppMediaTypeOther=1,
ppMediaTypeSound=2,
ppMediaTypeMovie=3

}
export const enum PpMouseActivation{
ppMouseClick=1,
ppMouseOver=2

}
export const enum PpMouseActivation{
ppMouseClick=1,
ppMouseOver=2

}
export const enum PpParagraphAlignment{
ppAlignmentMixed=-2,
ppAlignLeft=1,
ppAlignCenter=2,
ppAlignRight=3,
ppAlignJustify=4,
ppAlignDistribute=5,
ppAlignThaiDistribute=6,
ppAlignJustifyLow=7

}
export const enum PpParagraphAlignment{
ppAlignmentMixed=-2,
ppAlignLeft=1,
ppAlignCenter=2,
ppAlignRight=3,
ppAlignJustify=4,
ppAlignDistribute=5,
ppAlignThaiDistribute=6,
ppAlignJustifyLow=7

}
export const enum PpPasteDataType{
ppPasteDefault=0,
ppPasteBitmap=1,
ppPasteEnhancedMetafile=2,
ppPasteMetafilePicture=3,
ppPasteGIF=4,
ppPasteJPG=5,
ppPastePNG=6,
ppPasteText=7,
ppPasteHTML=8,
ppPasteRTF=9,
ppPasteOLEObject=10,
ppPasteShape=11

}
export const enum PpPasteDataType{
ppPasteDefault=0,
ppPasteBitmap=1,
ppPasteEnhancedMetafile=2,
ppPasteMetafilePicture=3,
ppPasteGIF=4,
ppPasteJPG=5,
ppPastePNG=6,
ppPasteText=7,
ppPasteHTML=8,
ppPasteRTF=9,
ppPasteOLEObject=10,
ppPasteShape=11

}
export const enum PpPlaceholderType{
ppPlaceholderMixed=-2,
ppPlaceholderTitle=1,
ppPlaceholderBody=2,
ppPlaceholderCenterTitle=3,
ppPlaceholderSubtitle=4,
ppPlaceholderVerticalTitle=5,
ppPlaceholderVerticalBody=6,
ppPlaceholderObject=7,
ppPlaceholderChart=8,
ppPlaceholderBitmap=9,
ppPlaceholderMediaClip=10,
ppPlaceholderOrgChart=11,
ppPlaceholderTable=12,
ppPlaceholderSlideNumber=13,
ppPlaceholderHeader=14,
ppPlaceholderFooter=15,
ppPlaceholderDate=16,
ppPlaceholderVerticalObject=17,
ppPlaceholderPicture=18

}
export const enum PpPlaceholderType{
ppPlaceholderMixed=-2,
ppPlaceholderTitle=1,
ppPlaceholderBody=2,
ppPlaceholderCenterTitle=3,
ppPlaceholderSubtitle=4,
ppPlaceholderVerticalTitle=5,
ppPlaceholderVerticalBody=6,
ppPlaceholderObject=7,
ppPlaceholderChart=8,
ppPlaceholderBitmap=9,
ppPlaceholderMediaClip=10,
ppPlaceholderOrgChart=11,
ppPlaceholderTable=12,
ppPlaceholderSlideNumber=13,
ppPlaceholderHeader=14,
ppPlaceholderFooter=15,
ppPlaceholderDate=16,
ppPlaceholderVerticalObject=17,
ppPlaceholderPicture=18

}
export const enum PpPrintColorType{
ppPrintColor=1,
ppPrintBlackAndWhite=2,
ppPrintPureBlackAndWhite=3

}
export const enum PpPrintColorType{
ppPrintColor=1,
ppPrintBlackAndWhite=2,
ppPrintPureBlackAndWhite=3

}
export const enum PpPrintHandoutOrder{
ppPrintHandoutVerticalFirst=1,
ppPrintHandoutHorizontalFirst=2

}
export const enum PpPrintHandoutOrder{
ppPrintHandoutVerticalFirst=1,
ppPrintHandoutHorizontalFirst=2

}
export const enum PpPrintOutputType{
ppPrintOutputSlides=1,
ppPrintOutputTwoSlideHandouts=2,
ppPrintOutputThreeSlideHandouts=3,
ppPrintOutputSixSlideHandouts=4,
ppPrintOutputNotesPages=5,
ppPrintOutputOutline=6,
ppPrintOutputBuildSlides=7,
ppPrintOutputFourSlideHandouts=8,
ppPrintOutputNineSlideHandouts=9,
ppPrintOutputOneSlideHandouts=10

}
export const enum PpPrintOutputType{
ppPrintOutputSlides=1,
ppPrintOutputTwoSlideHandouts=2,
ppPrintOutputThreeSlideHandouts=3,
ppPrintOutputSixSlideHandouts=4,
ppPrintOutputNotesPages=5,
ppPrintOutputOutline=6,
ppPrintOutputBuildSlides=7,
ppPrintOutputFourSlideHandouts=8,
ppPrintOutputNineSlideHandouts=9,
ppPrintOutputOneSlideHandouts=10

}
export const enum PpPrintRangeType{
ppPrintAll=1,
ppPrintSelection=2,
ppPrintCurrent=3,
ppPrintSlideRange=4,
ppPrintNamedSlideShow=5,
ppPrintSection=6

}
export const enum PpPrintRangeType{
ppPrintAll=1,
ppPrintSelection=2,
ppPrintCurrent=3,
ppPrintSlideRange=4,
ppPrintNamedSlideShow=5,
ppPrintSection=6

}
export const enum PpSaveAsFileType{
ppSaveAsPresentation=1,
ppSaveAsPowerPoint7=2,
ppSaveAsPowerPoint4=3,
ppSaveAsPowerPoint3=4,
ppSaveAsTemplate=5,
ppSaveAsRTF=6,
ppSaveAsShow=7,
ppSaveAsAddIn=8,
ppSaveAsPowerPoint4FarEast=10,
ppSaveAsDefault=11,
ppSaveAsHTML=12,
ppSaveAsHTMLv3=13,
ppSaveAsHTMLDual=14,
ppSaveAsMetaFile=15,
ppSaveAsGIF=16,
ppSaveAsJPG=17,
ppSaveAsPNG=18,
ppSaveAsBMP=19,
ppSaveAsWebArchive=20,
ppSaveAsTIF=21,
ppSaveAsPresForReview=22,
ppSaveAsEMF=23,
ppSaveAsOpenXMLPresentation=24,
ppSaveAsOpenXMLPresentationMacroEnabled=25,
ppSaveAsOpenXMLTemplate=26,
ppSaveAsOpenXMLTemplateMacroEnabled=27,
ppSaveAsOpenXMLShow=28,
ppSaveAsOpenXMLShowMacroEnabled=29,
ppSaveAsOpenXMLAddin=30,
ppSaveAsOpenXMLTheme=31,
ppSaveAsPDF=32,
ppSaveAsXPS=33,
ppSaveAsXMLPresentation=34,
ppSaveAsOpenDocumentPresentation=35,
ppSaveAsOpenXMLPicturePresentation=36,
ppSaveAsWMV=37,
ppSaveAsStrictOpenXMLPresentation=38,
ppSaveAsMP4=39,
ppSaveAsExternalConverter=64000

}
export const enum PpSaveAsFileType{
ppSaveAsPresentation=1,
ppSaveAsPowerPoint7=2,
ppSaveAsPowerPoint4=3,
ppSaveAsPowerPoint3=4,
ppSaveAsTemplate=5,
ppSaveAsRTF=6,
ppSaveAsShow=7,
ppSaveAsAddIn=8,
ppSaveAsPowerPoint4FarEast=10,
ppSaveAsDefault=11,
ppSaveAsHTML=12,
ppSaveAsHTMLv3=13,
ppSaveAsHTMLDual=14,
ppSaveAsMetaFile=15,
ppSaveAsGIF=16,
ppSaveAsJPG=17,
ppSaveAsPNG=18,
ppSaveAsBMP=19,
ppSaveAsWebArchive=20,
ppSaveAsTIF=21,
ppSaveAsPresForReview=22,
ppSaveAsEMF=23,
ppSaveAsOpenXMLPresentation=24,
ppSaveAsOpenXMLPresentationMacroEnabled=25,
ppSaveAsOpenXMLTemplate=26,
ppSaveAsOpenXMLTemplateMacroEnabled=27,
ppSaveAsOpenXMLShow=28,
ppSaveAsOpenXMLShowMacroEnabled=29,
ppSaveAsOpenXMLAddin=30,
ppSaveAsOpenXMLTheme=31,
ppSaveAsPDF=32,
ppSaveAsXPS=33,
ppSaveAsXMLPresentation=34,
ppSaveAsOpenDocumentPresentation=35,
ppSaveAsOpenXMLPicturePresentation=36,
ppSaveAsWMV=37,
ppSaveAsStrictOpenXMLPresentation=38,
ppSaveAsMP4=39,
ppSaveAsExternalConverter=64000

}
export const enum PpSelectionType{
ppSelectionNone=0,
ppSelectionSlides=1,
ppSelectionShapes=2,
ppSelectionText=3

}
export const enum PpSelectionType{
ppSelectionNone=0,
ppSelectionSlides=1,
ppSelectionShapes=2,
ppSelectionText=3

}
export const enum PpSlideLayout{
ppLayoutMixed=-2,
ppLayoutTitle=1,
ppLayoutText=2,
ppLayoutTwoColumnText=3,
ppLayoutTable=4,
ppLayoutTextAndChart=5,
ppLayoutChartAndText=6,
ppLayoutOrgchart=7,
ppLayoutChart=8,
ppLayoutTextAndClipart=9,
ppLayoutClipartAndText=10,
ppLayoutTitleOnly=11,
ppLayoutBlank=12,
ppLayoutTextAndObject=13,
ppLayoutObjectAndText=14,
ppLayoutLargeObject=15,
ppLayoutObject=16,
ppLayoutTextAndMediaClip=17,
ppLayoutMediaClipAndText=18,
ppLayoutObjectOverText=19,
ppLayoutTextOverObject=20,
ppLayoutTextAndTwoObjects=21,
ppLayoutTwoObjectsAndText=22,
ppLayoutTwoObjectsOverText=23,
ppLayoutFourObjects=24,
ppLayoutVerticalText=25,
ppLayoutClipArtAndVerticalText=26,
ppLayoutVerticalTitleAndText=27,
ppLayoutVerticalTitleAndTextOverChart=28,
ppLayoutTwoObjects=29,
ppLayoutObjectAndTwoObjects=30,
ppLayoutTwoObjectsAndObject=31,
ppLayoutCustom=32,
ppLayoutSectionHeader=33,
ppLayoutComparison=34,
ppLayoutContentWithCaption=35,
ppLayoutPictureWithCaption=36

}
export const enum PpSlideLayout{
ppLayoutMixed=-2,
ppLayoutTitle=1,
ppLayoutText=2,
ppLayoutTwoColumnText=3,
ppLayoutTable=4,
ppLayoutTextAndChart=5,
ppLayoutChartAndText=6,
ppLayoutOrgchart=7,
ppLayoutChart=8,
ppLayoutTextAndClipart=9,
ppLayoutClipartAndText=10,
ppLayoutTitleOnly=11,
ppLayoutBlank=12,
ppLayoutTextAndObject=13,
ppLayoutObjectAndText=14,
ppLayoutLargeObject=15,
ppLayoutObject=16,
ppLayoutTextAndMediaClip=17,
ppLayoutMediaClipAndText=18,
ppLayoutObjectOverText=19,
ppLayoutTextOverObject=20,
ppLayoutTextAndTwoObjects=21,
ppLayoutTwoObjectsAndText=22,
ppLayoutTwoObjectsOverText=23,
ppLayoutFourObjects=24,
ppLayoutVerticalText=25,
ppLayoutClipArtAndVerticalText=26,
ppLayoutVerticalTitleAndText=27,
ppLayoutVerticalTitleAndTextOverChart=28,
ppLayoutTwoObjects=29,
ppLayoutObjectAndTwoObjects=30,
ppLayoutTwoObjectsAndObject=31,
ppLayoutCustom=32,
ppLayoutSectionHeader=33,
ppLayoutComparison=34,
ppLayoutContentWithCaption=35,
ppLayoutPictureWithCaption=36

}
export const enum PpSlideShowAdvanceMode{
ppSlideShowManualAdvance=1,
ppSlideShowUseSlideTimings=2,
ppSlideShowRehearseNewTimings=3

}
export const enum PpSlideShowAdvanceMode{
ppSlideShowManualAdvance=1,
ppSlideShowUseSlideTimings=2,
ppSlideShowRehearseNewTimings=3

}
export const enum PpSlideShowPointerType{
ppSlideShowPointerNone=0,
ppSlideShowPointerArrow=1,
ppSlideShowPointerPen=2,
ppSlideShowPointerAlwaysHidden=3,
ppSlideShowPointerAutoArrow=4,
ppSlideShowPointerEraser=5

}
export const enum PpSlideShowPointerType{
ppSlideShowPointerNone=0,
ppSlideShowPointerArrow=1,
ppSlideShowPointerPen=2,
ppSlideShowPointerAlwaysHidden=3,
ppSlideShowPointerAutoArrow=4,
ppSlideShowPointerEraser=5

}
export const enum PpSlideShowRangeType{
ppShowAll=1,
ppShowSlideRange=2,
ppShowNamedSlideShow=3

}
export const enum PpSlideShowRangeType{
ppShowAll=1,
ppShowSlideRange=2,
ppShowNamedSlideShow=3

}
export const enum PpSlideShowState{
ppSlideShowRunning=1,
ppSlideShowPaused=2,
ppSlideShowBlackScreen=3,
ppSlideShowWhiteScreen=4,
ppSlideShowDone=5

}
export const enum PpSlideShowState{
ppSlideShowRunning=1,
ppSlideShowPaused=2,
ppSlideShowBlackScreen=3,
ppSlideShowWhiteScreen=4,
ppSlideShowDone=5

}
export const enum PpSlideShowType{
ppShowTypeSpeaker=1,
ppShowTypeWindow=2,
ppShowTypeKiosk=3,
ppShowTypeWindow2=4

}
export const enum PpSlideShowType{
ppShowTypeSpeaker=1,
ppShowTypeWindow=2,
ppShowTypeKiosk=3,
ppShowTypeWindow2=4

}
export const enum PpSlideSizeType{
ppSlideSizeOnScreen=1,
ppSlideSizeLetterPaper=2,
ppSlideSizeA4Paper=3,
ppSlideSize35MM=4,
ppSlideSizeOverhead=5,
ppSlideSizeBanner=6,
ppSlideSizeCustom=7,
ppSlideSizeLedgerPaper=8,
ppSlideSizeA3Paper=9,
ppSlideSizeB4ISOPaper=10,
ppSlideSizeB5ISOPaper=11,
ppSlideSizeB4JISPaper=12,
ppSlideSizeB5JISPaper=13,
ppSlideSizeHagakiCard=14,
ppSlideSizeOnScreen16x9=15,
ppSlideSizeOnScreen16x10=16

}
export const enum PpSlideSizeType{
ppSlideSizeOnScreen=1,
ppSlideSizeLetterPaper=2,
ppSlideSizeA4Paper=3,
ppSlideSize35MM=4,
ppSlideSizeOverhead=5,
ppSlideSizeBanner=6,
ppSlideSizeCustom=7,
ppSlideSizeLedgerPaper=8,
ppSlideSizeA3Paper=9,
ppSlideSizeB4ISOPaper=10,
ppSlideSizeB5ISOPaper=11,
ppSlideSizeB4JISPaper=12,
ppSlideSizeB5JISPaper=13,
ppSlideSizeHagakiCard=14,
ppSlideSizeOnScreen16x9=15,
ppSlideSizeOnScreen16x10=16

}
export const enum PpSoundEffectType{
ppSoundEffectsMixed=-2,
ppSoundNone=0,
ppSoundStopPrevious=1,
ppSoundFile=2

}
export const enum PpSoundEffectType{
ppSoundEffectsMixed=-2,
ppSoundNone=0,
ppSoundStopPrevious=1,
ppSoundFile=2

}
export const enum PpSoundFormatType{
ppSoundFormatMixed=-2,
ppSoundFormatNone=0,
ppSoundFormatWAV=1,
ppSoundFormatMIDI=2,
ppSoundFormatCDAudio=3

}
export const enum PpSoundFormatType{
ppSoundFormatMixed=-2,
ppSoundFormatNone=0,
ppSoundFormatWAV=1,
ppSoundFormatMIDI=2,
ppSoundFormatCDAudio=3

}
export const enum PpTabStopType{
ppTabStopMixed=-2,
ppTabStopLeft=1,
ppTabStopCenter=2,
ppTabStopRight=3,
ppTabStopDecimal=4

}
export const enum PpTabStopType{
ppTabStopMixed=-2,
ppTabStopLeft=1,
ppTabStopCenter=2,
ppTabStopRight=3,
ppTabStopDecimal=4

}
export const enum PpTextStyleType{
ppDefaultStyle=1,
ppTitleStyle=2,
ppBodyStyle=3

}
export const enum PpTextStyleType{
ppDefaultStyle=1,
ppTitleStyle=2,
ppBodyStyle=3

}
export const enum PpTextUnitEffect{
ppAnimateUnitMixed=-2,
ppAnimateByParagraph=0,
ppAnimateByWord=1,
ppAnimateByCharacter=2

}
export const enum PpTextUnitEffect{
ppAnimateUnitMixed=-2,
ppAnimateByParagraph=0,
ppAnimateByWord=1,
ppAnimateByCharacter=2

}
export const enum PpTransitionSpeed{
ppTransitionSpeedMixed=-2,
ppTransitionSpeedSlow=1,
ppTransitionSpeedMedium=2,
ppTransitionSpeedFast=3

}
export const enum PpTransitionSpeed{
ppTransitionSpeedMixed=-2,
ppTransitionSpeedSlow=1,
ppTransitionSpeedMedium=2,
ppTransitionSpeedFast=3

}
export const enum PpUpdateOption{
ppUpdateOptionMixed=-2,
ppUpdateOptionManual=1,
ppUpdateOptionAutomatic=2

}
export const enum PpUpdateOption{
ppUpdateOptionMixed=-2,
ppUpdateOptionManual=1,
ppUpdateOptionAutomatic=2

}
export const enum PpViewType{
ppViewSlide=1,
ppViewSlideMaster=2,
ppViewNotesPage=3,
ppViewHandoutMaster=4,
ppViewNotesMaster=5,
ppViewOutline=6,
ppViewSlideSorter=7,
ppViewTitleMaster=8,
ppViewNormal=9,
ppViewPrintPreview=10,
ppViewThumbnails=11,
ppViewMasterThumbnails=12

}
export const enum PpViewType{
ppViewSlide=1,
ppViewSlideMaster=2,
ppViewNotesPage=3,
ppViewHandoutMaster=4,
ppViewNotesMaster=5,
ppViewOutline=6,
ppViewSlideSorter=7,
ppViewTitleMaster=8,
ppViewNormal=9,
ppViewPrintPreview=10,
ppViewThumbnails=11,
ppViewMasterThumbnails=12

}
export const enum PpWindowState{
ppWindowNormal=1,
ppWindowMinimized=2,
ppWindowMaximized=3

}
export const enum PpWindowState{
ppWindowNormal=1,
ppWindowMinimized=2,
ppWindowMaximized=3

}
}
declare namespace powerpoint.event{
export interface ApplicationEvent{
isCancel():boolean
setCancel(cancel:boolean):void
getPresentation():powerpoint.Presentation
getDocumentWindow():powerpoint.DocumentWindow
getSlide():powerpoint.Slide
getSelelction():powerpoint.Selection
}
export interface ApplicationEvent{
isCancel():boolean
setCancel(cancel:boolean):void
getPresentation():powerpoint.Presentation
getDocumentWindow():powerpoint.DocumentWindow
getSlide():powerpoint.Slide
getSelelction():powerpoint.Selection
}
export interface ApplicationListener{
windowActivate(e:powerpoint.event.ApplicationEvent):void
windowDeactivate(e:powerpoint.event.ApplicationEvent):void
windowSelectionChange(e:powerpoint.event.ApplicationEvent):void
windowBeforeDoubleClick(e:powerpoint.event.ApplicationEvent):boolean
windowBeforeRightClick(e:powerpoint.event.ApplicationEvent):boolean
presentationClose(e:powerpoint.event.ApplicationEvent):void
afterNewPresentation(e:powerpoint.event.ApplicationEvent):void
afterPresentationOpen(e:powerpoint.event.ApplicationEvent):void
presentationBeforeClose(e:powerpoint.event.ApplicationEvent):void
presentationBeforeSave(e:powerpoint.event.ApplicationEvent):boolean
presentationCloseFinal(e:powerpoint.event.ApplicationEvent):void
presentationNewSlide(e:powerpoint.event.ApplicationEvent):void
presentationPrint(e:powerpoint.event.ApplicationEvent):void
protectedViewWindowOpen(e:powerpoint.event.ApplicationEvent):void
slideSelectionChanged(e:powerpoint.event.ApplicationEvent):void
slideShowNextBuild(e:powerpoint.event.ApplicationEvent):void
slideShowNextClick(e:powerpoint.event.ApplicationEvent):void
slideShowNextSlide(e:powerpoint.event.ApplicationEvent):void
slideShowOnPrevious(e:powerpoint.event.ApplicationEvent):void
colorSchemeChanged(e:powerpoint.event.ApplicationEvent):void
protectedViewWindowActivate(e:powerpoint.event.ApplicationEvent):void
protectedViewWindowBeforeClose(e:powerpoint.event.ApplicationEvent):void
protectedViewWindowBeforeEdit(e:powerpoint.event.ApplicationEvent):void
protectedViewWindowDeactivate(e:powerpoint.event.ApplicationEvent):void
newPresentation(e:powerpoint.event.ApplicationEvent):void
presentationOpen(e:powerpoint.event.ApplicationEvent):void
presentationSave(e:powerpoint.event.ApplicationEvent):void
presentationSync(e:powerpoint.event.ApplicationEvent):void
slideShowBegin(e:powerpoint.event.ApplicationEvent):void
slideShowEnd(e:powerpoint.event.ApplicationEvent):void
slideShowOnNext(e:powerpoint.event.ApplicationEvent):void
}
export interface ApplicationListener{
windowActivate(e:powerpoint.event.ApplicationEvent):void
windowDeactivate(e:powerpoint.event.ApplicationEvent):void
windowSelectionChange(e:powerpoint.event.ApplicationEvent):void
windowBeforeDoubleClick(e:powerpoint.event.ApplicationEvent):boolean
windowBeforeRightClick(e:powerpoint.event.ApplicationEvent):boolean
presentationClose(e:powerpoint.event.ApplicationEvent):void
afterNewPresentation(e:powerpoint.event.ApplicationEvent):void
afterPresentationOpen(e:powerpoint.event.ApplicationEvent):void
presentationBeforeClose(e:powerpoint.event.ApplicationEvent):void
presentationBeforeSave(e:powerpoint.event.ApplicationEvent):boolean
presentationCloseFinal(e:powerpoint.event.ApplicationEvent):void
presentationNewSlide(e:powerpoint.event.ApplicationEvent):void
presentationPrint(e:powerpoint.event.ApplicationEvent):void
protectedViewWindowOpen(e:powerpoint.event.ApplicationEvent):void
slideSelectionChanged(e:powerpoint.event.ApplicationEvent):void
slideShowNextBuild(e:powerpoint.event.ApplicationEvent):void
slideShowNextClick(e:powerpoint.event.ApplicationEvent):void
slideShowNextSlide(e:powerpoint.event.ApplicationEvent):void
slideShowOnPrevious(e:powerpoint.event.ApplicationEvent):void
colorSchemeChanged(e:powerpoint.event.ApplicationEvent):void
protectedViewWindowActivate(e:powerpoint.event.ApplicationEvent):void
protectedViewWindowBeforeClose(e:powerpoint.event.ApplicationEvent):void
protectedViewWindowBeforeEdit(e:powerpoint.event.ApplicationEvent):void
protectedViewWindowDeactivate(e:powerpoint.event.ApplicationEvent):void
newPresentation(e:powerpoint.event.ApplicationEvent):void
presentationOpen(e:powerpoint.event.ApplicationEvent):void
presentationSave(e:powerpoint.event.ApplicationEvent):void
presentationSync(e:powerpoint.event.ApplicationEvent):void
slideShowBegin(e:powerpoint.event.ApplicationEvent):void
slideShowEnd(e:powerpoint.event.ApplicationEvent):void
slideShowOnNext(e:powerpoint.event.ApplicationEvent):void
}
export interface MainAdapter{
getType():int
windowOpened(e:any):void
windowClosing(e:any):void
windowClosed(e:any):void
windowIconified(e:any):void
windowDeiconified(e:any):void
windowActivated(e:any):void
windowDeactivated(e:any):void
statusChanged(event:any):boolean
windowActivate(event:any):void
beforeExit(event:any):boolean
saveTree(event:any):void
loadTree(event:any):void
windowDeactivate(event:any):void
windowResize(event:any):void
afterOpenBinder(event:any):void
workbookActivate(event:any):void
saveTemplate(event:any):void
loadTemplate(event:any):void
delTemplate(event:any):void
loadCustomMeta(event:any):void
loadFixedBase(event:any):void
wordStatusChange(event:any):boolean
beforeCloseBinder(event:any):boolean
afterCreateBinder(event:any):void
beforePrintWorkbook(event:any):boolean
afterPrintWorkbook(event:any):boolean
beforeSaveWorkbook(event:any):boolean
workbookDeactivate(event:any):void
afterBinderReveredSave(event:any):void
}
export interface MainAdapter{
getType():int
windowOpened(e:any):void
windowClosing(e:any):void
windowClosed(e:any):void
windowIconified(e:any):void
windowDeiconified(e:any):void
windowActivated(e:any):void
windowDeactivated(e:any):void
statusChanged(event:any):boolean
windowActivate(event:any):void
beforeExit(event:any):boolean
saveTree(event:any):void
loadTree(event:any):void
windowDeactivate(event:any):void
windowResize(event:any):void
afterOpenBinder(event:any):void
workbookActivate(event:any):void
saveTemplate(event:any):void
loadTemplate(event:any):void
delTemplate(event:any):void
loadCustomMeta(event:any):void
loadFixedBase(event:any):void
wordStatusChange(event:any):boolean
beforeCloseBinder(event:any):boolean
afterCreateBinder(event:any):void
beforePrintWorkbook(event:any):boolean
afterPrintWorkbook(event:any):boolean
beforeSaveWorkbook(event:any):boolean
workbookDeactivate(event:any):void
afterBinderReveredSave(event:any):void
}
}
